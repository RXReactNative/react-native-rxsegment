(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(e,t,n){e.exports=n(188)()},function(e,t,n){"use strict";e.exports=n(186)},function(e,t,n){"use strict";var r=function(e){if(void 0===e)throw new Error("invariant(...): Second argument must be a string.")};e.exports=function(e,t){for(var n=arguments.length,i=new Array(n>2?n-2:0),o=2;o<n;o++)i[o-2]=arguments[o];if(r(t),!e){var a;if(void 0===t)a=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=0;(a=new Error(t.replace(/%s/g,(function(){return String(i[s++])})))).name="Invariant Violation"}throw a.framesToPop=1,a}}},function(e,t,n){"use strict";n.r(t);var r=n(52),i=n(26),o=n(0),a=n(32),s=n(35),l={accessibilityComponentType:!0,accessibilityLabel:!0,accessibilityLiveRegion:!0,accessibilityRole:!0,accessibilityStates:!0,accessibilityTraits:!0,accessible:!0,children:!0,disabled:!0,importantForAccessibility:!0,nativeID:!0,onBlur:!0,onContextMenu:!0,onFocus:!0,onMoveShouldSetResponder:!0,onMoveShouldSetResponderCapture:!0,onResponderEnd:!0,onResponderGrant:!0,onResponderMove:!0,onResponderReject:!0,onResponderRelease:!0,onResponderStart:!0,onResponderTerminate:!0,onResponderTerminationRequest:!0,onScrollShouldSetResponder:!0,onScrollShouldSetResponderCapture:!0,onSelectionChangeShouldSetResponder:!0,onSelectionChangeShouldSetResponderCapture:!0,onStartShouldSetResponder:!0,onStartShouldSetResponderCapture:!0,onTouchCancel:!0,onTouchCancelCapture:!0,onTouchEnd:!0,onTouchEndCapture:!0,onTouchMove:!0,onTouchMoveCapture:!0,onTouchStart:!0,onTouchStartCapture:!0,pointerEvents:!0,style:!0,testID:!0,onScroll:!0,onWheel:!0,onKeyDown:!0,onKeyPress:!0,onKeyUp:!0,onMouseDown:!0,onMouseEnter:!0,onMouseLeave:!0,onMouseMove:!0,onMouseOver:!0,onMouseOut:!0,onMouseUp:!0,className:!0,href:!0,itemID:!0,itemRef:!0,itemProp:!0,itemScope:!0,itemType:!0,onClick:!0,onClickCapture:!0,rel:!0,target:!0},u=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(l[n]||0===n.indexOf("aria-")||0===n.indexOf("data-"))&&(t[n]=e[n]);return t},c=(n(2),n(34),n(4)),f=n(1),d=n.n(f);var p=function(e){var t,n;function r(){return e.apply(this,arguments)||this}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,r.prototype.render=function(){var e=this.props.hitSlop,t=u(this.props);var n=this.context.isInAParentText;if(t.classList=[this.props.className,h.view],t.style=c.default.compose(n&&v.inline,this.props.style),e){var r=function(e){var t={};for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];t[n]=r>0?-1*r:0}return t}(e),i=Object(a.a)("span",{classList:[h.hitSlop],style:r});t.children=d.a.Children.toArray([i,t.children])}return Object(a.a)("div",t)},r}(f.Component);p.displayName="View",p.contextTypes={isInAParentText:o.bool},p.propTypes={};var h=s.a.create({view:{alignItems:"stretch",border:"0 solid black",boxSizing:"border-box",display:"flex",flexBasis:"auto",flexDirection:"column",flexShrink:0,margin:0,minHeight:0,minWidth:0,padding:0,position:"relative",zIndex:0},hitSlop:{position:"absolute",top:0,left:0,right:0,bottom:0,zIndex:-1}}),v=c.default.create({inline:{display:"inline-flex"}});t.default=Object(r.a)(Object(i.a)(p))},function(e,t,n){"use strict";n.r(t);var r=n(9),i=n(68),o=n(69),a={position:"absolute",left:0,right:0,top:0,bottom:0},s={absoluteFill:i.a.register(a),absoluteFillObject:a,compose:function(e,t){return e&&t?[e,t]:e||t},create:function(e){var t={};return Object.keys(e).forEach((function(n){var r=e[n]&&i.a.register(e[n]);t[n]=r})),t},flatten:o.a,hairlineWidth:1};r.canUseDOM&&window.__REACT_DEVTOOLS_GLOBAL_HOOK__&&(window.__REACT_DEVTOOLS_GLOBAL_HOOK__.resolveRNStyle=s.flatten);t.default=s},function(e,t,n){"use strict";var r=n(6),i=n(2),o=n.n(i),a=function(){function e(){}var t=e.prototype;return t.__attach=function(){},t.__detach=function(){this.__isNative&&null!=this.__nativeTag&&(r.a.API.dropAnimatedNode(this.__nativeTag),this.__nativeTag=void 0)},t.__getValue=function(){},t.__getAnimatedValue=function(){return this.__getValue()},t.__addChild=function(e){},t.__removeChild=function(e){},t.__getChildren=function(){return[]},t.__makeNative=function(){if(!this.__isNative)throw new Error('This node cannot be made a "native" animated node')},t.__getNativeTag=function(){if(r.a.assertNativeAnimatedModule(),o()(this.__isNative,'Attempt to get native tag from node not marked as "native"'),null==this.__nativeTag){var e=r.a.generateNewNodeTag();r.a.API.createAnimatedNode(e,this.__getNativeConfig()),this.__nativeTag=e}return this.__nativeTag},t.__getNativeConfig=function(){throw new Error("This JS animated node type cannot be used as native animated node")},t.toJSON=function(){return this.__getValue()},e}();t.a=a},function(e,t,n){"use strict";var r=n(2),i=n.n(r),o=n(81);var a=function(e){var t,n;function r(t,n,r,i){var o;return(o=e.call(this,n)||this).emitter=t,o.listener=r,o.context=i,o}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,r.prototype.remove=function(){this.emitter.removeSubscription(this)},r}(function(){function e(e){this.subscriber=e}return e.prototype.remove=function(){this.subscriber.removeSubscription(this)},e}()),s=function(){function e(){this._subscriptionsForType={},this._currentSubscription=null}var t=e.prototype;return t.addSubscription=function(e,t){i()(t.subscriber===this,"The subscriber of the subscription is incorrectly set."),this._subscriptionsForType[e]||(this._subscriptionsForType[e]=[]);var n=this._subscriptionsForType[e].length;return this._subscriptionsForType[e].push(t),t.eventType=e,t.key=n,t},t.removeAllSubscriptions=function(e){void 0===e?this._subscriptionsForType={}:delete this._subscriptionsForType[e]},t.removeSubscription=function(e){var t=e.eventType,n=e.key,r=this._subscriptionsForType[t];r&&delete r[n]},t.getSubscriptionsForType=function(e){return this._subscriptionsForType[e]},e}(),l=n(106),u=n.n(l),c=function(){function e(e){this._subscriber=e||new s}var t=e.prototype;return t.addListener=function(e,t,n){return this._subscriber.addSubscription(e,new a(this,this._subscriber,t,n))},t.once=function(e,t,n){var r=this;return this.addListener(e,(function(){r.removeCurrentListener();for(var e=arguments.length,i=new Array(e),o=0;o<e;o++)i[o]=arguments[o];t.apply(n,i)}))},t.removeAllListeners=function(e){this._subscriber.removeAllSubscriptions(e)},t.removeCurrentListener=function(){i()(!!this._currentSubscription,"Not in an emitting cycle; there is no current subscription"),this.removeSubscription(this._currentSubscription)},t.removeSubscription=function(e){i()(e.emitter===this,"Subscription does not belong to this emitter."),this._subscriber.removeSubscription(e)},t.listeners=function(e){var t=this._subscriber.getSubscriptionsForType(e);return t?t.filter(u.a.thatReturnsTrue).map((function(e){return e.listener})):[]},t.emit=function(e){var t=this._subscriber.getSubscriptionsForType(e);if(t){for(var n=0,r=t.length;n<r;n++){var i=t[n];i&&(this._currentSubscription=i,i.listener.apply(i.context,Array.prototype.slice.call(arguments,1)))}this._currentSubscription=null}},t.removeListener=function(e,t){var n=this._subscriber.getSubscriptionsForType(e);if(n)for(var r=0,i=n.length;r<i;r++){var o=n[r];o&&o.listener===t&&o.remove()}},e}();var f=new(function(e){var t,n;function r(){var t,n=new s;return(t=e.call(this,n)||this).sharedSubscriber=n,t}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.addListener=function(t,n,r){return e.prototype.addListener.call(this,t,n,r)},i.removeAllListeners=function(t){e.prototype.removeAllListeners.call(this,t)},i.removeSubscription=function(t){t.emitter!==this?t.emitter.removeSubscription(t):e.prototype.removeSubscription.call(this,t)},r}(c));var d=function(e){var t,n;function r(t){return e.call(this,f.sharedSubscriber)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.addListener=function(t,n,r){return null!=this._nativeModule&&this._nativeModule.addListener(t),e.prototype.addListener.call(this,t,n,r)},o.removeAllListeners=function(t){i()(t,"eventType argument is required.");var n=this.listeners(t).length;null!=this._nativeModule&&this._nativeModule.removeListeners(n),e.prototype.removeAllListeners.call(this,t)},o.removeSubscription=function(t){null!=this._nativeModule&&this._nativeModule.removeListeners(1),e.prototype.removeSubscription.call(this,t)},r}(c);n.d(t,"b",(function(){return _})),n.d(t,"c",(function(){return O}));var p,h=o.default.NativeAnimatedModule,v=1,m=1,y={opacity:!0,transform:!0,shadowOpacity:!0,shadowRadius:!0,scaleX:!0,scaleY:!0,translateX:!0,translateY:!0},g={translateX:!0,translateY:!0,scale:!0,scaleX:!0,scaleY:!0,rotate:!0,rotateX:!0,rotateY:!0,perspective:!0},b={inputRange:!0,outputRange:!0,extrapolate:!0,extrapolateRight:!0,extrapolateLeft:!0};function _(){return m++}function w(){i()(h,"Native animated module is not available")}var S=!1;function O(e){return e.useNativeDriver&&!h?(S||(console.warn("Animated: `useNativeDriver` is not supported because the native animated module is missing. Falling back to JS-based animation. To resolve this, add `RCTAnimation` module to this app, or remove `useNativeDriver`. More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420"),S=!0),!1):e.useNativeDriver||!1}var E={API:{createAnimatedNode:function(e,t){w(),h.createAnimatedNode(e,t)},startListeningToAnimatedNodeValue:function(e){w(),h.startListeningToAnimatedNodeValue(e)},stopListeningToAnimatedNodeValue:function(e){w(),h.stopListeningToAnimatedNodeValue(e)},connectAnimatedNodes:function(e,t){w(),h.connectAnimatedNodes(e,t)},disconnectAnimatedNodes:function(e,t){w(),h.disconnectAnimatedNodes(e,t)},startAnimatingNode:function(e,t,n,r){w(),h.startAnimatingNode(e,t,n,r)},stopAnimation:function(e){w(),h.stopAnimation(e)},setAnimatedNodeValue:function(e,t){w(),h.setAnimatedNodeValue(e,t)},setAnimatedNodeOffset:function(e,t){w(),h.setAnimatedNodeOffset(e,t)},flattenAnimatedNodeOffset:function(e){w(),h.flattenAnimatedNodeOffset(e)},extractAnimatedNodeOffset:function(e){w(),h.extractAnimatedNodeOffset(e)},connectAnimatedNodeToView:function(e,t){w(),h.connectAnimatedNodeToView(e,t)},disconnectAnimatedNodeFromView:function(e,t){w(),h.disconnectAnimatedNodeFromView(e,t)},dropAnimatedNode:function(e){w(),h.dropAnimatedNode(e)},addAnimatedEventToView:function(e,t,n){w(),h.addAnimatedEventToView(e,t,n)},removeAnimatedEventFromView:function(e,t,n){w(),h.removeAnimatedEventFromView(e,t,n)}},addWhitelistedStyleProp:function(e){y[e]=!0},addWhitelistedTransformProp:function(e){g[e]=!0},addWhitelistedInterpolationParam:function(e){b[e]=!0},validateStyles:function(e){for(var t in e)if(!y.hasOwnProperty(t))throw new Error("Style property '"+t+"' is not supported by native animated module")},validateTransform:function(e){e.forEach((function(e){if(!g.hasOwnProperty(e.property))throw new Error("Property '"+e.property+"' is not supported by native animated module")}))},validateInterpolation:function(e){for(var t in e)if(!b.hasOwnProperty(t))throw new Error("Interpolation property '"+t+"' is not supported by native animated module")},generateNewNodeTag:function(){return v++},generateNewAnimationId:_,assertNativeAnimatedModule:w,shouldUseNativeDriver:O,get nativeEventEmitter(){return p||(p=new d(h)),p}};t.a=E},function(e,t,n){"use strict";n.r(t);var r=n(45);t.default=function(e){var t;try{t=Object(r.findDOMNode)(e)}catch(e){}return t}},function(e,t,n){"use strict";n.r(t);t.default={OS:"web",select:function(e){return"web"in e?e.web:e.default}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),i={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=i},function(e,t,n){"use strict";var r=n(25),i=n(14),o=n(74),a=n(6);var s=a.a.API,l=1;var u=function(e){var t,n;function i(t){var n;return(n=e.call(this)||this)._startingValue=n._value=t,n._offset=0,n._animation=null,n._listeners={},n}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var u=i.prototype;return u.__detach=function(){this.stopAnimation(),e.prototype.__detach.call(this)},u.__getValue=function(){return this._value+this._offset},u.__makeNative=function(){e.prototype.__makeNative.call(this),Object.keys(this._listeners).length&&this._startListeningToNativeValueUpdates()},u.setValue=function(e){this._animation&&(this._animation.stop(),this._animation=null),this._updateValue(e,!this.__isNative),this.__isNative&&s.setAnimatedNodeValue(this.__getNativeTag(),e)},u.setOffset=function(e){this._offset=e,this.__isNative&&s.setAnimatedNodeOffset(this.__getNativeTag(),e)},u.flattenOffset=function(){this._value+=this._offset,this._offset=0,this.__isNative&&s.flattenAnimatedNodeOffset(this.__getNativeTag())},u.extractOffset=function(){this._offset+=this._value,this._value=0,this.__isNative&&s.extractAnimatedNodeOffset(this.__getNativeTag())},u.addListener=function(e){var t=String(l++);return this._listeners[t]=e,this.__isNative&&this._startListeningToNativeValueUpdates(),t},u.removeListener=function(e){delete this._listeners[e],this.__isNative&&0===Object.keys(this._listeners).length&&this._stopListeningForNativeValueUpdates()},u.removeAllListeners=function(){this._listeners={},this.__isNative&&this._stopListeningForNativeValueUpdates()},u._startListeningToNativeValueUpdates=function(){var e=this;this.__nativeAnimatedValueListener||(s.startListeningToAnimatedNodeValue(this.__getNativeTag()),this.__nativeAnimatedValueListener=a.a.nativeEventEmitter.addListener("onAnimatedValueUpdate",(function(t){t.tag===e.__getNativeTag()&&e._updateValue(t.value,!1)})))},u._stopListeningForNativeValueUpdates=function(){this.__nativeAnimatedValueListener&&(this.__nativeAnimatedValueListener.remove(),this.__nativeAnimatedValueListener=null,s.stopListeningToAnimatedNodeValue(this.__getNativeTag()))},u.stopAnimation=function(e){this.stopTracking(),this._animation&&this._animation.stop(),this._animation=null,e&&e(this.__getValue())},u.resetAnimation=function(e){this.stopAnimation(e),this._value=this._startingValue},u.interpolate=function(e){return new r.a(this,e)},u.animate=function(e,t){var n=this,r=null;e.__isInteraction&&(r=o.a.createInteractionHandle());var i=this._animation;this._animation&&this._animation.stop(),this._animation=e,e.start(this._value,(function(e){n._updateValue(e,!0)}),(function(e){n._animation=null,null!==r&&o.a.clearInteractionHandle(r),t&&t(e)}),i,this)},u.stopTracking=function(){this._tracking&&this._tracking.__detach(),this._tracking=null},u.track=function(e){this.stopTracking(),this._tracking=e},u._updateValue=function(e,t){var n,r;for(var i in this._value=e,t&&(n=this,r=new Set,function e(t){"function"==typeof t.update?r.add(t):t.__getChildren().forEach(e)}(n),r.forEach((function(e){return e.update()}))),this._listeners)this._listeners[i]({value:this.__getValue()})},u.__getNativeConfig=function(){return{type:"value",value:this._value,offset:this._offset}},i}(i.a);t.a=u},function(e,t){const n=(e,t)=>{throw new Error(`${e}. See https://reactnavigation.org/docs/${t}.html for more details.`)};e.exports={get createNavigationContainer(){throw new Error("`createNavigationContainer()` has been removed. Use `createAppContainer()` instead. You can also import createAppContainer directly from `@react-navigation/native`.")},get createStackNavigator(){n("`createStackNavigator()` has been moved to `react-navigation-stack`","stack-navigator")},get createBottomTabNavigator(){n("`createBottomTabNavigator()` has been moved to `react-navigation-tabs`","bottom-tab-navigator")},get createMaterialTopTabNavigator(){n("`createMaterialTopTabNavigator()` has been moved to `react-navigation-tabs`","material-top-tab-navigator")},get createDrawerNavigator(){n("`createDrawerNavigator()` has been moved to `react-navigation-drawer`","drawer-navigator")},get StackGestureContext(){n("`StackGestureContext` has been moved to `react-navigation-stack`","stack-navigator")},get DrawerGestureContext(){n("`DrawerGestureContext` has been moved to `react-navigation-drawer`","stack-navigator")},get DrawerRouter(){n("`DrawerRouter` has been moved to `react-navigation-drawer`","drawer-navigator")},get DrawerActions(){n("`DrawerActions` has been moved to `react-navigation-drawer`","drawer-navigator")},get Transitioner(){n("`Transitioner` has been removed.","stack-navigator")},get StackView(){n("`StackView` has been removed","stack-navigator")},get StackViewCard(){n("`StackViewCard` has been removed","stack-navigator")},get StackViewTransitionConfigs(){n("`StackViewTransitionConfigs` has been removed","stack-navigator")},get Header(){n("`Header` has been moved to `react-navigation-stack`","stack-navigator")},get HeaderTitle(){n("`HeaderTitle` has been moved to `react-navigation-stack`","stack-navigator")},get HeaderBackButton(){n("`HeaderBackButton` has been moved to `react-navigation-stack`","stack-navigator")},get HeaderStyleInterpolator(){n("`HeaderStyleInterpolator` has been removed","stack-navigator")},get DrawerView(){n("`createStackNavigator()` has been moved to `react-navigation-drawer`","stack-navigator")},get DrawerItems(){n("`DrawerItems` has been moved to `react-navigation-drawer`","drawer-navigator")},get DrawerSidebar(){n("`DrawerSidebar` has been moved to `react-navigation-drawer`","drawer-navigator")},get BottomTabBar(){n("`BottomTabBar` has been moved to `react-navigation-tabs`","bottom-tab-navigator")},get MaterialTopTabBar(){n("`MaterialTopTabBar` has been moved to `react-navigation-tabs`","material-top-tab-navigator")}}},function(e,t,n){"use strict";var r=n(42),i=n(71);var o=function(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||i.a.hasOwnProperty(e)&&i.a[e]?(""+t).trim():t+"px"},a=n(65);var s=function(e,t,n){var r=e.style;for(var i in t)if(t.hasOwnProperty(i)){var s=0===i.indexOf("--");0;var l=o(i,t[i],s);if("float"===i&&(i="cssFloat"),s){var u=s?i:Object(a.default)(i);r.setProperty(u,l)}else r[i]=l}},l=function(e){var t=Object(r.a)(e),n=t.x,i=t.y,o=t.top,a=t.left;return{x:n,y:i,width:e.offsetWidth,height:e.offsetHeight,top:o,left:a}},u=function(e,t,n){var i=t||e&&e.parentNode;e&&i&&setTimeout((function(){var t=Object(r.a)(i),o=l(e),a=o.height,s=o.left,u=o.top,c=o.width,f=s-t.left,d=u-t.top;n(f,d,c,a,s,u)}),0)},c={A:!0,INPUT:!0,SELECT:!0,TEXTAREA:!0},f={blur:function(e){try{e.blur()}catch(e){}},focus:function(e){try{var t=e.nodeName;null==e.getAttribute("tabIndex")&&null==c[t]&&e.setAttribute("tabIndex","-1"),e.focus()}catch(e){}},measure:function(e,t){u(e,null,t)},measureInWindow:function(e,t){e&&setTimeout((function(){var n=l(e),r=n.height,i=n.left,o=n.top,a=n.width;t(i,o,a,r)}),0)},measureLayout:function(e,t,n,r){u(e,t,r)},updateView:function(e,t,n){for(var r in t)if(Object.prototype.hasOwnProperty.call(t,r)){var i=t[r];switch(r){case"style":s(e,i,n._reactInternalInstance);break;case"class":case"className":e.setAttribute("class",i);break;case"text":case"value":e.value=i;break;default:e.setAttribute(r,i)}}},configureNextLayoutAnimation:function(e,t){t()},setLayoutAnimationEnabledExperimental:function(){}};t.a=f},function(e,t,n){var r=n(123);e.exports=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?Object(arguments[t]):{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){r(e,t,n[t])}))}return e}},function(e,t,n){"use strict";var r=n(5),i=n(6);var o=function(e){var t,n;function r(){var t;return(t=e.call(this)||this)._children=[],t}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.__makeNative=function(){if(!this.__isNative){this.__isNative=!0;var e=this._children,t=Array.isArray(e),n=0;for(e=t?e:e[Symbol.iterator]();;){var r;if(t){if(n>=e.length)break;r=e[n++]}else{if((n=e.next()).done)break;r=n.value}var o=r;o.__makeNative(),i.a.API.connectAnimatedNodes(this.__getNativeTag(),o.__getNativeTag())}}},o.__addChild=function(e){0===this._children.length&&this.__attach(),this._children.push(e),this.__isNative&&(e.__makeNative(),i.a.API.connectAnimatedNodes(this.__getNativeTag(),e.__getNativeTag()))},o.__removeChild=function(e){var t=this._children.indexOf(e);-1!==t?(this.__isNative&&e.__isNative&&i.a.API.disconnectAnimatedNodes(this.__getNativeTag(),e.__getNativeTag()),this._children.splice(t,1),0===this._children.length&&this.__detach()):console.warn("Trying to remove a child that doesn't exist")},o.__getChildren=function(){return this._children},r}(r.a);t.a=o},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){var r=n(217),i=n(218);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?i(e):t}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t,n){var r=n(219);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t,n){"use strict";var r;n(55);r=function(){},t.a=r},function(e,t,n){"use strict";n.r(t);var r=n(9),i=n.n(r),o=!0,a=!1,s=!0,l=!1,u=function(){return!!l||s&&a},c=function(){i.a.canUseDOM&&document.documentElement&&document.documentElement.setAttribute&&document.documentElement.setAttribute("dir",u()?"rtl":"ltr")},f={allowRTL:function(e){s=e,c()},forceRTL:function(e){l=e,c()},setPreferredLanguageRTL:function(e){a=e,c()},swapLeftAndRightInRTL:function(e){o=e},get doLeftAndRightSwapInRTL(){return o},get isRTL(){return u()}};t.default=f},function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"c",(function(){return i})),n.d(t,"d",(function(){return o})),n.d(t,"a",(function(){return a})),n.d(t,"e",(function(){return s}));var r="react-native-stylesheet",i={reset:0,modality:.1,classicReset:.5,classic:1,atomic:2.2,custom:{borderColor:2,borderRadius:2,borderStyle:2,borderWidth:2,display:2,flex:2,margin:2,overflow:2,overscrollBehavior:2,padding:2,marginHorizontal:2.1,marginVertical:2.1,paddingHorizontal:2.1,paddingVertical:2.1}},o={borderColor:["borderTopColor","borderRightColor","borderBottomColor","borderLeftColor"],borderRadius:["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],borderStyle:["borderTopStyle","borderRightStyle","borderBottomStyle","borderLeftStyle"],borderWidth:["borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth"],margin:["marginTop","marginRight","marginBottom","marginLeft"],marginHorizontal:["marginRight","marginLeft"],marginVertical:["marginTop","marginBottom"],overflow:["overflowX","overflowY"],overscrollBehavior:["overscrollBehaviorX","overscrollBehaviorY"],padding:["paddingTop","paddingRight","paddingBottom","paddingLeft"],paddingHorizontal:["paddingRight","paddingLeft"],paddingVertical:["paddingTop","paddingBottom"]},a="monospace,monospace",s='system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Ubuntu,"Helvetica Neue",sans-serif'},function(e,t,n){"use strict";n.r(t);var r=n(52),i=n(26),o=n(0),a=n(1),s=n(32),l=n(35),u=(n(34),n(4));var c=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.getChildContext=function(){return{isInAParentText:!0}},i.render=function(){var e=this.props,t=e.dir,n=e.numberOfLines,r=e.onPress,i=e.selectable,o=e.style,a=(e.adjustsFontSizeToFit,e.allowFontScaling,e.ellipsizeMode,e.lineBreakMode,e.maxFontSizeMultiplier,e.minimumFontScale,e.onLayout,e.onLongPress,e.pressRetentionOffset,e.selectionColor,e.suppressHighlighting,e.textBreakStrategy,e.tvParallaxProperties,function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["dir","numberOfLines","onPress","selectable","style","adjustsFontSizeToFit","allowFontScaling","ellipsizeMode","lineBreakMode","maxFontSizeMultiplier","minimumFontScale","onLayout","onLongPress","pressRetentionOffset","selectionColor","suppressHighlighting","textBreakStrategy","tvParallaxProperties"])),l=this.context.isInAParentText;r&&(a.accessible=!0,a.onClick=this._createPressHandler(r),a.onKeyDown=this._createEnterHandler(r)),a.classList=[this.props.className,f.text,!0===this.context.isInAParentText&&f.textHasAncestor,1===n&&f.textOneLine,n>1&&f.textMultiLine],a.dir=void 0!==t?t:"auto",a.style=[o,n>1&&{WebkitLineClamp:n},!1===i&&d.notSelectable,r&&d.pressable];var u=l?"span":"div";return Object(s.a)(u,a)},i._createEnterHandler=function(e){return function(t){13===t.keyCode&&e&&e(t)}},i._createPressHandler=function(e){return function(t){t.stopPropagation(),e&&e(t)}},r}(a.Component);c.displayName="Text",c.childContextTypes={isInAParentText:o.bool},c.contextTypes={isInAParentText:o.bool},c.propTypes={};var f=l.a.create({text:{border:"0 solid black",boxSizing:"border-box",color:"black",display:"inline",font:"14px System",margin:0,padding:0,whiteSpace:"pre-wrap",wordWrap:"break-word"},textHasAncestor:{color:"inherit",font:"inherit",whiteSpace:"inherit"},textOneLine:{maxWidth:"100%",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},textMultiLine:{display:"-webkit-box",maxWidth:"100%",overflow:"hidden",textOverflow:"ellipsis",WebkitBoxOrient:"vertical"}}),d=u.default.create({notSelectable:{userSelect:"none"},pressable:{cursor:"pointer"}});t.default=Object(r.a)(Object(i.a)(c))},function(e,t,n){"use strict";var r=n(108);t.a=r.a},function(e,t,n){"use strict";var r=n(14),i=n(2),o=n.n(i),a=n(66),s=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(e){return e};function c(e){if(e.outputRange&&"string"==typeof e.outputRange[0])return function(e){var t=e.outputRange;o()(t.length>=2,"Bad output range"),function(e){for(var t=e[0].replace(d,""),n=1;n<e.length;++n)o()(t===e[n].replace(d,""),"invalid pattern "+e[0]+" and "+e[n])}(t=t.map(f));var n=t[0].match(d).map((function(){return[]}));t.forEach((function(e){e.match(d).forEach((function(e,t){n[t].push(+e)}))}));var r=t[0].match(d).map((function(t,r){return c(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){l(e,t,n[t])}))}return e}({},e,{outputRange:n[r]}))})),i=(a=t[0],"string"==typeof a&&a.startsWith("rgb"));var a;return function(e){var n=0;return t[0].replace(d,(function(){var t=+r[n++](e),o=i&&n<4?Math.round(t):Math.round(1e3*t)/1e3;return String(o)}))}}(e);var t=e.outputRange;p("outputRange",t);var n=e.inputRange;p("inputRange",n),function(e){o()(e.length>=2,"inputRange must have at least 2 elements");for(var t=1;t<e.length;++t)o()(e[t]>=e[t-1],"inputRange must be monotonically increasing "+e)}(n),o()(n.length===t.length,"inputRange ("+n.length+") and outputRange ("+t.length+") must have the same length");var r=e.easing||u,i="extend";void 0!==e.extrapolateLeft?i=e.extrapolateLeft:void 0!==e.extrapolate&&(i=e.extrapolate);var a="extend";return void 0!==e.extrapolateRight?a=e.extrapolateRight:void 0!==e.extrapolate&&(a=e.extrapolate),function(e){o()("number"==typeof e,"Cannot interpolation an input which is not a number");var s=function(e,t){var n;for(n=1;n<t.length-1&&!(t[n]>=e);++n);return n-1}(e,n);return function(e,t,n,r,i,o,a,s){var l=e;if(l<t){if("identity"===a)return l;"clamp"===a&&(l=t)}if(l>n){if("identity"===s)return l;"clamp"===s&&(l=n)}if(r===i)return r;if(t===n)return e<=t?r:i;t===-1/0?l=-l:n===1/0?l-=t:l=(l-t)/(n-t);l=o(l),r===-1/0?l=-l:i===1/0?l+=r:l=l*(i-r)+r;return l}(e,n[s],n[s+1],t[s],t[s+1],r,i,a)}}function f(e){var t=s()(e);return null===t?e:"rgba("+((4278190080&(t=t||0))>>>24)+", "+((16711680&t)>>>16)+", "+((65280&t)>>>8)+", "+(255&t)/255+")"}var d=/[0-9\.-]+/g;function p(e,t){o()(t.length>=2,e+" must have at least 2 elements"),o()(2!==t.length||t[0]!==-1/0||t[1]!==1/0,e+"cannot be ]-infinity;+infinity[ "+t)}var h=function(e){var t,n;function r(t,n){var r;return(r=e.call(this)||this)._parent=t,r._config=n,r._interpolation=c(n),r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.__makeNative=function(){this._parent.__makeNative(),e.prototype.__makeNative.call(this)},i.__getValue=function(){var e=this._parent.__getValue();return o()("number"==typeof e,"Cannot interpolate an input which is not a number."),this._interpolation(e)},i.interpolate=function(e){return new r(this,e)},i.__attach=function(){this._parent.__addChild(this)},i.__detach=function(){this._parent.__removeChild(this),e.prototype.__detach.call(this)},i.__transformDataType=function(e){return e.map((function(e){return"string"!=typeof e?e:/deg$/.test(e)?(parseFloat(e)||0)*Math.PI/180:parseFloat(e)||0}))},i.__getNativeConfig=function(){return{inputRange:this._config.inputRange,outputRange:this.__transformDataType(this._config.outputRange),extrapolateLeft:this._config.extrapolateLeft||this._config.extrapolate||"extend",extrapolateRight:this._config.extrapolateRight||this._config.extrapolate||"extend",type:"interpolation"}},r}(r.a);h.__createInterpolation=c,t.a=h},function(e,t,n){"use strict";var r=n(82),i=n(7),o=n(41),a=n(12),s={blur:function(){a.a.blur(Object(i.default)(this))},focus:function(){a.a.focus(Object(i.default)(this))},measure:function(e){a.a.measure(Object(i.default)(this),e)},measureInWindow:function(e){a.a.measureInWindow(Object(i.default)(this),e)},measureLayout:function(e,t,n){a.a.measureLayout(Object(i.default)(this),e,n,t)},setNativeProps:function(e){if(e){var t=Object(i.default)(this);if(t){var n=Object(r.a)(null,e,(function(e){return o.a.resolveWithNode(e,t)}));a.a.updateView(t,n,this)}}}};t.a=function(e){return Object.keys(s).forEach((function(t){e.prototype[t]||(e.prototype[t]=s[t])})),e}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(71),i=n(55),o={backgroundColor:!0,borderColor:!0,borderTopColor:!0,borderRightColor:!0,borderBottomColor:!0,borderLeftColor:!0,color:!0,shadowColor:!0,textDecorationColor:!0,textShadowColor:!0};function a(e,t){var n=e;return null!=t&&r.a[t]||"number"!=typeof e?null!=t&&o[t]&&(n=Object(i.a)(e)):n=e+"px",n}},function(e,t,n){"use strict";n.r(t);var r=n(10),i=n(6),o=n(7),a=n(2),s=n.n(a),l=i.a.shouldUseNativeDriver;function u(e,t,n){var a=[];s()(n[0]&&n[0].nativeEvent,"Native driven events only support animated values contained inside `nativeEvent`."),function e(t,n){if(t instanceof r.a)t.__makeNative(),a.push({nativeEventPath:n,animatedValueTag:t.__getNativeTag()});else if("object"==typeof t)for(var i in t)e(t[i],n.concat(i))}(n[0].nativeEvent,[]);var l=Object(o.default)(e);return a.forEach((function(e){i.a.API.addAnimatedEventToView(l,t,e)})),{detach:function(){a.forEach((function(e){i.a.API.removeAnimatedEventFromView(l,t,e.animatedValueTag)}))}}}var c=function(){function e(e,t){void 0===t&&(t={}),this._listeners=[],this._argMapping=e,t.listener&&this.__addListener(t.listener),this._callListeners=this._callListeners.bind(this),this._attachedEvent=null,this.__isNative=l(t)}var t=e.prototype;return t.__addListener=function(e){this._listeners.push(e)},t.__removeListener=function(e){this._listeners=this._listeners.filter((function(t){return t!==e}))},t.__attach=function(e,t){s()(this.__isNative,"Only native driven events need to be attached."),this._attachedEvent=u(e,t,this._argMapping)},t.__detach=function(e,t){s()(this.__isNative,"Only native driven events need to be detached."),this._attachedEvent&&this._attachedEvent.detach()},t.__getHandler=function(){var e=this;return this.__isNative?this._callListeners:function(){for(var t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];var o=function e(t,n,i){if("number"==typeof n&&t instanceof r.a)t.setValue(n);else if("object"==typeof t)for(var o in t)e(t[o],n[o],o)};e.__isNative||e._argMapping.forEach((function(e,t){o(e,n[t],"arg"+t)})),e._callListeners.apply(e,n)}},t._callListeners=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._listeners.forEach((function(e){return e.apply(void 0,t)}))},t._validateMapping=function(){},e}(),f=n(25),d=n(14);var p=function(e){var t,n;function i(t,n){var i;return(i=e.call(this)||this)._a="number"==typeof t?new r.a(t):t,i._b="number"==typeof n?new r.a(n):n,i}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=i.prototype;return o.__makeNative=function(){this._a.__makeNative(),this._b.__makeNative(),e.prototype.__makeNative.call(this)},o.__getValue=function(){return this._a.__getValue()+this._b.__getValue()},o.interpolate=function(e){return new f.a(this,e)},o.__attach=function(){this._a.__addChild(this),this._b.__addChild(this)},o.__detach=function(){this._a.__removeChild(this),this._b.__removeChild(this),e.prototype.__detach.call(this)},o.__getNativeConfig=function(){return{type:"addition",input:[this._a.__getNativeTag(),this._b.__getNativeTag()]}},i}(d.a);var h=function(e){var t,n;function r(t,n,r){var i;return(i=e.call(this)||this)._a=t,i._min=n,i._max=r,i._value=i._lastValue=i._a.__getValue(),i}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.__makeNative=function(){this._a.__makeNative(),e.prototype.__makeNative.call(this)},i.interpolate=function(e){return new f.a(this,e)},i.__getValue=function(){var e=this._a.__getValue(),t=e-this._lastValue;return this._lastValue=e,this._value=Math.min(Math.max(this._value+t,this._min),this._max),this._value},i.__attach=function(){this._a.__addChild(this)},i.__detach=function(){this._a.__removeChild(this),e.prototype.__detach.call(this)},i.__getNativeConfig=function(){return{type:"diffclamp",input:this._a.__getNativeTag(),min:this._min,max:this._max}},r}(d.a);var v=function(e){var t,n;function i(t,n){var i;return(i=e.call(this)||this)._a="number"==typeof t?new r.a(t):t,i._b="number"==typeof n?new r.a(n):n,i}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=i.prototype;return o.__makeNative=function(){this._a.__makeNative(),this._b.__makeNative(),e.prototype.__makeNative.call(this)},o.__getValue=function(){var e=this._a.__getValue(),t=this._b.__getValue();return 0===t&&console.error("Detected division by zero in AnimatedDivision"),e/t},o.interpolate=function(e){return new f.a(this,e)},o.__attach=function(){this._a.__addChild(this),this._b.__addChild(this)},o.__detach=function(){this._a.__removeChild(this),this._b.__removeChild(this),e.prototype.__detach.call(this)},o.__getNativeConfig=function(){return{type:"division",input:[this._a.__getNativeTag(),this._b.__getNativeTag()]}},i}(d.a);var m=function(e){var t,n;function r(t,n){var r;return(r=e.call(this)||this)._a=t,r._modulus=n,r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.__makeNative=function(){this._a.__makeNative(),e.prototype.__makeNative.call(this)},i.__getValue=function(){return(this._a.__getValue()%this._modulus+this._modulus)%this._modulus},i.interpolate=function(e){return new f.a(this,e)},i.__attach=function(){this._a.__addChild(this)},i.__detach=function(){this._a.__removeChild(this),e.prototype.__detach.call(this)},i.__getNativeConfig=function(){return{type:"modulus",input:this._a.__getNativeTag(),modulus:this._modulus}},r}(d.a);var y=function(e){var t,n;function i(t,n){var i;return(i=e.call(this)||this)._a="number"==typeof t?new r.a(t):t,i._b="number"==typeof n?new r.a(n):n,i}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=i.prototype;return o.__makeNative=function(){this._a.__makeNative(),this._b.__makeNative(),e.prototype.__makeNative.call(this)},o.__getValue=function(){return this._a.__getValue()*this._b.__getValue()},o.interpolate=function(e){return new f.a(this,e)},o.__attach=function(){this._a.__addChild(this),this._b.__addChild(this)},o.__detach=function(){this._a.__removeChild(this),this._b.__removeChild(this),e.prototype.__detach.call(this)},o.__getNativeConfig=function(){return{type:"multiplication",input:[this._a.__getNativeTag(),this._b.__getNativeTag()]}},i}(d.a),g=n(5);var b=function(e){var t,n;function r(t){var n;return(n=e.call(this)||this)._transforms=t,n}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.__makeNative=function(){e.prototype.__makeNative.call(this),this._transforms.forEach((function(e){for(var t in e){var n=e[t];n instanceof g.a&&n.__makeNative()}}))},o.__getValue=function(){return this._transforms.map((function(e){var t={};for(var n in e){var r=e[n];r instanceof g.a?t[n]=r.__getValue():t[n]=r}return t}))},o.__getAnimatedValue=function(){return this._transforms.map((function(e){var t={};for(var n in e){var r=e[n];r instanceof g.a?t[n]=r.__getAnimatedValue():t[n]=r}return t}))},o.__attach=function(){var e=this;this._transforms.forEach((function(t){for(var n in t){var r=t[n];r instanceof g.a&&r.__addChild(e)}}))},o.__detach=function(){var t=this;this._transforms.forEach((function(e){for(var n in e){var r=e[n];r instanceof g.a&&r.__removeChild(t)}})),e.prototype.__detach.call(this)},o.__getNativeConfig=function(){var e=[];return this._transforms.forEach((function(t){for(var n in t){var r=t[n];r instanceof g.a?e.push({type:"animated",property:n,nodeTag:r.__getNativeTag()}):e.push({type:"static",property:n,value:r})}})),i.a.validateTransform(e),{type:"transform",transforms:e}},r}(d.a);function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var w=n(4).default.flatten,S=function(e){var t,n;function r(t){var n;return n=e.call(this)||this,(t=w(t)||{}).transform&&(t=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){_(e,t,n[t])}))}return e}({},t,{transform:new b(t.transform)})),n._style=t,n}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o._walkStyleAndGetValues=function(e){var t={};for(var n in e){var r=e[n];r instanceof g.a?r.__isNative||(t[n]=r.__getValue()):r&&!Array.isArray(r)&&"object"==typeof r?t[n]=this._walkStyleAndGetValues(r):t[n]=r}return t},o.__getValue=function(){return this._walkStyleAndGetValues(this._style)},o._walkStyleAndGetAnimatedValues=function(e){var t={};for(var n in e){var r=e[n];r instanceof g.a?t[n]=r.__getAnimatedValue():r&&!Array.isArray(r)&&"object"==typeof r&&(t[n]=this._walkStyleAndGetAnimatedValues(r))}return t},o.__getAnimatedValue=function(){return this._walkStyleAndGetAnimatedValues(this._style)},o.__attach=function(){for(var e in this._style){var t=this._style[e];t instanceof g.a&&t.__addChild(this)}},o.__detach=function(){for(var t in this._style){var n=this._style[t];n instanceof g.a&&n.__removeChild(this)}e.prototype.__detach.call(this)},o.__makeNative=function(){for(var t in e.prototype.__makeNative.call(this),this._style){var n=this._style[t];n instanceof g.a&&n.__makeNative()}},o.__getNativeConfig=function(){var e={};for(var t in this._style)this._style[t]instanceof g.a&&(e[t]=this._style[t].__getNativeTag());return i.a.validateStyles(e),{type:"style",style:e}},r}(d.a);function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var E=function(e){var t,n;function r(t,n){var r;return r=e.call(this)||this,t.style&&(t=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){O(e,t,n[t])}))}return e}({},t,{style:new S(t.style)})),r._props=t,r._callback=n,r.__attach(),r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var a=r.prototype;return a.__getValue=function(){var e={};for(var t in this._props){var n=this._props[t];n instanceof g.a?(!n.__isNative||n instanceof S)&&(e[t]=n.__getValue()):e[t]=n instanceof c?n.__getHandler():n}return e},a.__getAnimatedValue=function(){var e={};for(var t in this._props){var n=this._props[t];n instanceof g.a&&(e[t]=n.__getAnimatedValue())}return e},a.__attach=function(){for(var e in this._props){var t=this._props[e];t instanceof g.a&&t.__addChild(this)}},a.__detach=function(){for(var t in this.__isNative&&this._animatedView&&this.__disconnectAnimatedView(),this._props){var n=this._props[t];n instanceof g.a&&n.__removeChild(this)}e.prototype.__detach.call(this)},a.update=function(){this._callback()},a.__makeNative=function(){if(!this.__isNative){for(var e in this.__isNative=!0,this._props){var t=this._props[e];t instanceof g.a&&t.__makeNative()}this._animatedView&&this.__connectAnimatedView()}},a.setNativeView=function(e){this._animatedView!==e&&(this._animatedView=e,this.__isNative&&this.__connectAnimatedView())},a.__connectAnimatedView=function(){s()(this.__isNative,'Expected node to be marked as "native"');var e=Object(o.default)(this._animatedView);s()(null!=e,"Unable to locate attached view in the native tree"),i.a.API.connectAnimatedNodeToView(this.__getNativeTag(),e)},a.__disconnectAnimatedView=function(){s()(this.__isNative,'Expected node to be marked as "native"');var e=Object(o.default)(this._animatedView);s()(null!=e,"Unable to locate attached view in the native tree"),i.a.API.disconnectAnimatedNodeFromView(this.__getNativeTag(),e)},a.__getNativeConfig=function(){var e={};for(var t in this._props){var n=this._props[t];n instanceof g.a&&(e[t]=n.__getNativeTag())}return{type:"props",props:e}},r}(g.a);function T(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){k(e,t,n[t])}))}return e}function k(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var x=function(e){var t,n;function r(t,n,r,o,a){var s;return(s=e.call(this)||this)._value=t,s._parent=n,s._animationClass=r,s._animationConfig=o,s._useNativeDriver=Object(i.c)(o),s._callback=a,s.__attach(),s}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.__makeNative=function(){this.__isNative=!0,this._parent.__makeNative(),e.prototype.__makeNative.call(this),this._value.__makeNative()},o.__getValue=function(){return this._parent.__getValue()},o.__attach=function(){this._parent.__addChild(this),this._useNativeDriver&&this.__makeNative()},o.__detach=function(){this._parent.__removeChild(this),e.prototype.__detach.call(this)},o.update=function(){this._value.animate(new this._animationClass(T({},this._animationConfig,{toValue:this._animationConfig.toValue.__getValue()})),this._callback)},o.__getNativeConfig=function(){var e=new this._animationClass(T({},this._animationConfig,{toValue:void 0})).__getNativeAnimationConfig();return{type:"tracking",animationId:Object(i.b)(),animationConfig:e,toValue:this._parent.__getNativeTag(),value:this._value.__getNativeTag()}},r}(g.a),P=n(67),C=n(180),N=n(111),R=n(113),A=n(1),I=n.n(A);function j(){return(j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function M(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var D=function(e){s()("string"==typeof e||e.prototype&&e.prototype.isReactComponent,"`createAnimatedComponent` does not support stateless functional components; use a class component instead.");var t=function(t){var n,r;function i(e){var n;return(n=t.call(this,e)||this)._invokeAnimatedPropsCallbackOnMount=!1,n._eventDetachers=[],n._animatedPropsCallback=function(){if(null==n._component)n._invokeAnimatedPropsCallbackOnMount=!0;else if(i.__skipSetNativeProps_FOR_TESTS_ONLY||"function"!=typeof n._component.setNativeProps)n.forceUpdate();else{if(n._propsAnimated.__isNative)throw new Error('Attempting to run JS driven animation on animated node that has been moved to "native" earlier by starting an animation with `useNativeDriver: true`');n._component.setNativeProps(n._propsAnimated.__getAnimatedValue())}},n._setComponentRef=n._setComponentRef.bind(M(M(n))),n}r=t,(n=i).prototype=Object.create(r.prototype),n.prototype.constructor=n,n.__proto__=r;var o=i.prototype;return o.componentWillUnmount=function(){this._propsAnimated&&this._propsAnimated.__detach(),this._detachNativeEvents()},o.setNativeProps=function(e){this._component.setNativeProps(e)},o.UNSAFE_componentWillMount=function(){this._attachProps(this.props)},o.componentDidMount=function(){this._invokeAnimatedPropsCallbackOnMount&&(this._invokeAnimatedPropsCallbackOnMount=!1,this._animatedPropsCallback()),this._propsAnimated.setNativeView(this._component),this._attachNativeEvents()},o._attachNativeEvents=function(){var e=this,t=this._component.getScrollableNode?this._component.getScrollableNode():this._component,n=function(n){var r=e.props[n];r instanceof c&&r.__isNative&&(r.__attach(t,n),e._eventDetachers.push((function(){return r.__detach(t,n)})))};for(var r in this.props)n(r)},o._detachNativeEvents=function(){this._eventDetachers.forEach((function(e){return e()})),this._eventDetachers=[]},o._attachProps=function(e){var t=this._propsAnimated;this._propsAnimated=new E(e,this._animatedPropsCallback),t&&t.__detach()},o.UNSAFE_componentWillReceiveProps=function(e){this._attachProps(e)},o.componentDidUpdate=function(e){this._component!==this._prevComponent&&this._propsAnimated.setNativeView(this._component),this._component===this._prevComponent&&e===this.props||(this._detachNativeEvents(),this._attachNativeEvents())},o.render=function(){var t=this._propsAnimated.__getValue();return I.a.createElement(e,j({},t,{ref:this._setComponentRef,collapsable:!this._propsAnimated.__isNative&&t.collapsable}))},o._setComponentRef=function(e){this._prevComponent=this._component,this._component=e},o.getNode=function(){return this._component},i}(I.a.Component);return t.__skipSetNativeProps_FOR_TESTS_ONLY=!1,e.propTypes,t.propTypes={},t};function L(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){F(e,t,n[t])}))}return e}function F(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var V=function(e,t){return e&&t.onComplete?function(){t.onComplete&&t.onComplete.apply(t,arguments),e&&e.apply(void 0,arguments)}:e||t.onComplete},H=function(e,t,n){if(e instanceof P.a){var r=L({},t),i=L({},t);for(var o in t){var a=t[o],s=a.x,l=a.y;void 0!==s&&void 0!==l&&(r[o]=s,i[o]=l)}var u=n(e.x,r),c=n(e.y,i);return G([u,c],{stopTogether:!1})}return null},B=function e(t,n){var r=function(e,t,n){n=V(n,t);var r=e,i=t;r.stopTracking(),t.toValue instanceof g.a?r.track(new x(r,t.toValue,R.a,i,n)):r.animate(new R.a(i),n)};return H(t,n,e)||{start:function(e){r(t,n,e)},stop:function(){t.stopAnimation()},reset:function(){t.resetAnimation()},_startNativeLoop:function(e){var i=L({},n,{iterations:e});r(t,i)},_isUsingNativeDriver:function(){return n.useNativeDriver||!1}}},U=function(e){var t=0;return{start:function(n){0===e.length?n&&n({finished:!0}):e[t].start((function r(i){i.finished&&++t!==e.length?e[t].start(r):n&&n(i)}))},stop:function(){t<e.length&&e[t].stop()},reset:function(){e.forEach((function(e,n){n<=t&&e.reset()})),t=0},_startNativeLoop:function(){throw new Error("Loops run using the native driver cannot contain Animated.sequence animations")},_isUsingNativeDriver:function(){return!1}}},G=function(e,t){var n=0,r={},i=!(t&&!1===t.stopTogether),o={start:function(t){n!==e.length?e.forEach((function(a,s){var l=function(a){if(r[s]=!0,++n===e.length)return n=0,void(t&&t(a));!a.finished&&i&&o.stop()};a?a.start(l):l({finished:!0})})):t&&t({finished:!0})},stop:function(){e.forEach((function(e,t){!r[t]&&e.stop(),r[t]=!0}))},reset:function(){e.forEach((function(e,t){e.reset(),r[t]=!1,n=0}))},_startNativeLoop:function(){throw new Error("Loops run using the native driver cannot contain Animated.parallel animations")},_isUsingNativeDriver:function(){return!1}};return o},z=function(e){return B(new r.a(0),{toValue:0,delay:e,duration:0})};var W={Value:r.a,ValueXY:P.a,Interpolation:f.a,Node:g.a,decay:function e(t,n){var r=function(e,t,n){n=V(n,t);var r=e,i=t;r.stopTracking(),r.animate(new C.a(i),n)};return H(t,n,e)||{start:function(e){r(t,n,e)},stop:function(){t.stopAnimation()},reset:function(){t.resetAnimation()},_startNativeLoop:function(e){var i=L({},n,{iterations:e});r(t,i)},_isUsingNativeDriver:function(){return n.useNativeDriver||!1}}},timing:B,spring:function e(t,n){var r=function(e,t,n){n=V(n,t);var r=e,i=t;r.stopTracking(),t.toValue instanceof g.a?r.track(new x(r,t.toValue,N.a,i,n)):r.animate(new N.a(i),n)};return H(t,n,e)||{start:function(e){r(t,n,e)},stop:function(){t.stopAnimation()},reset:function(){t.resetAnimation()},_startNativeLoop:function(e){var i=L({},n,{iterations:e});r(t,i)},_isUsingNativeDriver:function(){return n.useNativeDriver||!1}}},add:function(e,t){return new p(e,t)},divide:function(e,t){return new v(e,t)},multiply:function(e,t){return new y(e,t)},modulo:function(e,t){return new m(e,t)},diffClamp:function(e,t,n){return new h(e,t,n)},delay:z,sequence:U,parallel:G,stagger:function(e,t){return G(t.map((function(t,n){return U([z(e*n),t])})))},loop:function(e,t){var n=(void 0===t?{}:t).iterations,r=void 0===n?-1:n,i=!1,o=0;return{start:function(t){e&&0!==r?e._isUsingNativeDriver()?e._startNativeLoop(r):function n(a){void 0===a&&(a={finished:!0}),i||o===r||!1===a.finished?t&&t(a):(o++,e.reset(),e.start(n))}():t&&t({finished:!0})},stop:function(){i=!0,e.stop()},reset:function(){o=0,i=!1,e.reset()},_startNativeLoop:function(){throw new Error("Loops run using the native driver cannot contain Animated.loop animations")},_isUsingNativeDriver:function(){return e._isUsingNativeDriver()}}},event:function(e,t){var n=new c(e,t);return n.__isNative?n:n.__getHandler()},createAnimatedComponent:D,attachNativeEvent:u,forkEvent:function(e,t){return e?e instanceof c?(e.__addListener(t),e):function(){"function"==typeof e&&e.apply(void 0,arguments),t.apply(void 0,arguments)}:t},unforkEvent:function(e,t){e&&e instanceof c&&e.__removeListener(t)},__PropsOnlyForTests:E},X=n(64),Y=n(38),K=n(23),q=n(3);function $(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Q=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){$(e,t,n[t])}))}return e}({},W,{Image:W.createAnimatedComponent(X.default),ScrollView:W.createAnimatedComponent(Y.default),View:W.createAnimatedComponent(q.default),Text:W.createAnimatedComponent(K.default)});t.default=Q},function(e,t,n){"use strict";var r=n(3),i=n(1),o=n.n(i);var a=function(e){var t,n;function i(){return e.apply(this,arguments)||this}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var a=i.prototype;return a.setNativeProps=function(){},a.render=function(){return o.a.createElement(r.default,{style:[s,this.props.style]},this.props.children)},i}(i.Component),s={};t.a=a},function(e,t,n){"use strict";var r=n(12),i={_currentlyFocusedNode:null,currentlyFocusedField:function(){return document.activeElement!==this._currentlyFocusedNode&&(this._currentlyFocusedNode=null),this._currentlyFocusedNode},focusTextInput:function(e){null!==e&&(this._currentlyFocusedNode=e,document.activeElement!==e&&r.a.focus(e))},blurTextInput:function(e){null!==e&&(this._currentlyFocusedNode=null,document.activeElement===e&&r.a.blur(e))}};t.a=i},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){"use strict";var r=n(36),i=n(82),o=n(70),a=n.n(o),s=n(42),l=[],u=function(){},c=function(e){return e?Array.prototype.slice.call(e).map((function(e){var t,n=e.identifier>20?e.identifier%20:e.identifier;return{_normalized:!0,clientX:e.clientX,clientY:e.clientY,force:e.force,get locationX(){if(t=t||Object(s.a)(e.target))return e.pageX-t.left},get locationY(){if(t=t||Object(s.a)(e.target))return e.pageY-t.top},identifier:n,pageX:e.pageX,pageY:e.pageY,radiusX:e.radiusX,radiusY:e.radiusY,rotationAngle:e.rotationAngle,screenX:e.screenX,screenY:e.screenY,target:e.target,timestamp:Date.now()}})):l};var f=function(e){return!e||e._normalized?e:(e.type||"").indexOf("mouse")>=0?function(e){var t,n=[{_normalized:!0,clientX:e.clientX,clientY:e.clientY,force:e.force,identifier:0,get locationX(){if(t=t||Object(s.a)(e.target))return e.pageX-t.left},get locationY(){if(t=t||Object(s.a)(e.target))return e.pageY-t.top},pageX:e.pageX,pageY:e.pageY,screenX:e.screenX,screenY:e.screenY,target:e.target,timestamp:Date.now()}],r="function"==typeof e.preventDefault?e.preventDefault.bind(e):u,i="function"==typeof e.stopImmediatePropagation?e.stopImmediatePropagation.bind(e):u,o="function"==typeof e.stopPropagation?e.stopPropagation.bind(e):u;return{_normalized:!0,bubbles:e.bubbles,cancelable:e.cancelable,changedTouches:n,defaultPrevented:e.defaultPrevented,identifier:n[0].identifier,get locationX(){return n[0].locationX},get locationY(){return n[0].locationY},pageX:e.pageX,pageY:e.pageY,preventDefault:r,stopImmediatePropagation:i,stopPropagation:o,target:e.target,timestamp:n[0].timestamp,touches:"mouseup"===e.type?l:n,type:e.type,which:e.which}}(e):function(e){var t=c(e.changedTouches),n=c(e.touches),r="function"==typeof e.preventDefault?e.preventDefault.bind(e):u,i="function"==typeof e.stopImmediatePropagation?e.stopImmediatePropagation.bind(e):u,o="function"==typeof e.stopPropagation?e.stopPropagation.bind(e):u,a=t[0];return{_normalized:!0,bubbles:e.bubbles,cancelable:e.cancelable,changedTouches:t,defaultPrevented:e.defaultPrevented,identifier:a?a.identifier:void 0,get locationX(){return a?a.locationX:void 0},get locationY(){return a?a.locationY:void 0},pageX:a?a.pageX:e.pageX,pageY:a?a.pageY:e.pageY,preventDefault:r,stopImmediatePropagation:i,stopPropagation:o,target:e.target,timestamp:Date.now(),touches:n,type:e.type,which:e.which}}(e)},d=n(1),p=n.n(d),h=a.a.ResponderEventPlugin,v=a.a.ResponderTouchHistoryStore;if(!h.eventTypes.responderMove.dependencies){var m=["topTouchCancel","topTouchEnd","topMouseUp"],y=["topTouchMove","topMouseMove"],g=["topTouchStart","topMouseDown"];h.eventTypes.responderMove.dependencies=y,h.eventTypes.responderEnd.dependencies=m,h.eventTypes.responderStart.dependencies=g,h.eventTypes.responderRelease.dependencies=m,h.eventTypes.responderTerminationRequest.dependencies=[],h.eventTypes.responderGrant.dependencies=[],h.eventTypes.responderReject.dependencies=[],h.eventTypes.responderTerminate.dependencies=[],h.eventTypes.moveShouldSetResponder.dependencies=y,h.eventTypes.selectionChangeShouldSetResponder.dependencies=["topSelectionChange"],h.eventTypes.scrollShouldSetResponder.dependencies=["topScroll"],h.eventTypes.startShouldSetResponder.dependencies=g}var b=null,_=h.extractEvents;h.extractEvents=function(e,t,n,r){var i=v.touchHistory.numberActiveTouches>0,o=n.type,a=!1;if(o.indexOf("touch")>-1)b=Date.now();else if(b&&o.indexOf("mouse")>-1){a=Date.now()-b<1e3}if(("mousemove"!==o&&"mouseup"!==o||i)&&1!==n.button&&2!==n.button&&!a){var s=f(n);return _.call(h,e,t,s,r)}};var w=h;Object(o.injectEventPluginsByName)({ResponderEventPlugin:w});var S={onBlur:!0,onClick:!0,onClickCapture:!0,onContextMenu:!0,onFocus:!0,onResponderRelease:!0,onTouchCancel:!0,onTouchCancelCapture:!0,onTouchEnd:!0,onTouchEndCapture:!0,onTouchMove:!0,onTouchMoveCapture:!0,onTouchStart:!0,onTouchStartCapture:!0},O=function(e){var t=e.onClick,n=e.onResponderRelease,i=e.role,o=r.a.buttonLikeRoles[i],a=r.a.isDisabled(e),s="link"===i;Object.keys(e).forEach((function(t){var n=e[t];"function"==typeof n&&S[t]&&(e[t]=o&&a?void 0:function(e){return e.nativeEvent=f(e.nativeEvent),n(e)})})),s&&n&&(e.onClick=function(t){var n;t.isDefaultPrevented()||((n=t.nativeEvent).metaKey||n.altKey||n.ctrlKey||n.shiftKey)||e.target||t.preventDefault()}),o&&!a&&(e.onKeyPress=function(e){e.isDefaultPrevented()||13!==e.which&&32!==e.which||(e.preventDefault(),t&&t(e))})};t.a=function(e,t){var n;e&&e.constructor===String&&(n=r.a.propsToAccessibilityComponent(t));var o=n||e,a=Object(i.a)(o,t);O(a);for(var s=arguments.length,l=new Array(s>2?s-2:0),u=2;u<s;u++)l[u-2]=arguments[u];return p.a.createElement.apply(p.a,[o,a].concat(l))}},function(e,t,n){(function(t){var n=function(){};"production"!==t.env&&(n=function(e){if(void 0===e)throw new Error("invariant requires an error message argument")}),e.exports=function(e,t,r,i,o,a,s,l){if(n(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[r,i,o,a,s,l],f=0;(u=new Error(t.replace(/%s/g,(function(){return c[f++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}}).call(this,n(88))},function(e,t,n){"use strict";var r=n(106);e.exports=r},function(e,t,n){"use strict";var r=n(41),i={create:function(e,t){return r.a.createCSS(e,t)}};t.a=i},function(e,t,n){"use strict";var r={button:"button",none:"presentation"},i={adjustable:"slider",button:"button",header:"heading",image:"img",link:"link",none:"presentation",search:"search",summary:"region"},o={adjustable:"slider",button:"button",header:"heading",image:"img",imagebutton:null,keyboardkey:null,label:null,link:"link",none:"presentation",search:"search",summary:"region",text:null},a=function(e){var t=e.accessibilityComponentType,n=e.accessibilityRole,a=e.accessibilityTraits;if(n){var s=o[n];if(null!==s)return s||n}if(a){var l=Array.isArray(a)?a[0]:a;return i[l]}if(t)return r[t]},s={article:"article",banner:"header",complementary:"aside",contentinfo:"footer",form:"form",link:"a",list:"ul",listitem:"li",main:"main",navigation:"nav",region:"section"},l={},u={buttonLikeRoles:{button:!0,menuitem:!0},isDisabled:function(e){return e.disabled||Array.isArray(e.accessibilityStates)&&e.accessibilityStates.indexOf("disabled")>-1},propsToAccessibilityComponent:function(e){if(void 0===e&&(e=l),"label"===e.accessibilityRole)return"label";var t=a(e);return t?"heading"===t?"h"+(e["aria-level"]||1):s[t]:void 0},propsToAriaRole:a};t.a=u},function(e,t,n){var r;
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */!function(i,o,a,s){"use strict";var l,u=["","webkit","Moz","MS","ms","o"],c=o.createElement("div"),f=Math.round,d=Math.abs,p=Date.now;function h(e,t,n){return setTimeout(w(e,n),t)}function v(e,t,n){return!!Array.isArray(e)&&(m(e,n[t],n),!0)}function m(e,t,n){var r;if(e)if(e.forEach)e.forEach(t,n);else if(void 0!==e.length)for(r=0;r<e.length;)t.call(n,e[r],r,e),r++;else for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e)}function y(e,t,n){var r="DEPRECATED METHOD: "+t+"\n"+n+" AT \n";return function(){var t=new Error("get-stack-trace"),n=t&&t.stack?t.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=i.console&&(i.console.warn||i.console.log);return o&&o.call(i.console,r,n),e.apply(this,arguments)}}l="function"!=typeof Object.assign?function(e){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var r=arguments[n];if(null!=r)for(var i in r)r.hasOwnProperty(i)&&(t[i]=r[i])}return t}:Object.assign;var g=y((function(e,t,n){for(var r=Object.keys(t),i=0;i<r.length;)(!n||n&&void 0===e[r[i]])&&(e[r[i]]=t[r[i]]),i++;return e}),"extend","Use `assign`."),b=y((function(e,t){return g(e,t,!0)}),"merge","Use `assign`.");function _(e,t,n){var r,i=t.prototype;(r=e.prototype=Object.create(i)).constructor=e,r._super=i,n&&l(r,n)}function w(e,t){return function(){return e.apply(t,arguments)}}function S(e,t){return"function"==typeof e?e.apply(t&&t[0]||void 0,t):e}function O(e,t){return void 0===e?t:e}function E(e,t,n){m(P(t),(function(t){e.addEventListener(t,n,!1)}))}function T(e,t,n){m(P(t),(function(t){e.removeEventListener(t,n,!1)}))}function k(e,t){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function x(e,t){return e.indexOf(t)>-1}function P(e){return e.trim().split(/\s+/g)}function C(e,t,n){if(e.indexOf&&!n)return e.indexOf(t);for(var r=0;r<e.length;){if(n&&e[r][n]==t||!n&&e[r]===t)return r;r++}return-1}function N(e){return Array.prototype.slice.call(e,0)}function R(e,t,n){for(var r=[],i=[],o=0;o<e.length;){var a=t?e[o][t]:e[o];C(i,a)<0&&r.push(e[o]),i[o]=a,o++}return n&&(r=t?r.sort((function(e,n){return e[t]>n[t]})):r.sort()),r}function A(e,t){for(var n,r,i=t[0].toUpperCase()+t.slice(1),o=0;o<u.length;){if((r=(n=u[o])?n+i:t)in e)return r;o++}}var I=1;function j(e){var t=e.ownerDocument||e;return t.defaultView||t.parentWindow||i}var M="ontouchstart"in i,D=void 0!==A(i,"PointerEvent"),L=M&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),F=["x","y"],V=["clientX","clientY"];function H(e,t){var n=this;this.manager=e,this.callback=t,this.element=e.element,this.target=e.options.inputTarget,this.domHandler=function(t){S(e.options.enable,[e])&&n.handler(t)},this.init()}function B(e,t,n){var r=n.pointers.length,i=n.changedPointers.length,o=1&t&&r-i==0,a=12&t&&r-i==0;n.isFirst=!!o,n.isFinal=!!a,o&&(e.session={}),n.eventType=t,function(e,t){var n=e.session,r=t.pointers,i=r.length;n.firstInput||(n.firstInput=U(t));i>1&&!n.firstMultiple?n.firstMultiple=U(t):1===i&&(n.firstMultiple=!1);var o=n.firstInput,a=n.firstMultiple,s=a?a.center:o.center,l=t.center=G(r);t.timeStamp=p(),t.deltaTime=t.timeStamp-o.timeStamp,t.angle=Y(s,l),t.distance=X(s,l),function(e,t){var n=t.center,r=e.offsetDelta||{},i=e.prevDelta||{},o=e.prevInput||{};1!==t.eventType&&4!==o.eventType||(i=e.prevDelta={x:o.deltaX||0,y:o.deltaY||0},r=e.offsetDelta={x:n.x,y:n.y});t.deltaX=i.x+(n.x-r.x),t.deltaY=i.y+(n.y-r.y)}(n,t),t.offsetDirection=W(t.deltaX,t.deltaY);var u=z(t.deltaTime,t.deltaX,t.deltaY);t.overallVelocityX=u.x,t.overallVelocityY=u.y,t.overallVelocity=d(u.x)>d(u.y)?u.x:u.y,t.scale=a?(c=a.pointers,f=r,X(f[0],f[1],V)/X(c[0],c[1],V)):1,t.rotation=a?function(e,t){return Y(t[1],t[0],V)+Y(e[1],e[0],V)}(a.pointers,r):0,t.maxPointers=n.prevInput?t.pointers.length>n.prevInput.maxPointers?t.pointers.length:n.prevInput.maxPointers:t.pointers.length,function(e,t){var n,r,i,o,a=e.lastInterval||t,s=t.timeStamp-a.timeStamp;if(8!=t.eventType&&(s>25||void 0===a.velocity)){var l=t.deltaX-a.deltaX,u=t.deltaY-a.deltaY,c=z(s,l,u);r=c.x,i=c.y,n=d(c.x)>d(c.y)?c.x:c.y,o=W(l,u),e.lastInterval=t}else n=a.velocity,r=a.velocityX,i=a.velocityY,o=a.direction;t.velocity=n,t.velocityX=r,t.velocityY=i,t.direction=o}(n,t);var c,f;var h=e.element;k(t.srcEvent.target,h)&&(h=t.srcEvent.target);t.target=h}(e,n),e.emit("hammer.input",n),e.recognize(n),e.session.prevInput=n}function U(e){for(var t=[],n=0;n<e.pointers.length;)t[n]={clientX:f(e.pointers[n].clientX),clientY:f(e.pointers[n].clientY)},n++;return{timeStamp:p(),pointers:t,center:G(t),deltaX:e.deltaX,deltaY:e.deltaY}}function G(e){var t=e.length;if(1===t)return{x:f(e[0].clientX),y:f(e[0].clientY)};for(var n=0,r=0,i=0;i<t;)n+=e[i].clientX,r+=e[i].clientY,i++;return{x:f(n/t),y:f(r/t)}}function z(e,t,n){return{x:t/e||0,y:n/e||0}}function W(e,t){return e===t?1:d(e)>=d(t)?e<0?2:4:t<0?8:16}function X(e,t,n){n||(n=F);var r=t[n[0]]-e[n[0]],i=t[n[1]]-e[n[1]];return Math.sqrt(r*r+i*i)}function Y(e,t,n){n||(n=F);var r=t[n[0]]-e[n[0]],i=t[n[1]]-e[n[1]];return 180*Math.atan2(i,r)/Math.PI}H.prototype={handler:function(){},init:function(){this.evEl&&E(this.element,this.evEl,this.domHandler),this.evTarget&&E(this.target,this.evTarget,this.domHandler),this.evWin&&E(j(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&T(this.element,this.evEl,this.domHandler),this.evTarget&&T(this.target,this.evTarget,this.domHandler),this.evWin&&T(j(this.element),this.evWin,this.domHandler)}};var K={mousedown:1,mousemove:2,mouseup:4};function q(){this.evEl="mousedown",this.evWin="mousemove mouseup",this.pressed=!1,H.apply(this,arguments)}_(q,H,{handler:function(e){var t=K[e.type];1&t&&0===e.button&&(this.pressed=!0),2&t&&1!==e.which&&(t=4),this.pressed&&(4&t&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[e],changedPointers:[e],pointerType:"mouse",srcEvent:e}))}});var $={pointerdown:1,pointermove:2,pointerup:4,pointercancel:8,pointerout:8},Q={2:"touch",3:"pen",4:"mouse",5:"kinect"},J="pointerdown",Z="pointermove pointerup pointercancel";function ee(){this.evEl=J,this.evWin=Z,H.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}i.MSPointerEvent&&!i.PointerEvent&&(J="MSPointerDown",Z="MSPointerMove MSPointerUp MSPointerCancel"),_(ee,H,{handler:function(e){var t=this.store,n=!1,r=e.type.toLowerCase().replace("ms",""),i=$[r],o=Q[e.pointerType]||e.pointerType,a="touch"==o,s=C(t,e.pointerId,"pointerId");1&i&&(0===e.button||a)?s<0&&(t.push(e),s=t.length-1):12&i&&(n=!0),s<0||(t[s]=e,this.callback(this.manager,i,{pointers:t,changedPointers:[e],pointerType:o,srcEvent:e}),n&&t.splice(s,1))}});var te={touchstart:1,touchmove:2,touchend:4,touchcancel:8};function ne(){this.evTarget="touchstart",this.evWin="touchstart touchmove touchend touchcancel",this.started=!1,H.apply(this,arguments)}function re(e,t){var n=N(e.touches),r=N(e.changedTouches);return 12&t&&(n=R(n.concat(r),"identifier",!0)),[n,r]}_(ne,H,{handler:function(e){var t=te[e.type];if(1===t&&(this.started=!0),this.started){var n=re.call(this,e,t);12&t&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:e})}}});var ie={touchstart:1,touchmove:2,touchend:4,touchcancel:8};function oe(){this.evTarget="touchstart touchmove touchend touchcancel",this.targetIds={},H.apply(this,arguments)}function ae(e,t){var n=N(e.touches),r=this.targetIds;if(3&t&&1===n.length)return r[n[0].identifier]=!0,[n,n];var i,o,a=N(e.changedTouches),s=[],l=this.target;if(o=n.filter((function(e){return k(e.target,l)})),1===t)for(i=0;i<o.length;)r[o[i].identifier]=!0,i++;for(i=0;i<a.length;)r[a[i].identifier]&&s.push(a[i]),12&t&&delete r[a[i].identifier],i++;return s.length?[R(o.concat(s),"identifier",!0),s]:void 0}_(oe,H,{handler:function(e){var t=ie[e.type],n=ae.call(this,e,t);n&&this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:e})}});function se(){H.apply(this,arguments);var e=w(this.handler,this);this.touch=new oe(this.manager,e),this.mouse=new q(this.manager,e),this.primaryTouch=null,this.lastTouches=[]}function le(e,t){1&e?(this.primaryTouch=t.changedPointers[0].identifier,ue.call(this,t)):12&e&&ue.call(this,t)}function ue(e){var t=e.changedPointers[0];if(t.identifier===this.primaryTouch){var n={x:t.clientX,y:t.clientY};this.lastTouches.push(n);var r=this.lastTouches;setTimeout((function(){var e=r.indexOf(n);e>-1&&r.splice(e,1)}),2500)}}function ce(e){for(var t=e.srcEvent.clientX,n=e.srcEvent.clientY,r=0;r<this.lastTouches.length;r++){var i=this.lastTouches[r],o=Math.abs(t-i.x),a=Math.abs(n-i.y);if(o<=25&&a<=25)return!0}return!1}_(se,H,{handler:function(e,t,n){var r="touch"==n.pointerType,i="mouse"==n.pointerType;if(!(i&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(r)le.call(this,t,n);else if(i&&ce.call(this,n))return;this.callback(e,t,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var fe=A(c.style,"touchAction"),de=void 0!==fe,pe=function(){if(!de)return!1;var e={},t=i.CSS&&i.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach((function(n){e[n]=!t||i.CSS.supports("touch-action",n)})),e}();function he(e,t){this.manager=e,this.set(t)}he.prototype={set:function(e){"compute"==e&&(e=this.compute()),de&&this.manager.element.style&&pe[e]&&(this.manager.element.style[fe]=e),this.actions=e.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var e=[];return m(this.manager.recognizers,(function(t){S(t.options.enable,[t])&&(e=e.concat(t.getTouchAction()))})),function(e){if(x(e,"none"))return"none";var t=x(e,"pan-x"),n=x(e,"pan-y");if(t&&n)return"none";if(t||n)return t?"pan-x":"pan-y";if(x(e,"manipulation"))return"manipulation";return"auto"}(e.join(" "))},preventDefaults:function(e){var t=e.srcEvent,n=e.offsetDirection;if(this.manager.session.prevented)t.preventDefault();else{var r=this.actions,i=x(r,"none")&&!pe.none,o=x(r,"pan-y")&&!pe["pan-y"],a=x(r,"pan-x")&&!pe["pan-x"];if(i){var s=1===e.pointers.length,l=e.distance<2,u=e.deltaTime<250;if(s&&l&&u)return}if(!a||!o)return i||o&&6&n||a&&24&n?this.preventSrc(t):void 0}},preventSrc:function(e){this.manager.session.prevented=!0,e.preventDefault()}};function ve(e){this.options=l({},this.defaults,e||{}),this.id=I++,this.manager=null,this.options.enable=O(this.options.enable,!0),this.state=1,this.simultaneous={},this.requireFail=[]}function me(e){return 16&e?"cancel":8&e?"end":4&e?"move":2&e?"start":""}function ye(e){return 16==e?"down":8==e?"up":2==e?"left":4==e?"right":""}function ge(e,t){var n=t.manager;return n?n.get(e):e}function be(){ve.apply(this,arguments)}function _e(){be.apply(this,arguments),this.pX=null,this.pY=null}function we(){be.apply(this,arguments)}function Se(){ve.apply(this,arguments),this._timer=null,this._input=null}function Oe(){be.apply(this,arguments)}function Ee(){be.apply(this,arguments)}function Te(){ve.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function ke(e,t){return(t=t||{}).recognizers=O(t.recognizers,ke.defaults.preset),new xe(e,t)}ve.prototype={defaults:{},set:function(e){return l(this.options,e),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(e){if(v(e,"recognizeWith",this))return this;var t=this.simultaneous;return t[(e=ge(e,this)).id]||(t[e.id]=e,e.recognizeWith(this)),this},dropRecognizeWith:function(e){return v(e,"dropRecognizeWith",this)?this:(e=ge(e,this),delete this.simultaneous[e.id],this)},requireFailure:function(e){if(v(e,"requireFailure",this))return this;var t=this.requireFail;return-1===C(t,e=ge(e,this))&&(t.push(e),e.requireFailure(this)),this},dropRequireFailure:function(e){if(v(e,"dropRequireFailure",this))return this;e=ge(e,this);var t=C(this.requireFail,e);return t>-1&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(e){return!!this.simultaneous[e.id]},emit:function(e){var t=this,n=this.state;function r(n){t.manager.emit(n,e)}n<8&&r(t.options.event+me(n)),r(t.options.event),e.additionalEvent&&r(e.additionalEvent),n>=8&&r(t.options.event+me(n))},tryEmit:function(e){if(this.canEmit())return this.emit(e);this.state=32},canEmit:function(){for(var e=0;e<this.requireFail.length;){if(!(33&this.requireFail[e].state))return!1;e++}return!0},recognize:function(e){var t=l({},e);if(!S(this.options.enable,[this,t]))return this.reset(),void(this.state=32);56&this.state&&(this.state=1),this.state=this.process(t),30&this.state&&this.tryEmit(t)},process:function(e){},getTouchAction:function(){},reset:function(){}},_(be,ve,{defaults:{pointers:1},attrTest:function(e){var t=this.options.pointers;return 0===t||e.pointers.length===t},process:function(e){var t=this.state,n=e.eventType,r=6&t,i=this.attrTest(e);return r&&(8&n||!i)?16|t:r||i?4&n?8|t:2&t?4|t:2:32}}),_(_e,be,{defaults:{event:"pan",threshold:10,pointers:1,direction:30},getTouchAction:function(){var e=this.options.direction,t=[];return 6&e&&t.push("pan-y"),24&e&&t.push("pan-x"),t},directionTest:function(e){var t=this.options,n=!0,r=e.distance,i=e.direction,o=e.deltaX,a=e.deltaY;return i&t.direction||(6&t.direction?(i=0===o?1:o<0?2:4,n=o!=this.pX,r=Math.abs(e.deltaX)):(i=0===a?1:a<0?8:16,n=a!=this.pY,r=Math.abs(e.deltaY))),e.direction=i,n&&r>t.threshold&&i&t.direction},attrTest:function(e){return be.prototype.attrTest.call(this,e)&&(2&this.state||!(2&this.state)&&this.directionTest(e))},emit:function(e){this.pX=e.deltaX,this.pY=e.deltaY;var t=ye(e.direction);t&&(e.additionalEvent=this.options.event+t),this._super.emit.call(this,e)}}),_(we,be,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return["none"]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||2&this.state)},emit:function(e){if(1!==e.scale){var t=e.scale<1?"in":"out";e.additionalEvent=this.options.event+t}this._super.emit.call(this,e)}}),_(Se,ve,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return["auto"]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,r=e.distance<t.threshold,i=e.deltaTime>t.time;if(this._input=e,!r||!n||12&e.eventType&&!i)this.reset();else if(1&e.eventType)this.reset(),this._timer=h((function(){this.state=8,this.tryEmit()}),t.time,this);else if(4&e.eventType)return 8;return 32},reset:function(){clearTimeout(this._timer)},emit:function(e){8===this.state&&(e&&4&e.eventType?this.manager.emit(this.options.event+"up",e):(this._input.timeStamp=p(),this.manager.emit(this.options.event,this._input)))}}),_(Oe,be,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return["none"]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||2&this.state)}}),_(Ee,be,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:30,pointers:1},getTouchAction:function(){return _e.prototype.getTouchAction.call(this)},attrTest:function(e){var t,n=this.options.direction;return 30&n?t=e.overallVelocity:6&n?t=e.overallVelocityX:24&n&&(t=e.overallVelocityY),this._super.attrTest.call(this,e)&&n&e.offsetDirection&&e.distance>this.options.threshold&&e.maxPointers==this.options.pointers&&d(t)>this.options.velocity&&4&e.eventType},emit:function(e){var t=ye(e.offsetDirection);t&&this.manager.emit(this.options.event+t,e),this.manager.emit(this.options.event,e)}}),_(Te,ve,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return["manipulation"]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,r=e.distance<t.threshold,i=e.deltaTime<t.time;if(this.reset(),1&e.eventType&&0===this.count)return this.failTimeout();if(r&&i&&n){if(4!=e.eventType)return this.failTimeout();var o=!this.pTime||e.timeStamp-this.pTime<t.interval,a=!this.pCenter||X(this.pCenter,e.center)<t.posThreshold;if(this.pTime=e.timeStamp,this.pCenter=e.center,a&&o?this.count+=1:this.count=1,this._input=e,0===this.count%t.taps)return this.hasRequireFailures()?(this._timer=h((function(){this.state=8,this.tryEmit()}),t.interval,this),2):8}return 32},failTimeout:function(){return this._timer=h((function(){this.state=32}),this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){8==this.state&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),ke.VERSION="2.0.7",ke.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[Oe,{enable:!1}],[we,{enable:!1},["rotate"]],[Ee,{direction:6}],[_e,{direction:6},["swipe"]],[Te],[Te,{event:"doubletap",taps:2},["tap"]],[Se]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};function xe(e,t){var n;this.options=l({},ke.defaults,t||{}),this.options.inputTarget=this.options.inputTarget||e,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=e,this.input=new((n=this).options.inputClass||(D?ee:L?oe:M?se:q))(n,B),this.touchAction=new he(this,this.options.touchAction),Pe(this,!0),m(this.options.recognizers,(function(e){var t=this.add(new e[0](e[1]));e[2]&&t.recognizeWith(e[2]),e[3]&&t.requireFailure(e[3])}),this)}function Pe(e,t){var n,r=e.element;r.style&&(m(e.options.cssProps,(function(i,o){n=A(r.style,o),t?(e.oldCssProps[n]=r.style[n],r.style[n]=i):r.style[n]=e.oldCssProps[n]||""})),t||(e.oldCssProps={}))}xe.prototype={set:function(e){return l(this.options,e),e.touchAction&&this.touchAction.update(),e.inputTarget&&(this.input.destroy(),this.input.target=e.inputTarget,this.input.init()),this},stop:function(e){this.session.stopped=e?2:1},recognize:function(e){var t=this.session;if(!t.stopped){var n;this.touchAction.preventDefaults(e);var r=this.recognizers,i=t.curRecognizer;(!i||i&&8&i.state)&&(i=t.curRecognizer=null);for(var o=0;o<r.length;)n=r[o],2===t.stopped||i&&n!=i&&!n.canRecognizeWith(i)?n.reset():n.recognize(e),!i&&14&n.state&&(i=t.curRecognizer=n),o++}},get:function(e){if(e instanceof ve)return e;for(var t=this.recognizers,n=0;n<t.length;n++)if(t[n].options.event==e)return t[n];return null},add:function(e){if(v(e,"add",this))return this;var t=this.get(e.options.event);return t&&this.remove(t),this.recognizers.push(e),e.manager=this,this.touchAction.update(),e},remove:function(e){if(v(e,"remove",this))return this;if(e=this.get(e)){var t=this.recognizers,n=C(t,e);-1!==n&&(t.splice(n,1),this.touchAction.update())}return this},on:function(e,t){if(void 0!==e&&void 0!==t){var n=this.handlers;return m(P(e),(function(e){n[e]=n[e]||[],n[e].push(t)})),this}},off:function(e,t){if(void 0!==e){var n=this.handlers;return m(P(e),(function(e){t?n[e]&&n[e].splice(C(n[e],t),1):delete n[e]})),this}},emit:function(e,t){this.options.domEvents&&function(e,t){var n=o.createEvent("Event");n.initEvent(e,!0,!0),n.gesture=t,t.target.dispatchEvent(n)}(e,t);var n=this.handlers[e]&&this.handlers[e].slice();if(n&&n.length){t.type=e,t.preventDefault=function(){t.srcEvent.preventDefault()};for(var r=0;r<n.length;)n[r](t),r++}},destroy:function(){this.element&&Pe(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},l(ke,{INPUT_START:1,INPUT_MOVE:2,INPUT_END:4,INPUT_CANCEL:8,STATE_POSSIBLE:1,STATE_BEGAN:2,STATE_CHANGED:4,STATE_ENDED:8,STATE_RECOGNIZED:8,STATE_CANCELLED:16,STATE_FAILED:32,DIRECTION_NONE:1,DIRECTION_LEFT:2,DIRECTION_RIGHT:4,DIRECTION_UP:8,DIRECTION_DOWN:16,DIRECTION_HORIZONTAL:6,DIRECTION_VERTICAL:24,DIRECTION_ALL:30,Manager:xe,Input:H,TouchAction:he,TouchInput:oe,MouseInput:q,PointerEventInput:ee,TouchMouseInput:se,SingleTouchInput:ne,Recognizer:ve,AttrRecognizer:be,Tap:Te,Pan:_e,Swipe:Ee,Pinch:we,Rotate:Oe,Press:Se,on:E,off:T,each:m,merge:b,extend:g,assign:l,inherit:_,bindFn:w,prefixed:A}),(void 0!==i?i:"undefined"!=typeof self?self:{}).Hammer=ke,void 0===(r=function(){return ke}.call(t,n,t,e))||(e.exports=r)}(window,document)},function(e,t,n){"use strict";n.r(t);var r=n(53),i=n.n(r),o=n(85),a=n(7),s=n(2),l=n.n(s),u=n(62),c=n(8),f=n(30),d=n(12),p=n(34),h=n.n(p),v={},m={Mixin:{scrollResponderMixinGetInitialState:function(){return{isTouching:!1,lastMomentumScrollBeginTime:0,lastMomentumScrollEndTime:0,observedScrollSinceBecomingResponder:!1,becameResponderWhileAnimating:!1}},scrollResponderHandleScrollShouldSetResponder:function(){return this.state.isTouching},scrollResponderHandleStartShouldSetResponder:function(){return!1},scrollResponderHandleStartShouldSetResponderCapture:function(e){return this.scrollResponderIsAnimating()},scrollResponderHandleResponderReject:function(){h()(!1,"ScrollView doesn't take rejection well - scrolls anyway")},scrollResponderHandleTerminationRequest:function(){return!this.state.observedScrollSinceBecomingResponder},scrollResponderHandleTouchEnd:function(e){var t=e.nativeEvent;this.state.isTouching=0!==t.touches.length,this.props.onTouchEnd&&this.props.onTouchEnd(e)},scrollResponderHandleResponderRelease:function(e){this.props.onResponderRelease&&this.props.onResponderRelease(e);var t=f.a.currentlyFocusedField();this.props.keyboardShouldPersistTaps||null==t||e.target===t||this.state.observedScrollSinceBecomingResponder||this.state.becameResponderWhileAnimating||(this.props.onScrollResponderKeyboardDismissed&&this.props.onScrollResponderKeyboardDismissed(e),f.a.blurTextInput(t))},scrollResponderHandleScroll:function(e){this.state.observedScrollSinceBecomingResponder=!0,this.props.onScroll&&this.props.onScroll(e)},scrollResponderHandleResponderGrant:function(e){this.state.observedScrollSinceBecomingResponder=!1,this.props.onResponderGrant&&this.props.onResponderGrant(e),this.state.becameResponderWhileAnimating=this.scrollResponderIsAnimating()},scrollResponderHandleScrollBeginDrag:function(e){this.props.onScrollBeginDrag&&this.props.onScrollBeginDrag(e)},scrollResponderHandleScrollEndDrag:function(e){this.props.onScrollEndDrag&&this.props.onScrollEndDrag(e)},scrollResponderHandleMomentumScrollBegin:function(e){this.state.lastMomentumScrollBeginTime=Date.now(),this.props.onMomentumScrollBegin&&this.props.onMomentumScrollBegin(e)},scrollResponderHandleMomentumScrollEnd:function(e){this.state.lastMomentumScrollEndTime=Date.now(),this.props.onMomentumScrollEnd&&this.props.onMomentumScrollEnd(e)},scrollResponderHandleTouchStart:function(e){this.state.isTouching=!0,this.props.onTouchStart&&this.props.onTouchStart(e)},scrollResponderHandleTouchMove:function(e){this.props.onTouchMove&&this.props.onTouchMove(e)},scrollResponderIsAnimating:function(){return Date.now()-this.state.lastMomentumScrollEndTime<16||this.state.lastMomentumScrollEndTime<this.state.lastMomentumScrollBeginTime},scrollResponderGetScrollableNode:function(){return this.getScrollableNode?this.getScrollableNode():Object(a.default)(this)},scrollResponderScrollTo:function(e,t,n){if("number"==typeof e)console.warn("`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.");else{var r=e||v;e=r.x,t=r.y,n=r.animated}var i=this.scrollResponderGetScrollableNode(),o=e||0,a=t||0;"function"==typeof i.scroll?i.scroll({top:a,left:o,behavior:n?"smooth":"auto"}):(i.scrollLeft=o,i.scrollTop=a)},scrollResponderScrollWithoutAnimationTo:function(e,t){console.warn("`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead"),this.scrollResponderScrollTo({x:e,y:t,animated:!1})},scrollResponderZoomTo:function(e,t){"ios"!==c.default.OS&&l()("zoomToRect is not implemented")},scrollResponderFlashScrollIndicators:function(){},scrollResponderScrollNativeHandleToKeyboard:function(e,t,n){this.additionalScrollOffset=t||0,this.preventNegativeScrollOffset=!!n,d.a.measureLayout(e,Object(a.default)(this.getInnerViewNode()),this.scrollResponderTextInputFocusError,this.scrollResponderInputMeasureAndScrollToKeyboard)},scrollResponderInputMeasureAndScrollToKeyboard:function(e,t,n,r){var i=u.default.get("window").height;this.keyboardWillOpenTo&&(i=this.keyboardWillOpenTo.endCoordinates.screenY);var o=t-i+r+this.additionalScrollOffset;this.preventNegativeScrollOffset&&(o=Math.max(0,o)),this.scrollResponderScrollTo({x:0,y:o,animated:!0}),this.additionalOffset=0,this.preventNegativeScrollOffset=!1},scrollResponderTextInputFocusError:function(e){console.error("Error measuring text field: ",e)},componentWillMount:function(){this.keyboardWillOpenTo=null,this.additionalScrollOffset=0},scrollResponderKeyboardWillShow:function(e){this.keyboardWillOpenTo=e,this.props.onKeyboardWillShow&&this.props.onKeyboardWillShow(e)},scrollResponderKeyboardWillHide:function(e){this.keyboardWillOpenTo=null,this.props.onKeyboardWillHide&&this.props.onKeyboardWillHide(e)},scrollResponderKeyboardDidShow:function(e){e&&(this.keyboardWillOpenTo=e),this.props.onKeyboardDidShow&&this.props.onKeyboardDidShow(e)},scrollResponderKeyboardDidHide:function(e){this.keyboardWillOpenTo=null,this.props.onKeyboardDidHide&&this.props.onKeyboardDidHide(e)}}},y=n(46),g=n.n(y),b=n(4),_=n(3),w=n(1),S=n.n(w),O=n(0);function E(){return(E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var T=function(e){return{nativeEvent:{contentOffset:{get x(){return e.target.scrollLeft},get y(){return e.target.scrollTop}},contentSize:{get height(){return e.target.scrollHeight},get width(){return e.target.scrollWidth}},layoutMeasurement:{get height(){return e.target.offsetHeight},get width(){return e.target.offsetWidth}}},timeStamp:Date.now()}},k=function(e){var t,n;function r(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this)._debouncedOnScrollEnd=g()(t._handleScrollEnd,100),t._state={isScrolling:!1,scrollLastTick:0},t._createPreventableScrollHandler=function(e){return function(n){t.props.scrollEnabled?e&&e(n):n.preventDefault()}},t._handleScroll=function(e){e.persist(),e.stopPropagation();var n=t.props.scrollEventThrottle;t._debouncedOnScrollEnd(e),t._state.isScrolling?t._shouldEmitScrollEvent(t._state.scrollLastTick,n)&&t._handleScrollTick(e):t._handleScrollStart(e)},t._setViewRef=function(e){t._viewRef=e},t}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.setNativeProps=function(e){this._viewRef&&this._viewRef.setNativeProps(e)},i.render=function(){var e=this.props,t=e.scrollEnabled,n=e.style,r=(e.alwaysBounceHorizontal,e.alwaysBounceVertical,e.automaticallyAdjustContentInsets,e.bounces,e.bouncesZoom,e.canCancelContentTouches,e.centerContent,e.contentInset,e.contentInsetAdjustmentBehavior,e.contentOffset,e.decelerationRate,e.directionalLockEnabled,e.endFillColor,e.indicatorStyle,e.keyboardShouldPersistTaps,e.maximumZoomScale,e.minimumZoomScale,e.onMomentumScrollBegin,e.onMomentumScrollEnd,e.onScrollBeginDrag,e.onScrollEndDrag,e.overScrollMode,e.pinchGestureEnabled,e.removeClippedSubviews,e.scrollEventThrottle,e.scrollIndicatorInsets,e.scrollPerfTag,e.scrollsToTop,e.showsHorizontalScrollIndicator),i=e.showsVerticalScrollIndicator,o=(e.snapToInterval,e.snapToAlignment,e.zoomScale,function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["scrollEnabled","style","alwaysBounceHorizontal","alwaysBounceVertical","automaticallyAdjustContentInsets","bounces","bouncesZoom","canCancelContentTouches","centerContent","contentInset","contentInsetAdjustmentBehavior","contentOffset","decelerationRate","directionalLockEnabled","endFillColor","indicatorStyle","keyboardShouldPersistTaps","maximumZoomScale","minimumZoomScale","onMomentumScrollBegin","onMomentumScrollEnd","onScrollBeginDrag","onScrollEndDrag","overScrollMode","pinchGestureEnabled","removeClippedSubviews","scrollEventThrottle","scrollIndicatorInsets","scrollPerfTag","scrollsToTop","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","snapToInterval","snapToAlignment","zoomScale"])),a=!1===r||!1===i;return S.a.createElement(_.default,E({},o,{onScroll:this._handleScroll,onTouchMove:this._createPreventableScrollHandler(this.props.onTouchMove),onWheel:this._createPreventableScrollHandler(this.props.onWheel),ref:this._setViewRef,style:[n,!t&&x.scrollDisabled,a&&x.hideScrollbar]}))},i._handleScrollStart=function(e){this._state.isScrolling=!0,this._state.scrollLastTick=Date.now()},i._handleScrollTick=function(e){var t=this.props.onScroll;this._state.scrollLastTick=Date.now(),t&&t(T(e))},i._handleScrollEnd=function(e){var t=this.props.onScroll;this._state.isScrolling=!1,t&&t(T(e))},i._shouldEmitScrollEvent=function(e,t){var n=Date.now()-e;return t>0&&n>=t},r}(w.Component);k.defaultProps={scrollEnabled:!0,scrollEventThrottle:0},k.propTypes={};var x=b.default.create({scrollDisabled:{touchAction:"none"},hideScrollbar:{scrollbarWidth:"none"}}),P=n(24);function C(){return(C=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function N(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){R(e,t,n[t])}))}return e}function R(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var A={},I=i()({displayName:"ScrollView",propTypes:N({},P.a,{contentContainerStyle:P.a.style,horizontal:O.bool,keyboardDismissMode:Object(O.oneOf)(["none","interactive","on-drag"]),onContentSizeChange:O.func,onScroll:O.func,pagingEnabled:O.bool,refreshControl:O.element,scrollEnabled:O.bool,scrollEventThrottle:O.number,stickyHeaderIndices:Object(O.arrayOf)(O.number),style:P.a.style}),mixins:[m.Mixin],getInitialState:function(){return this.scrollResponderMixinGetInitialState()},flashScrollIndicators:function(){this.scrollResponderFlashScrollIndicators()},setNativeProps:function(e){this._scrollViewRef&&this._scrollViewRef.setNativeProps(e)},getScrollResponder:function(){return this},getScrollableNode:function(){return Object(a.default)(this._scrollViewRef)},getInnerViewNode:function(){return Object(a.default)(this._innerViewRef)},scrollTo:function(e,t,n){if("number"==typeof e)console.warn("`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.");else{var r=e||A;t=r.x,e=r.y,n=r.animated}this.getScrollResponder().scrollResponderScrollTo({x:t||0,y:e||0,animated:!1!==n})},scrollToEnd:function(e){var t=!1!==(e&&e.animated),n=this.props.horizontal,r=this.getScrollResponder(),i=r.scrollResponderGetScrollableNode(),o=n?i.scrollWidth:0,a=n?0:i.scrollHeight;r.scrollResponderScrollTo({x:o,y:a,animated:t})},scrollWithoutAnimationTo:function(e,t){void 0===e&&(e=0),void 0===t&&(t=0),console.warn("`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead"),this.scrollTo({x:t,y:e,animated:!1})},render:function(){var e=this.props,t=e.contentContainerStyle,n=e.horizontal,r=e.onContentSizeChange,i=e.refreshControl,o=e.stickyHeaderIndices,a=e.pagingEnabled,s=(e.keyboardDismissMode,e.onScroll,function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["contentContainerStyle","horizontal","onContentSizeChange","refreshControl","stickyHeaderIndices","pagingEnabled","keyboardDismissMode","onScroll"])),u={};r&&(u={onLayout:this._handleContentOnLayout});var c=!n&&Array.isArray(o),f=c||a?S.a.Children.map(this.props.children,(function(e,t){var n=c&&o.indexOf(t)>-1;return null!=e&&(n||a)?S.a.createElement(_.default,{style:b.default.compose(n&&M.stickyHeader,a&&M.pagingEnabledChild)},e):e})):this.props.children,d=S.a.createElement(_.default,C({},u,{children:f,collapsable:!1,ref:this._setInnerViewRef,style:b.default.compose(n&&M.contentContainerHorizontal,t)})),p=n?M.baseHorizontal:M.baseVertical,h=n?M.pagingEnabledHorizontal:M.pagingEnabledVertical,v=N({},s,{style:[p,a&&h,this.props.style],onTouchStart:this.scrollResponderHandleTouchStart,onTouchMove:this.scrollResponderHandleTouchMove,onTouchEnd:this.scrollResponderHandleTouchEnd,onScrollBeginDrag:this.scrollResponderHandleScrollBeginDrag,onScrollEndDrag:this.scrollResponderHandleScrollEndDrag,onMomentumScrollBegin:this.scrollResponderHandleMomentumScrollBegin,onMomentumScrollEnd:this.scrollResponderHandleMomentumScrollEnd,onStartShouldSetResponder:this.scrollResponderHandleStartShouldSetResponder,onStartShouldSetResponderCapture:this.scrollResponderHandleStartShouldSetResponderCapture,onScrollShouldSetResponder:this.scrollResponderHandleScrollShouldSetResponder,onScroll:this._handleScroll,onResponderGrant:this.scrollResponderHandleResponderGrant,onResponderTerminationRequest:this.scrollResponderHandleTerminationRequest,onResponderTerminate:this.scrollResponderHandleTerminate,onResponderRelease:this.scrollResponderHandleResponderRelease,onResponderReject:this.scrollResponderHandleResponderReject}),m=k;return l()(void 0!==m,"ScrollViewClass must not be undefined"),i?S.a.cloneElement(i,{style:v.style},S.a.createElement(m,C({},v,{ref:this._setScrollViewRef,style:p}),d)):S.a.createElement(m,C({},v,{ref:this._setScrollViewRef}),d)},_handleContentOnLayout:function(e){var t=e.nativeEvent.layout,n=t.width,r=t.height;this.props.onContentSizeChange(n,r)},_handleScroll:function(e){"on-drag"===this.props.keyboardDismissMode&&Object(o.a)(),this.scrollResponderHandleScroll(e)},_setInnerViewRef:function(e){this._innerViewRef=e},_setScrollViewRef:function(e){this._scrollViewRef=e}}),j={flexGrow:1,flexShrink:1,transform:[{translateZ:0}],WebkitOverflowScrolling:"touch"},M=b.default.create({baseVertical:N({},j,{flexDirection:"column",overflowX:"hidden",overflowY:"auto"}),baseHorizontal:N({},j,{flexDirection:"row",overflowX:"auto",overflowY:"hidden"}),contentContainerHorizontal:{flexDirection:"row"},stickyHeader:{position:"sticky",top:0,zIndex:10},pagingEnabledHorizontal:{scrollSnapType:"x mandatory"},pagingEnabledVertical:{scrollSnapType:"y mandatory"},pagingEnabledChild:{scrollSnapAlign:"start"}});t.default=I},function(e,t,n){"use strict";n.r(t);var r=n(49);for(var i in r)["createNavigationContainer","createStackNavigator","createBottomTabNavigator","createMaterialTopTabNavigator","createDrawerNavigator","StackGestureContext","DrawerGestureContext","DrawerRouter","DrawerActions","Transitioner","StackView","StackViewCard","StackViewTransitionConfigs","Header","HeaderTitle","HeaderBackButton","HeaderStyleInterpolator","DrawerView","DrawerItems","DrawerSidebar","BottomTabBar","MaterialTopTabBar","default"].indexOf(i)<0&&function(e){n.d(t,e,(function(){return r[e]}))}(i);var o=n(132);for(var i in o)["createNavigationContainer","createStackNavigator","createBottomTabNavigator","createMaterialTopTabNavigator","createDrawerNavigator","StackGestureContext","DrawerGestureContext","DrawerRouter","DrawerActions","Transitioner","StackView","StackViewCard","StackViewTransitionConfigs","Header","HeaderTitle","HeaderBackButton","HeaderStyleInterpolator","DrawerView","DrawerItems","DrawerSidebar","BottomTabBar","MaterialTopTabBar","default"].indexOf(i)<0&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var a=n(11);n.d(t,"createNavigationContainer",(function(){return a.createNavigationContainer})),n.d(t,"createStackNavigator",(function(){return a.createStackNavigator})),n.d(t,"createBottomTabNavigator",(function(){return a.createBottomTabNavigator})),n.d(t,"createMaterialTopTabNavigator",(function(){return a.createMaterialTopTabNavigator})),n.d(t,"createDrawerNavigator",(function(){return a.createDrawerNavigator})),n.d(t,"StackGestureContext",(function(){return a.StackGestureContext})),n.d(t,"DrawerGestureContext",(function(){return a.DrawerGestureContext})),n.d(t,"DrawerRouter",(function(){return a.DrawerRouter})),n.d(t,"DrawerActions",(function(){return a.DrawerActions})),n.d(t,"Transitioner",(function(){return a.Transitioner})),n.d(t,"StackView",(function(){return a.StackView})),n.d(t,"StackViewCard",(function(){return a.StackViewCard})),n.d(t,"StackViewTransitionConfigs",(function(){return a.StackViewTransitionConfigs})),n.d(t,"Header",(function(){return a.Header})),n.d(t,"HeaderTitle",(function(){return a.HeaderTitle})),n.d(t,"HeaderBackButton",(function(){return a.HeaderBackButton})),n.d(t,"HeaderStyleInterpolator",(function(){return a.HeaderStyleInterpolator})),n.d(t,"DrawerView",(function(){return a.DrawerView})),n.d(t,"DrawerItems",(function(){return a.DrawerItems})),n.d(t,"DrawerSidebar",(function(){return a.DrawerSidebar})),n.d(t,"BottomTabBar",(function(){return a.BottomTabBar})),n.d(t,"MaterialTopTabBar",(function(){return a.MaterialTopTabBar}))},function(e,t,n){"use strict";n.r(t);var r=n(26),i=n(53),o=n.n(i),a=n(2),s=n.n(a),l=function(e){s()(!(e.delayPressIn<0||e.delayPressOut<0||e.delayLongPress<0),"Touchable components cannot have negative delay properties")},u=n(0),c=n(1),f=n.n(c),d=n(4),p=n(47),h=n(72),v=n(178),m=n.n(v),y=n(24),g=n(34),b=n.n(g);function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var w={top:20,left:20,right:20,bottom:30},S=o()({displayName:"TouchableWithoutFeedback",mixins:[m.a,p.default.Mixin],propTypes:{accessibilityComponentType:y.a.accessibilityComponentType,accessibilityLabel:u.string,accessibilityRole:y.a.accessibilityRole,accessibilityTraits:y.a.accessibilityTraits,accessible:u.bool,children:u.any,delayLongPress:u.number,delayPressIn:u.number,delayPressOut:u.number,disabled:u.bool,hitSlop:h.a,onLayout:u.func,onLongPress:u.func,onPress:u.func,onPressIn:u.func,onPressOut:u.func,pressRetentionOffset:h.a,testID:u.string},getInitialState:function(){return this.touchableGetInitialState()},componentDidMount:function(){l(this.props)},componentWillReceiveProps:function(e){l(e)},touchableHandlePress:function(e){this.props.onPress&&this.props.onPress(e)},touchableHandleActivePressIn:function(e){this.props.onPressIn&&this.props.onPressIn(e)},touchableHandleActivePressOut:function(e){this.props.onPressOut&&this.props.onPressOut(e)},touchableHandleLongPress:function(e){this.props.onLongPress&&this.props.onLongPress(e)},touchableGetPressRectOffset:function(){return this.props.pressRetentionOffset||w},touchableGetHitSlop:function(){return this.props.hitSlop},touchableGetHighlightDelayMS:function(){return this.props.delayPressIn||0},touchableGetLongPressDelayMS:function(){return 0===this.props.delayLongPress?0:this.props.delayLongPress||500},touchableGetPressOutDelayMS:function(){return this.props.delayPressOut||0},render:function(){var e=this.props,t=(e.delayLongPress,e.delayPressIn,e.delayPressOut,e.onLongPress,e.onPress,e.onPressIn,e.onPressOut,e.pressRetentionOffset,function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["delayLongPress","delayPressIn","delayPressOut","onLongPress","onPress","onPressIn","onPressOut","pressRetentionOffset"])),n=f.a.Children.only(this.props.children),r=n.props.children;b()(!n.type||"Text"!==n.type.displayName,"TouchableWithoutFeedback does not work well with Text children. Wrap children in a View instead. See "+(n._owner&&n._owner.getName&&n._owner.getName()||"<unknown>"));var i=p.default.TOUCH_TARGET_DEBUG&&n.type&&"Text"===n.type.displayName?[!this.props.disabled&&O.actionable,n.props.style,{color:"red"}]:[!this.props.disabled&&O.actionable,n.props.style];return f.a.cloneElement(n,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){_(e,t,n[t])}))}return e}({},t,{accessible:!1!==this.props.accessible,children:r,onKeyDown:this.touchableHandleKeyEvent,onKeyUp:this.touchableHandleKeyEvent,onResponderGrant:this.touchableHandleResponderGrant,onResponderMove:this.touchableHandleResponderMove,onResponderRelease:this.touchableHandleResponderRelease,onResponderTerminate:this.touchableHandleResponderTerminate,onResponderTerminationRequest:this.touchableHandleResponderTerminationRequest,onStartShouldSetResponder:this.touchableHandleStartShouldSetResponder,style:i}))}}),O=d.default.create({actionable:{cursor:"pointer",touchAction:"manipulation"}}),E=S,T=n(3);function k(){return(k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var P=d.default.flatten,C={top:20,left:20,right:20,bottom:30},N=o()({displayName:"TouchableOpacity",mixins:[p.default.Mixin],propTypes:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){x(e,t,n[t])}))}return e}({},E.propTypes,{activeOpacity:u.number,focusedOpacity:u.number}),getDefaultProps:function(){return{activeOpacity:.2,focusedOpacity:.7}},getInitialState:function(){return this.touchableGetInitialState()},componentDidMount:function(){l(this.props)},componentWillReceiveProps:function(e){l(e)},setOpacityTo:function(e,t){this.setNativeProps({style:{opacity:e,transitionDuration:t?t/1e3+"s":"0s"}})},touchableHandleActivePressIn:function(e){"onResponderGrant"===e.dispatchConfig.registrationName?this._opacityActive(0):this._opacityActive(150),this.props.onPressIn&&this.props.onPressIn(e)},touchableHandleActivePressOut:function(e){this._opacityInactive(250),this.props.onPressOut&&this.props.onPressOut(e)},touchableHandlePress:function(e){this.props.onPress&&this.props.onPress(e)},touchableHandleLongPress:function(e){this.props.onLongPress&&this.props.onLongPress(e)},touchableGetPressRectOffset:function(){return this.props.pressRetentionOffset||C},touchableGetHitSlop:function(){return this.props.hitSlop},touchableGetHighlightDelayMS:function(){return this.props.delayPressIn||0},touchableGetLongPressDelayMS:function(){return 0===this.props.delayLongPress?0:this.props.delayLongPress||500},touchableGetPressOutDelayMS:function(){return this.props.delayPressOut},_opacityActive:function(e){this.setOpacityTo(this.props.activeOpacity,e)},_opacityInactive:function(e){this.setOpacityTo(this._getChildStyleOpacityWithDefault(),e)},_opacityFocused:function(){this.setOpacityTo(this.props.focusedOpacity)},_getChildStyleOpacityWithDefault:function(){var e=P(this.props.style)||{};return void 0===e.opacity?1:e.opacity},render:function(){var e=this.props,t=(e.activeOpacity,e.focusedOpacity,e.delayLongPress,e.delayPressIn,e.delayPressOut,e.onLongPress,e.onPress,e.onPressIn,e.onPressOut,e.pressRetentionOffset,function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["activeOpacity","focusedOpacity","delayLongPress","delayPressIn","delayPressOut","onLongPress","onPress","onPressIn","onPressOut","pressRetentionOffset"]));return f.a.createElement(T.default,k({},t,{accessible:!1!==this.props.accessible,onKeyDown:this.touchableHandleKeyEvent,onKeyUp:this.touchableHandleKeyEvent,onResponderGrant:this.touchableHandleResponderGrant,onResponderMove:this.touchableHandleResponderMove,onResponderRelease:this.touchableHandleResponderRelease,onResponderTerminate:this.touchableHandleResponderTerminate,onResponderTerminationRequest:this.touchableHandleResponderTerminationRequest,onStartShouldSetResponder:this.touchableHandleStartShouldSetResponder,style:[R.root,!this.props.disabled&&R.actionable,this.props.style]}),this.props.children,p.default.renderDebugView({color:"blue",hitSlop:this.props.hitSlop}))}}),R=d.default.create({root:{transitionProperty:"opacity",transitionDuration:"0.15s",userSelect:"none"},actionable:{cursor:"pointer",touchAction:"manipulation"}});t.default=Object(r.a)(N)},function(e,t,n){"use strict";var r=n(9);var i=n(27),o=n(83);var a={height:0,width:0};var s=function(e){var t,n,r,s,l=e.shadowColor,u=e.shadowOffset,c=e.shadowOpacity,f=e.shadowRadius,d=e.textShadowColor,p=e.textShadowOffset,h=e.textShadowRadius,v=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["shadowColor","shadowOffset","shadowOpacity","shadowRadius","textShadowColor","textShadowOffset","textShadowRadius"]);return null==l&&null==u&&null==c&&null==f||(t=v,r=(n=e).boxShadow,null!=(s=Object(o.a)(n))&&(t.boxShadow=r?r+", "+s:s)),null==d&&null==p&&null==h||function(e,t){var n=t.textShadowColor,r=t.textShadowOffset,o=t.textShadowRadius,s=r||a,l=s.height,u=s.width,c=o||0,f=Object(i.a)(u),d=Object(i.a)(l),p=Object(i.a)(c),h=Object(i.a)(n,"textShadowColor");!h||0===l&&0===u&&0===c||null==f||null==d||null==p||(e.textShadow=f+" "+d+" "+p+" "+h)}(v,e),v},l=Array.prototype.slice;function u(e){var t,n={},r={};null!=e&&l.call(e.cssRules).forEach((function(e,i){var o=e.cssText;if(o.indexOf("stylesheet-group")>-1)t=function(e){return Number(e.selectorText.split(/["']/)[1])}(e),n[t]={start:i,rules:[o]};else{var a=d(o);null!=a&&(r[a]=!0,n[t].rules.push(o))}}));function i(e,t,r){var i=c(n),o=i.indexOf(t)+1,a=i[o],s=null!=a&&null!=n[a].start?n[a].start:e.cssRules.length,l=function(e,t,n){try{return e.insertRule(t,n),!0}catch(e){return!1}}(e,r,s);if(l){null==n[t].start&&(n[t].start=s);for(var u=o;u<i.length;u+=1){var f=i[u],d=n[f].start;n[f].start=d+1}}return l}return{getTextContent:function(){return c(n).map((function(e){return n[e].rules.join("\n")})).join("\n")},insert:function(t,o){var a=Number(o);if(null==n[a]){var s=function(e){return'[stylesheet-group="'+e+'"]{}'}(a);n[a]={start:null,rules:[s]},null!=e&&i(e,a,s)}var l=d(t);null!=l&&null==r[l]&&(r[l]=!0,n[a].rules.push(t),null!=e&&(i(e,a,t)||n[a].rules.pop()))}}}function c(e){return Object.keys(e).map(Number).sort((function(e,t){return e>t?1:-1}))}var f=/\s*([,])\s*/g;function d(e){var t=e.split("{")[0].trim();return""!==t?t.replace(f,"$1"):null}var p=function(e){return function e(t,n){for(var r=0;r<t.length;r++){var i=t[r];Array.isArray(i)?e(i,n):null!=i&&!1!==i&&n.push(i)}return n}(e,[])},h=n(69),v=n(21),m=n(56),y={},g={borderTopLeftRadius:"borderTopRightRadius",borderTopRightRadius:"borderTopLeftRadius",borderBottomLeftRadius:"borderBottomRightRadius",borderBottomRightRadius:"borderBottomLeftRadius",borderLeftColor:"borderRightColor",borderLeftStyle:"borderRightStyle",borderLeftWidth:"borderRightWidth",borderRightColor:"borderLeftColor",borderRightStyle:"borderLeftStyle",borderRightWidth:"borderLeftWidth",left:"right",marginLeft:"marginRight",marginRight:"marginLeft",paddingLeft:"paddingRight",paddingRight:"paddingLeft",right:"left"},b={borderTopStartRadius:"borderTopLeftRadius",borderTopEndRadius:"borderTopRightRadius",borderBottomStartRadius:"borderBottomLeftRadius",borderBottomEndRadius:"borderBottomRightRadius",borderStartColor:"borderLeftColor",borderStartStyle:"borderLeftStyle",borderStartWidth:"borderLeftWidth",borderEndColor:"borderRightColor",borderEndStyle:"borderRightStyle",borderEndWidth:"borderRightWidth",end:"right",marginStart:"marginLeft",marginEnd:"marginRight",paddingStart:"paddingLeft",paddingEnd:"paddingRight",start:"left"},_={clear:!0,float:!0,textAlign:!0},w=function(e){return Object(m.a)(e,-1)},S=function(e){var t=v.default.doLeftAndRightSwapInRTL,n=v.default.isRTL,r=e||y,i={},o={};for(var a in r)if(Object.prototype.hasOwnProperty.call(r,a)){var s=r[a],l=a,u=s;if(b.hasOwnProperty(a)){var c=b[a];l=n?g[c]:c}else n&&t&&g[a]&&(l=g[a]);if(_.hasOwnProperty(a)&&("start"===s?u=n?"right":"left":"end"===s?u=n?"left":"right":n&&t&&("left"===s?u="right":"right"===s&&(u="left"))),"transitionProperty"===l)if(b.hasOwnProperty(u)){var f=b[s];u=n?g[f]:f}else n&&t&&g[s]&&(u=g[s]);n&&"textShadowOffset"===l?(o[l]=u,o[l].width=w(u.width)):i[l]||(o[l]=u),b[a]&&(i[l]=!0)}return o},O=n(22),E={},T=!r.canUseDOM||null!=window.CSS&&null!=window.CSS.supports&&(window.CSS.supports("text-decoration-line","none")||window.CSS.supports("-webkit-text-decoration-line","none")),k=function(e){var t=Object.keys(e)[0];return t+"("+Object(i.a)(e[t],t)+")"},x=function(e){if(!e)return E;var t={};return Object.keys(e).sort().forEach((function(n){var r=Object(i.a)(e[n],n);if(null!=r)switch(n){case"aspectRatio":case"elevation":case"overlayColor":case"resizeMode":case"tintColor":break;case"backgroundClip":"text"===r&&(t.backgroundClip=r,t.WebkitBackgroundClip=r);break;case"flex":r>0?(t.flexGrow=r,t.flexShrink=1,t.flexBasis="0%"):0===r?(t.flexGrow=0,t.flexShrink=0,t.flexBasis="0%"):-1===r&&(t.flexGrow=0,t.flexShrink=1,t.flexBasis="auto");break;case"font":t[n]=r.replace("System",O.e);break;case"fontFamily":if(r.indexOf("System")>-1){var o=r.split(/,\s*/);o[o.indexOf("System")]=O.e,t[n]=o.join(",")}else t[n]="monospace"===r?O.a:r;break;case"fontVariant":Array.isArray(r)&&r.length>0&&(t.fontVariant=r.join(" "));break;case"textAlignVertical":t.verticalAlign="center"===r?"middle":r;break;case"textDecorationLine":T?t.textDecorationLine=r:t.textDecoration=r;break;case"transform":case"transformMatrix":!function(e,t){var n=t.transform;Array.isArray(t.transform)?n=t.transform.map(k).join(" "):t.transformMatrix&&(n="matrix3d("+t.transformMatrix.join(",")+")"),e.transform=n}(t,e);break;case"writingDirection":t.direction=r;break;default:var a=O.d[n];a?a.forEach((function(n,i){void 0===e[n]&&(t[n]=r)})):t[n]=Array.isArray(r)?r.join(","):r}})),t};var P=function(e){return function(e,t){for(var n,r=e.length,i=t^r,o=0;r>=4;)n=1540483477*(65535&(n=255&e.charCodeAt(o)|(255&e.charCodeAt(++o))<<8|(255&e.charCodeAt(++o))<<16|(255&e.charCodeAt(++o))<<24))+((1540483477*(n>>>16)&65535)<<16),i=1540483477*(65535&i)+((1540483477*(i>>>16)&65535)<<16)^(n=1540483477*(65535&(n^=n>>>24))+((1540483477*(n>>>16)&65535)<<16)),r-=4,++o;switch(r){case 3:i^=(255&e.charCodeAt(o+2))<<16;case 2:i^=(255&e.charCodeAt(o+1))<<8;case 1:i=1540483477*(65535&(i^=255&e.charCodeAt(o)))+((1540483477*(i>>>16)&65535)<<16)}return i=1540483477*(65535&(i^=i>>>13))+((1540483477*(i>>>16)&65535)<<16),(i^=i>>>15)>>>0}(e,1).toString(36)},C=n(65),N=n(165),R=n.n(N),A=n(166),I=n.n(A),j=n(167),M=n.n(j),D=n(168),L=n.n(D),F=n(169),V=n.n(F),H=n(170),B=n.n(H),U=n(171),G=n.n(U),z=n(172),W=n.n(z),X=n(173),Y=n.n(X),K=n(174),q=n.n(K),$=n(175),Q=n.n($),J=n(176),Z=n.n(J),ee=n(177),te=n.n(ee),ne=["Webkit"],re=["Moz"],ie=["ms"],oe=["Webkit","Moz"],ae=["Webkit","ms"],se=["Webkit","Moz","ms"],le={plugins:[I.a,M.a,L.a,V.a,B.a,G.a,W.a,Y.a,q.a,Q.a,Z.a,te.a],prefixMap:{animation:ne,animationDelay:ne,animationDirection:ne,animationFillMode:ne,animationDuration:ne,animationIterationCount:ne,animationName:ne,animationPlayState:ne,animationTimingFunction:ne,appearance:oe,userSelect:se,textEmphasisPosition:ne,textEmphasis:ne,textEmphasisStyle:ne,textEmphasisColor:ne,boxDecorationBreak:ne,clipPath:ne,maskImage:ne,maskMode:ne,maskRepeat:ne,maskPosition:ne,maskClip:ne,maskOrigin:ne,maskSize:ne,maskComposite:ne,mask:ne,maskBorderSource:ne,maskBorderMode:ne,maskBorderSlice:ne,maskBorderWidth:ne,maskBorderOutset:ne,maskBorderRepeat:ne,maskBorder:ne,maskType:ne,textDecorationStyle:ne,textDecorationSkip:ne,textDecorationLine:ne,textDecorationColor:ne,filter:ne,fontFeatureSettings:ne,breakAfter:se,breakBefore:se,breakInside:se,columnCount:oe,columnFill:oe,columnGap:oe,columnRule:oe,columnRuleColor:oe,columnRuleStyle:oe,columnRuleWidth:oe,columns:oe,columnSpan:oe,columnWidth:oe,writingMode:ae,flex:ae,flexBasis:ne,flexDirection:ae,flexGrow:ne,flexFlow:ae,flexShrink:ne,flexWrap:ae,alignContent:ne,alignItems:ne,alignSelf:ne,justifyContent:ne,order:ne,transform:ne,transformOrigin:ne,transformOriginX:ne,transformOriginY:ne,backfaceVisibility:ne,perspective:ne,perspectiveOrigin:ne,transformStyle:ne,transformOriginZ:ne,backdropFilter:ne,fontKerning:ne,scrollSnapType:ae,scrollSnapPointsX:ae,scrollSnapPointsY:ae,scrollSnapDestination:ae,scrollSnapCoordinate:ae,shapeImageThreshold:ne,shapeImageMargin:ne,shapeImageOutside:ne,hyphens:se,flowInto:ae,flowFrom:ae,regionFragment:ae,textOrientation:ne,textAlignLast:re,tabSize:re,wrapFlow:ie,wrapThrough:ie,wrapMargin:ie,touchAction:ie,gridTemplateColumns:ie,gridTemplateRows:ie,gridTemplateAreas:ie,gridTemplate:ie,gridAutoColumns:ie,gridAutoRows:ie,gridAutoFlow:ie,grid:ie,gridRowStart:ie,gridColumnStart:ie,gridRowEnd:ie,gridRow:ie,gridColumn:ie,gridColumnEnd:ie,gridColumnGap:ie,gridRowGap:ie,gridArea:ie,gridGap:ie,textSizeAdjust:["ms","Webkit"],borderImage:ne,borderImageOutset:ne,borderImageRepeat:ne,borderImageSlice:ne,borderImageSource:ne,borderImageWidth:ne,transitionDelay:ne,transitionDuration:ne,transitionProperty:ne,transitionTimingFunction:ne}},ue=R()(le),ce=ue;function fe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var de={get:function(e,t){if(null!=de[e]&&de[e].hasOwnProperty(t)&&null!=de[e][t])return de[e][t]},set:function(e,t,n){return null==de[e]&&(de[e]={}),de[e][t]=n}};function pe(e){return Object.keys(e).sort().reduce((function(t,n){var r=e[n];if(null!=r){var i=me(r,n),o=de.get(n,i);if(null!=o){t[o.identifier]=o}else{var a=ge("r",n,r),s=function(e,t,n){var r=[],i="."+e;switch(t){case"animationKeyframes":var o=be(n),a=o.animationNames,s=o.rules,l=ye({animationName:a.join(",")});r.push.apply(r,[""+i+l].concat(s));break;case"placeholderTextColor":var u=ye({color:n,opacity:1});r.push(i+"::-webkit-input-placeholder"+u,i+"::-moz-placeholder"+u,i+":-ms-input-placeholder"+u,i+"::placeholder"+u);break;case"scrollbarWidth":"none"===n&&r.push(i+"::-webkit-scrollbar{display:none}",i+"{overflow:-moz-scrollbars-none;-ms-overflow-style:none;scrollbar-width:none;}");break;case"pointerEvents":var c,f=n;if("auto"===n||"box-only"===n){if(f="auto!important","box-only"===n){var d,p=ye(((d={})[t]="none",d));r.push(i+">*"+p)}}else if(("none"===n||"box-none"===n)&&(f="none!important","box-none"===n)){var h,v=ye(((h={})[t]="auto",h));r.push(i+">*"+v)}var m=ye(((c={})[t]=f,c));r.push(""+i+m);break;default:var y,g=ye(((y={})[t]=n,y));r.push(""+i+g)}return r}(a,n,r),l=de.set(n,i,{property:n,value:me(r,n),identifier:a,rules:s});t[a]=l}}return t}),{})}function he(e,t){var n,r,i=ge("css",t,e),o=e.animationKeyframes,a=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["animationKeyframes"]),s=[],l="."+i;if(null!=o){var u=be(o),c=u.animationNames,f=u.rules;r=c.join(","),s.push.apply(s,f)}var d=ye(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){fe(e,t,n[t])}))}return e}({},a,{animationName:r}));return s.push(""+l+d),(n={})[i]={identifier:i,rules:s},n}function ve(e){return function(e){var t=ue(e);return Object.keys(t).forEach((function(e){var n=t[e];Array.isArray(n)&&(t[e]=n[n.length-1])})),t}(x(e))}function me(e,t){var n=Object(i.a)(e,t);return"string"!=typeof n?JSON.stringify(n||""):n}function ye(e){var t=ce(x(e));return"{"+Object.keys(t).map((function(e){var n=t[e],r=Object(C.default)(e);return Array.isArray(n)?n.map((function(e){return r+":"+e})).join(";"):r+":"+n})).sort().join(";")+";}"}function ge(e,t,n){return e+"-"+P(t+me(n,t))}function be(e){if("number"==typeof e)throw new Error("Invalid CSS keyframes type");var t=[],n=[];return(Array.isArray(e)?e:[e]).forEach((function(e){if("string"==typeof e)t.push(e);else{var r=function(e){var t=ge("r","animation",e),n="{"+Object.keys(e).map((function(t){return""+t+ye(e[t])})).join("")+"}",r=["-webkit-",""].map((function(e){return"@"+e+"keyframes "+t+n}));return{identifier:t,rules:r}}(e),i=r.identifier,o=r.rules;t.push(i),n.push.apply(n,o)}})),{animationNames:t,rules:n}}var _e=["html{-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0);}","body{margin:0;}","button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0;}","input::-webkit-inner-spin-button,input::-webkit-outer-spin-button,input::-webkit-search-cancel-button,input::-webkit-search-decoration,input::-webkit-search-results-button,input::-webkit-search-results-decoration{display:none;}"],we=function(e){if(e(":focus:not([data-focusvisible-polyfill]){outline: none;}"),r.canUseDOM){var t=!0,n=!1,i=null,o={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};document.addEventListener("keydown",(function(e){"Tab"!==e.key&&(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)||(a(document.activeElement)&&s(document.activeElement),t=!0)}),!0),document.addEventListener("mousedown",u,!0),document.addEventListener("pointerdown",u,!0),document.addEventListener("touchstart",u,!0),document.addEventListener("focus",(function(e){var n,r,i,l;a(e.target)&&(t||(n=e.target,r=n.type,i=n.tagName,l=n.readOnly,"INPUT"===i&&o[r]&&!l||"TEXTAREA"===i&&!l||n.isContentEditable))&&s(e.target)}),!0),document.addEventListener("blur",(function(e){a(e.target)&&e.target.hasAttribute("data-focusvisible-polyfill")&&(n=!0,window.clearTimeout(i),i=window.setTimeout((function(){n=!1,window.clearTimeout(i)}),100),l(e.target))}),!0),document.addEventListener("visibilitychange",(function(e){"hidden"===document.visibilityState&&(n&&(t=!0),c())}),!0),c()}function a(e){return!!(e&&e!==document&&"HTML"!==e.nodeName&&"BODY"!==e.nodeName&&"classList"in e&&"contains"in e.classList)}function s(e){e.hasAttribute("data-focusvisible-polyfill")||e.setAttribute("data-focusvisible-polyfill",!0)}function l(e){e.removeAttribute("data-focusvisible-polyfill")}function u(e){!0===t&&function(){for(var e=document.querySelectorAll("[data-focusvisible-polyfill]"),t=0;t<e.length;t+=1)l(e[t])}(),t=!1}function c(){document.addEventListener("mousemove",f),document.addEventListener("mousedown",f),document.addEventListener("mouseup",f),document.addEventListener("pointermove",f),document.addEventListener("pointerdown",f),document.addEventListener("pointerup",f),document.addEventListener("touchmove",f),document.addEventListener("touchstart",f),document.addEventListener("touchend",f)}function f(e){"HTML"!==e.target.nodeName&&(t=!1,document.removeEventListener("mousemove",f),document.removeEventListener("mousedown",f),document.removeEventListener("mouseup",f),document.removeEventListener("pointermove",f),document.removeEventListener("pointerdown",f),document.removeEventListener("pointerup",f),document.removeEventListener("touchmove",f),document.removeEventListener("touchstart",f),document.removeEventListener("touchend",f))}};function Se(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Oe={};var Ee=function(e){return"rn-"+e},Te=function(e){return e.join(" ").trim()},ke=/-([a-z])/g,xe=function(e){for(var t,n=e.style,r=Array.prototype.slice.call(e.classList),i={},o=0;o<n.length;o+=1){var a=n.item(o);a&&(i[(t=a,t.replace(ke,(function(e){return e[1].toUpperCase()})))]=n.getPropertyValue(a))}return{classList:r,style:i}},Pe=function(){var e,t,n,i={css:{},ltr:{},rtl:{},rtlNoSwap:{}},o=function(){e={css:{},ltr:{},rtl:{},rtlNoSwap:{}},t=u(function(e){if(r.canUseDOM){var t=document.getElementById(e);if(null!=t)return t.sheet;var n=document.createElement("style");n.setAttribute("id",e);var i=document.head;return i&&i.insertBefore(n,i.firstChild),n.sheet}return null}(O.b)),n={byClassName:{},byProp:{}},we((function(e){return t.insert(e,O.c.modality)})),_e.forEach((function(e){t.insert(e,O.c.reset)}))};function a(r){var i=v.default.doLeftAndRightSwapInRTL,o=v.default.isRTL?i?"rtl":"rtlNoSwap":"ltr";if(!e[o][r]){var a=pe(s(S(Object(h.a)(r))));Object.keys(a).forEach((function(e){var r=a[e],i=r.identifier,o=r.property,s=r.rules,l=r.value;!function(e,t,r){n.byProp[t]||(n.byProp[t]={}),n.byProp[t][r]=e,n.byClassName[e]={prop:t,value:r}}(i,o,l),s.forEach((function(e){var n=O.c.custom[o]||O.c.atomic;t.insert(e,n)}))})),e[o][r]=!0}}function l(n,r){var o=[],s={};if(!n&&!r)return s;if(Array.isArray(r)&&p(r).forEach((function(n){if(n){if(null==e.css[n]&&null!=i.css[n]){var r=i.css[n];r.rules.forEach((function(e){t.insert(e,r.group)})),e.css[n]=!0}o.push(n)}})),"number"==typeof n)a(n),s=c(n,Ee(n));else if(Array.isArray(n)){for(var l=p(n),u=!0,f="",d=0;d<l.length;d++){var h=l[d];"number"!=typeof h?u=!1:(u&&(f+=h+"-"),a(h))}s=c(l,u?Ee(f):null)}else s=c(n);o.push.apply(o,s.classList);var v={className:Te(o),classList:o};return s.style&&(v.style=s.style),v}function c(e,r){var o=v.default.doLeftAndRightSwapInRTL,a=v.default.isRTL?o?"rtl":"rtlNoSwap":"ltr";if(null!=r&&null!=i[a][r])return i[a][r];var l=Object(h.a)(e),u=s(S(l)),c=Object.keys(u).sort().reduce((function(e,r){var i=u[r];if(null!=i){var o=function(e,t){var r=me(t,e),i=n.byProp;return i[e]&&i[e].hasOwnProperty(r)&&i[e][r]}(r,i);if(o)e.classList.push(o);else if("animationKeyframes"===r||"placeholderTextColor"===r||"pointerEvents"===r||"scrollbarWidth"===r){var a,s=pe(((a={})[r]=i,a));Object.values(s).forEach((function(n){var r=n.identifier,i=n.rules;e.classList.push(r),i.forEach((function(e){t.insert(e,O.c.atomic)}))}))}else e.style||(e.style={}),e.style[r]=i}return e}),{classList:[]});return c.style&&(c.style=ve(c.style)),null!=r&&(i[a][r]=c),c}return o(),{getStyleSheet:function(){var e=t.getTextContent();return r.canUseDOM||o(),{id:O.b,textContent:e}},createCSS:function(e,t){var n={};return Object.keys(e).forEach((function(r){var o=he(e[r],r);Object.values(o).forEach((function(e){var o=e.identifier,a=e.rules;i.css[o]={group:t||O.c.classic,rules:a},n[r]=o}))})),n},resolve:l,sheet:t,resolveWithNode:function(e,t){function r(e){return n.byClassName[e]||Oe}var i=xe(t),o=i.classList,a=i.style,s=o.reduce((function(e,t){var n=r(t),i=n.prop,o=n.value;return i?e.style[i]=o:e.classList.push(t),e}),{classList:[],style:{}}),u=s.classList,c=s.style,f=l([S(c),e]),d=f.classList,p=f.style,h=Te(d.concat(u)),v=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){Se(e,t,n[t])}))}return e}({},a);return d.forEach((function(e){var t=r(e).prop;v[t]&&(v[t]="")})),Object.assign(v,p),{className:h,style:v}}}}();t.a=Pe},function(e,t,n){"use strict";t.a=function(e){if(e&&(1===e.nodeType&&"function"==typeof e.getBoundingClientRect))return e.getBoundingClientRect()}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n={UNDETERMINED:0,FAILED:1,BEGAN:2,CANCELLED:3,ACTIVE:4,END:5,print:function(e){for(var t=Object.keys(n),r=0;r<t.length;r++)if(e===n[t[r]])return t[r]}};t.default=n},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.fireAfterInterval=function(e,t){if(!t)return e(),null;return setTimeout((function(){return e()}),t)};var n=t.isnan=function(e){return Number.isNaN(e)};t.isValidNumber=function(e){return"number"==typeof e&&!Number.isNaN(e)},t.TEST_MIN_IF_NOT_NAN=function(e,t){return!n(t)&&(t<0&&e<=t||t>=0&&e>=t)},t.VEC_LEN_SQ=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.x,n=void 0===t?0:t,r=e.y,i=void 0===r?0:r;return n*n+i*i},t.TEST_MAX_IF_NOT_NAN=function(e,t){return!n(t)&&(t<0&&e<t||t>=0&&e>t)}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(191)},function(e,t){function n(e,t,n){var r,i,o,a,s;function l(){var u=Date.now()-a;u<t&&u>=0?r=setTimeout(l,t-u):(r=null,n||(s=e.apply(o,i),o=i=null))}null==t&&(t=100);var u=function(){o=this,i=arguments,a=Date.now();var u=n&&!r;return r||(r=setTimeout(l,t)),u&&(s=e.apply(o,i),o=i=null),s};return u.clear=function(){r&&(clearTimeout(r),r=null)},u.flush=function(){r&&(s=e.apply(o,i),o=i=null,clearTimeout(r),r=null)},u}n.debounce=n,e.exports=n},function(e,t,n){"use strict";n.r(t);var r=n(36),i=(n(2),function(e,t){if(this.instancePool.length){var n=this.instancePool.pop();return this.call(n,e,t),n}return new this(e,t)}),o=function(e){e.destructor(),this.instancePool.length<this.poolSize&&this.instancePool.push(e)},a=i,s={addPoolingTo:function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||a,n.poolSize||(n.poolSize=10),n.release=o,n},twoArgumentPooler:i},l=s.twoArgumentPooler;function u(e,t){this.width=e,this.height=t}u.prototype.destructor=function(){this.width=null,this.height=null},u.getPooledFromElement=function(e){return u.getPooled(e.offsetWidth,e.offsetHeight)},s.addPoolingTo(u,l);var c=u,f=n(7),d=(n(66),s.twoArgumentPooler);function p(e,t){this.left=e,this.top=t}p.prototype.destructor=function(){this.left=null,this.top=null},s.addPoolingTo(p,d);var h=p,v=(n(1),n(110)),m=n.n(v),y=n(12);var g="NOT_RESPONDER",b="RESPONDER_INACTIVE_PRESS_IN",_="RESPONDER_INACTIVE_PRESS_OUT",w="RESPONDER_ACTIVE_PRESS_IN",S="RESPONDER_ACTIVE_PRESS_OUT",O="RESPONDER_ACTIVE_LONG_PRESS_IN",E="RESPONDER_ACTIVE_LONG_PRESS_OUT",T="ERROR",k={RESPONDER_ACTIVE_PRESS_OUT:!0,RESPONDER_ACTIVE_PRESS_IN:!0},x={RESPONDER_INACTIVE_PRESS_IN:!0,RESPONDER_ACTIVE_PRESS_IN:!0,RESPONDER_ACTIVE_LONG_PRESS_IN:!0},P={RESPONDER_ACTIVE_LONG_PRESS_IN:!0},C="DELAY",N="RESPONDER_GRANT",R="RESPONDER_RELEASE",A="RESPONDER_TERMINATED",I="ENTER_PRESS_RECT",j="LEAVE_PRESS_RECT",M="LONG_PRESS_DETECTED",D={NOT_RESPONDER:{DELAY:T,RESPONDER_GRANT:b,RESPONDER_RELEASE:T,RESPONDER_TERMINATED:T,ENTER_PRESS_RECT:T,LEAVE_PRESS_RECT:T,LONG_PRESS_DETECTED:T},RESPONDER_INACTIVE_PRESS_IN:{DELAY:w,RESPONDER_GRANT:T,RESPONDER_RELEASE:g,RESPONDER_TERMINATED:g,ENTER_PRESS_RECT:b,LEAVE_PRESS_RECT:_,LONG_PRESS_DETECTED:T},RESPONDER_INACTIVE_PRESS_OUT:{DELAY:S,RESPONDER_GRANT:T,RESPONDER_RELEASE:g,RESPONDER_TERMINATED:g,ENTER_PRESS_RECT:b,LEAVE_PRESS_RECT:_,LONG_PRESS_DETECTED:T},RESPONDER_ACTIVE_PRESS_IN:{DELAY:T,RESPONDER_GRANT:T,RESPONDER_RELEASE:g,RESPONDER_TERMINATED:g,ENTER_PRESS_RECT:w,LEAVE_PRESS_RECT:S,LONG_PRESS_DETECTED:O},RESPONDER_ACTIVE_PRESS_OUT:{DELAY:T,RESPONDER_GRANT:T,RESPONDER_RELEASE:g,RESPONDER_TERMINATED:g,ENTER_PRESS_RECT:w,LEAVE_PRESS_RECT:S,LONG_PRESS_DETECTED:T},RESPONDER_ACTIVE_LONG_PRESS_IN:{DELAY:T,RESPONDER_GRANT:T,RESPONDER_RELEASE:g,RESPONDER_TERMINATED:g,ENTER_PRESS_RECT:O,LEAVE_PRESS_RECT:E,LONG_PRESS_DETECTED:O},RESPONDER_ACTIVE_LONG_PRESS_OUT:{DELAY:T,RESPONDER_GRANT:T,RESPONDER_RELEASE:g,RESPONDER_TERMINATED:g,ENTER_PRESS_RECT:O,LEAVE_PRESS_RECT:E,LONG_PRESS_DETECTED:T},error:{DELAY:g,RESPONDER_GRANT:b,RESPONDER_RELEASE:g,RESPONDER_TERMINATED:g,ENTER_PRESS_RECT:g,LEAVE_PRESS_RECT:g,LONG_PRESS_DETECTED:g}},L={Mixin:{componentDidMount:function(){var e=this;this._touchableNode=Object(f.default)(this),this._touchableNode&&this._touchableNode.addEventListener&&(this._touchableBlurListener=function(t){e._isTouchableKeyboardActive&&(e.state.touchable.touchState&&e.state.touchable.touchState!==g&&e.touchableHandleResponderTerminate({nativeEvent:t}),e._isTouchableKeyboardActive=!1)},this._touchableNode.addEventListener("blur",this._touchableBlurListener))},componentWillUnmount:function(){this._touchableNode&&this._touchableNode.addEventListener&&this._touchableNode.removeEventListener("blur",this._touchableBlurListener),this.touchableDelayTimeout&&clearTimeout(this.touchableDelayTimeout),this.longPressDelayTimeout&&clearTimeout(this.longPressDelayTimeout),this.pressOutDelayTimeout&&clearTimeout(this.pressOutDelayTimeout)},touchableGetInitialState:function(){return{touchable:{touchState:void 0,responderID:null}}},touchableHandleResponderTerminationRequest:function(){return!this.props.rejectResponderTermination},touchableHandleStartShouldSetResponder:function(){return!this.props.disabled},touchableLongPressCancelsPress:function(){return!0},touchableHandleResponderGrant:function(e){var t=e.currentTarget;e.persist(),this.pressOutDelayTimeout&&clearTimeout(this.pressOutDelayTimeout),this.pressOutDelayTimeout=null,this.state.touchable.touchState=g,this.state.touchable.responderID=t,this._receiveSignal(N,e);var n=void 0!==this.touchableGetHighlightDelayMS?Math.max(this.touchableGetHighlightDelayMS(),0):130;0!==(n=isNaN(n)?130:n)?this.touchableDelayTimeout=setTimeout(this._handleDelay.bind(this,e),n):(this.state.touchable.positionOnActivate=null,this._handleDelay(e));var r=void 0!==this.touchableGetLongPressDelayMS?Math.max(this.touchableGetLongPressDelayMS(),10):370;r=isNaN(r)?370:r,this.longPressDelayTimeout=setTimeout(this._handleLongDelay.bind(this,e),r+n)},touchableHandleResponderRelease:function(e){this._receiveSignal(R,e)},touchableHandleResponderTerminate:function(e){this._receiveSignal(A,e)},touchableHandleResponderMove:function(e){if(this.state.touchable.touchState!==b&&this.state.touchable.positionOnActivate){var t=this.state.touchable.positionOnActivate,n=this.state.touchable.dimensionsOnActivate,r=this.touchableGetPressRectOffset?this.touchableGetPressRectOffset():{left:20,right:20,top:20,bottom:20},i=r.left,o=r.top,a=r.right,s=r.bottom,l=this.touchableGetHitSlop?this.touchableGetHitSlop():null;l&&(i+=l.left,o+=l.top,a+=l.right,s+=l.bottom);var u=m.a.extractSingleTouch(e.nativeEvent),c=u&&u.pageX,f=u&&u.pageY;if(this.pressInLocation)this._getDistanceBetweenPoints(c,f,this.pressInLocation.pageX,this.pressInLocation.pageY)>10&&this._cancelLongPressDelayTimeout();if(c>t.left-i&&f>t.top-o&&c<t.left+n.width+a&&f<t.top+n.height+s)this._receiveSignal(I,e),this.state.touchable.touchState===b&&this._cancelLongPressDelayTimeout();else this._cancelLongPressDelayTimeout(),this._receiveSignal(j,e)}},_remeasureMetricsOnActivation:function(){var e=this.state.touchable.responderID;null!=e&&y.a.measure(e,this._handleQueryLayout)},_handleQueryLayout:function(e,t,n,r,i,o){(e||t||n||r||i||o)&&(this.state.touchable.positionOnActivate&&h.release(this.state.touchable.positionOnActivate),this.state.touchable.dimensionsOnActivate&&c.release(this.state.touchable.dimensionsOnActivate),this.state.touchable.positionOnActivate=h.getPooled(i,o),this.state.touchable.dimensionsOnActivate=c.getPooled(n,r))},_handleDelay:function(e){this.touchableDelayTimeout=null,this._receiveSignal(C,e)},_handleLongDelay:function(e){this.longPressDelayTimeout=null;var t=this.state.touchable.touchState;t!==w&&t!==O?console.error("Attempted to transition from state `"+t+"` to `"+O+"`, which is not supported. This is most likely due to `Touchable.longPressDelayTimeout` not being cancelled."):this._receiveSignal(M,e)},_receiveSignal:function(e,t){var n=this.state.touchable.responderID,r=this.state.touchable.touchState,i=D[r]&&D[r][e];if(n||e!==R){if(!i)throw new Error("Unrecognized signal `"+e+"` or state `"+r+"` for Touchable responder `"+n+"`");if(i===T)throw new Error("Touchable cannot transition from `"+r+"` to `"+e+"` for responder `"+n+"`");r!==i&&(this._performSideEffectsForTransition(r,i,e,t),this.state.touchable.touchState=i)}},_cancelLongPressDelayTimeout:function(){this.longPressDelayTimeout&&clearTimeout(this.longPressDelayTimeout),this.longPressDelayTimeout=null},_isHighlight:function(e){return e===w||e===O},_savePressInLocation:function(e){var t=m.a.extractSingleTouch(e.nativeEvent),n=t&&t.pageX,r=t&&t.pageY;this.pressInLocation={pageX:n,pageY:r,get locationX(){return t&&t.locationX},get locationY(){return t&&t.locationY}}},_getDistanceBetweenPoints:function(e,t,n,r){var i=e-n,o=t-r;return Math.sqrt(i*i+o*o)},_performSideEffectsForTransition:function(e,t,n,r){var i=this._isHighlight(e),o=this._isHighlight(t);if((n===A||n===R)&&this._cancelLongPressDelayTimeout(),!k[e]&&k[t]&&this._remeasureMetricsOnActivation(),x[e]&&n===M&&this.touchableHandleLongPress&&this.touchableHandleLongPress(r),o&&!i?this._startHighlight(r):!o&&i&&this._endHighlight(r),x[e]&&n===R){var a=!!this.props.onLongPress,s=P[e]&&(!a||!this.touchableLongPressCancelsPress());(!P[e]||s)&&this.touchableHandlePress&&(o||i||(this._startHighlight(r),this._endHighlight(r)),this.touchableHandlePress(r))}this.touchableDelayTimeout&&clearTimeout(this.touchableDelayTimeout),this.touchableDelayTimeout=null},_startHighlight:function(e){this._savePressInLocation(e),this.touchableHandleActivePressIn&&this.touchableHandleActivePressIn(e)},_endHighlight:function(e){var t=this;this.touchableHandleActivePressOut&&(this.touchableGetPressOutDelayMS&&this.touchableGetPressOutDelayMS()?this.pressOutDelayTimeout=setTimeout((function(){t.touchableHandleActivePressOut(e)}),this.touchableGetPressOutDelayMS()):this.touchableHandleActivePressOut(e))},touchableHandleKeyEvent:function(e){var t=e.type,n=e.which;13!==n&&32!==n||("keydown"===t?this._isTouchableKeyboardActive||this.state.touchable.touchState&&this.state.touchable.touchState!==g||(this.touchableHandleResponderGrant(e),this._isTouchableKeyboardActive=!0):"keyup"===t&&this._isTouchableKeyboardActive&&this.state.touchable.touchState&&this.state.touchable.touchState!==g&&(this.touchableHandleResponderRelease(e),this._isTouchableKeyboardActive=!1),e.stopPropagation(),13===n&&"link"===r.a.propsToAriaRole(this.props)||e.preventDefault())}},TOUCH_TARGET_DEBUG:!1,renderDebugView:function(e){e.color,e.hitSlop}};t.default=L},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){e.exports={get StateUtils(){return n(122).default},get getNavigation(){return n(213).default},get createNavigator(){return n(126).default},get NavigationContext(){return n(61).default},get NavigationProvider(){return n(61).default.Provider},get NavigationConsumer(){return n(61).default.Consumer},get createSwitchNavigator(){return n(220).default},get ThemeContext(){return n(60).default},get ThemeProvider(){return n(60).default.Provider},get ThemeConsumer(){return n(60).default.Consumer},get ThemeColors(){return n(236).default},get useTheme(){return n(237).default},get NavigationActions(){return n(59)},get StackActions(){return n(130)},get SwitchActions(){return n(127)},get StackRouter(){return n(238).default},get TabRouter(){return n(240).default},get SwitchRouter(){return n(89).default},get createConfigGetter(){return n(91).default},get getScreenForRouteName(){return n(76).default},get validateRouteConfigMap(){return n(92).default},get getActiveChildNavigationOptions(){return n(242).default},get pathUtils(){return n(93)},get SceneView(){return n(129).default},get SwitchView(){return n(128).default},get NavigationEvents(){return n(243).default},get withNavigation(){return n(94).default},get withNavigationFocus(){return n(244).default}}},function(e,t,n){var r,i,o,a;Object.defineProperty(t,"__esModule",{value:!0}),t.HammerDirectionNames=t.HammerInputNames=t.DirectionMap=t.Direction=t.EventMap=t.DEG_RAD=t.MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD=t.MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD=t.CONTENT_TOUCHES_QUICK_TAP_END_DELAY=t.CONTENT_TOUCHES_DELAY=void 0;var s=u(n(37)),l=u(n(43));function u(e){return e&&e.__esModule?e:{default:e}}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}t.CONTENT_TOUCHES_DELAY=240,t.CONTENT_TOUCHES_QUICK_TAP_END_DELAY=50,t.MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD=.1,t.MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD=7,t.DEG_RAD=Math.PI/180,t.EventMap=(c(r={},s.default.INPUT_START,l.default.BEGAN),c(r,s.default.INPUT_MOVE,l.default.ACTIVE),c(r,s.default.INPUT_END,l.default.END),c(r,s.default.INPUT_CANCEL,l.default.FAILED),r);var f=t.Direction={RIGHT:1,LEFT:2,UP:4,DOWN:8};t.DirectionMap=(c(i={},s.default.DIRECTION_RIGHT,f.RIGHT),c(i,s.default.DIRECTION_LEFT,f.LEFT),c(i,s.default.DIRECTION_UP,f.UP),c(i,s.default.DIRECTION_DOWN,f.DOWN),i),t.HammerInputNames=(c(o={},s.default.INPUT_START,"START"),c(o,s.default.INPUT_MOVE,"MOVE"),c(o,s.default.INPUT_END,"END"),c(o,s.default.INPUT_CANCEL,"CANCEL"),o),t.HammerDirectionNames=(c(a={},s.default.DIRECTION_HORIZONTAL,"HORIZONTAL"),c(a,s.default.DIRECTION_UP,"UP"),c(a,s.default.DIRECTION_DOWN,"DOWN"),c(a,s.default.DIRECTION_VERTICAL,"VERTICAL"),c(a,s.default.DIRECTION_NONE,"NONE"),c(a,s.default.DIRECTION_ALL,"ALL"),c(a,s.default.DIRECTION_RIGHT,"RIGHT"),c(a,s.default.DIRECTION_LEFT,"LEFT"),a)},function(e,t,n){var r=n(283);e.exports=function(e,t){if(null==e)return{};var n,i,o=r(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}},function(e,t,n){"use strict";var r,i=n(9),o=n(46),a=n.n(o),s=n(7),l={},u={},c=1,f=function(){return"r-"+c++};if(i.canUseDOM)if(void 0!==window.ResizeObserver)r=new window.ResizeObserver((function(e){e.forEach((function(e){var t=e.target,n=u[t._layoutId];n&&n._handleLayout()}))}));else{0;window.addEventListener("resize",a()((function(){Object.keys(u).forEach((function(e){u[e]._handleLayout()}))}),16),!1)}var d=function(e){var t=f();if(u[t]=e,r){var n=Object(s.default)(e);n&&(n._layoutId=t,r.observe(n))}else e._layoutId=t,e._handleLayout()},p=function(e){if(r){var t=Object(s.default)(e);t&&(delete u[t._layoutId],delete t._layoutId,r.unobserve(t))}else delete u[e._layoutId],delete e._layoutId},h=function(e,t){return e?function(){e.call(this,arguments),t.call(this,arguments)}:t};t.a=function(e){var t=e.prototype.componentDidMount,n=e.prototype.componentDidUpdate,r=e.prototype.componentWillUnmount;return e.prototype.componentDidMount=h(t,(function(){this._layoutState=l,this._isMounted=!0,this.props.onLayout&&d(this)})),e.prototype.componentDidUpdate=h(n,(function(e){this.props.onLayout&&!e.onLayout?d(this):!this.props.onLayout&&e.onLayout&&p(this)})),e.prototype.componentWillUnmount=h(r,(function(){this._isMounted=!1,this.props.onLayout&&p(this)})),e.prototype._handleLayout=function(){var e=this,t=this._layoutState,n=this.props.onLayout;n&&this.measure((function(r,i,o,a){if(e._isMounted&&(t.x!==r||t.y!==i||t.width!==o||t.height!==a)){e._layoutState={x:r,y:i,width:o,height:a};var l={layout:e._layoutState};Object.defineProperty(l,"target",{enumerable:!0,get:function(){return Object(s.default)(e)}}),n({nativeEvent:l,timeStamp:Date.now()})}}))},e}},function(e,t,n){"use strict";var r=n(1),i=n(199);if(void 0===r)throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");var o=(new r.Component).updater;e.exports=i(r.Component,r.isValidElement,o)},function(e,t,n){"use strict";var r=n(6),i=function(){function e(){}var t=e.prototype;return t.start=function(e,t,n,r,i){},t.stop=function(){this.__nativeId&&r.a.API.stopAnimation(this.__nativeId)},t.__getNativeAnimationConfig=function(){throw new Error("This animation type cannot be offloaded to native")},t.__debouncedOnEnd=function(e){var t=this.__onEnd;this.__onEnd=null,t&&t(e)},t.__startNativeAnimation=function(e){e.__makeNative(),this.__nativeId=r.a.generateNewAnimationId(),r.a.API.startAnimatingNode(this.__nativeId,e.__getNativeTag(),this.__getNativeAnimationConfig(),this.__debouncedOnEnd.bind(this))},e}();t.a=i},function(e,t,n){"use strict";var r=function(e){return"currentcolor"===e||"currentColor"===e||"inherit"===e||0===e.indexOf("var(")},i=n(107);t.a=function(e,t){if(void 0===t&&(t=1),null!=e){if("string"==typeof e&&r(e))return e;var n=Object(i.default)(e);if(null!=n)return"rgba("+(n>>16&255)+","+(n>>8&255)+","+(255&n)+","+((n>>24&255)/255*t).toFixed(2)+")"}}},function(e,t,n){"use strict";var r=/^[+-]?\d*(?:\.\d+)?(?:[Ee][+-]?\d+)?(%|\w*)/;t.a=function(e,t){var n;return"string"==typeof e?""+parseFloat(e)*t+e.match(r)[1]:(n=e,!isNaN(parseFloat(n))&&isFinite(n)?e*t:void 0)}},function(e,t,n){"use strict";var r=n(74),i=function(){function e(e,t){this._delay=t,this._callback=e}var t=e.prototype;return t.dispose=function(e){void 0===e&&(e={abort:!1}),this._taskHandle&&(this._taskHandle.cancel(),e.abort||this._callback(),this._taskHandle=null)},t.schedule=function(){var e=this;if(!this._taskHandle){var t=setTimeout((function(){e._taskHandle=r.a.runAfterInteractions((function(){e._taskHandle=null,e._callback()}))}),this._delay);this._taskHandle={cancel:function(){return clearTimeout(t)}}}},e}(),o=n(86),a=n.n(o),s=n(34),l=n.n(s);function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(){this.any_blank_count=0,this.any_blank_ms=0,this.any_blank_speed_sum=0,this.mostly_blank_count=0,this.mostly_blank_ms=0,this.pixels_blank=0,this.pixels_sampled=0,this.pixels_scrolled=0,this.total_time_spent=0,this.sample_count=0},f=[],d=10,p=null,h=function(){function e(e){this._anyBlankStartTime=null,this._enabled=!1,this._info=new c,this._mostlyBlankStartTime=null,this._samplesStartTime=null,this._getFrameMetrics=e,this._enabled=(p||0)>Math.random(),this._resetData()}e.addListener=function(e){return l()(null!==p,"Call `FillRateHelper.setSampleRate` before `addListener`."),f.push(e),{remove:function(){f=f.filter((function(t){return e!==t}))}}},e.setSampleRate=function(e){p=e},e.setMinSampleCount=function(e){d=e};var t=e.prototype;return t.activate=function(){this._enabled&&null==this._samplesStartTime&&(this._samplesStartTime=a()())},t.deactivateAndFlush=function(){if(this._enabled){var e=this._samplesStartTime;if(null!=e)if(this._info.sample_count<d)this._resetData();else{var t=a()()-e,n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){u(e,t,n[t])}))}return e}({},this._info,{total_time_spent:t});f.forEach((function(e){return e(n)})),this._resetData()}}},t.computeBlankness=function(e,t,n){if(!this._enabled||0===e.getItemCount(e.data)||null==this._samplesStartTime)return 0;var r=n.dOffset,i=n.offset,o=n.velocity,s=n.visibleLength;this._info.sample_count++,this._info.pixels_sampled+=Math.round(s),this._info.pixels_scrolled+=Math.round(Math.abs(r));var l=Math.round(1e3*Math.abs(o)),u=a()();null!=this._anyBlankStartTime&&(this._info.any_blank_ms+=u-this._anyBlankStartTime),this._anyBlankStartTime=null,null!=this._mostlyBlankStartTime&&(this._info.mostly_blank_ms+=u-this._mostlyBlankStartTime),this._mostlyBlankStartTime=null;for(var c=0,f=t.first,d=this._getFrameMetrics(f);f<=t.last&&(!d||!d.inLayout);)d=this._getFrameMetrics(f),f++;d&&f>0&&(c=Math.min(s,Math.max(0,d.offset-i)));for(var p=0,h=t.last,v=this._getFrameMetrics(h);h>=t.first&&(!v||!v.inLayout);)v=this._getFrameMetrics(h),h--;if(v&&h<e.getItemCount(e.data)-1){var m=v.offset+v.length;p=Math.min(s,Math.max(0,i+s-m))}var y=Math.round(c+p),g=y/s;return g>0?(this._anyBlankStartTime=u,this._info.any_blank_speed_sum+=l,this._info.any_blank_count++,this._info.pixels_blank+=y,g>.5&&(this._mostlyBlankStartTime=u,this._info.mostly_blank_count++)):(l<.01||Math.abs(r)<1)&&this.deactivateAndFlush(),g},t.enabled=function(){return this._enabled},t._resetData=function(){this._anyBlankStartTime=null,this._info=new c,this._mostlyBlankStartTime=null,this._samplesStartTime=null},e}(),v=n(0),m=n.n(v),y=n(1),g=n.n(y),b=n(63),_=n(38),w=n(4),S=n(12),O=n(3),E=n(2),T=n.n(E);function k(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){x(e,t,n[t])}))}return e}function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function P(e,t,n,r,i,o){if(function(e,t,n){return e>=0&&t<=n&&t>e}(n,r,i))return!0;var a=function(e,t,n){var r=Math.min(t,n)-Math.max(e,0);return Math.max(0,r)}(n,r,i);return 100*(e?a/i:a/o)>=t}var C=function(){function e(e){void 0===e&&(e={viewAreaCoveragePercentThreshold:0}),this._hasInteracted=!1,this._timers=new Set,this._viewableIndices=[],this._viewableItems=new Map,this._config=e}var t=e.prototype;return t.dispose=function(){this._timers.forEach(clearTimeout)},t.computeViewableItems=function(e,t,n,r,i){var o=this._config,a=o.itemVisiblePercentThreshold,s=o.viewAreaCoveragePercentThreshold,l=null!=s,u=l?s:a;T()(null!=u&&null!=a!=(null!=s),"Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold");var c=[];if(0===e)return c;var f=-1,d=i||{first:0,last:e-1},p=d.first,h=d.last;T()(h<e,"Invalid render range "+JSON.stringify({renderRange:i,itemCount:e}));for(var v=p;v<=h;v++){var m=r(v);if(m){var y=m.offset-t,g=y+m.length;if(y<n&&g>0)f=v,P(l,u,y,g,n,m.length)&&c.push(v);else if(f>=0)break}}return c},t.onUpdate=function(e,t,n,r,i,o,a){var s=this;if((!this._config.waitForInteraction||this._hasInteracted)&&0!==e&&r(0)){var l=[];if(e&&(l=this.computeViewableItems(e,t,n,r,a)),this._viewableIndices.length!==l.length||!this._viewableIndices.every((function(e,t){return e===l[t]})))if(this._viewableIndices=l,this._config.minimumViewTime){var u=setTimeout((function(){s._timers.delete(u),s._onUpdateSync(l,o,i)}),this._config.minimumViewTime);this._timers.add(u)}else this._onUpdateSync(l,o,i)}},t.resetViewableIndices=function(){this._viewableIndices=[]},t.recordInteraction=function(){this._hasInteracted=!0},t._onUpdateSync=function(e,t,n){var r=this;e=e.filter((function(e){return r._viewableIndices.includes(e)}));var i=this._viewableItems,o=new Map(e.map((function(e){var t=n(e,!0);return[t.key,t]}))),a=[],s=o,l=Array.isArray(s),u=0;for(s=l?s:s[Symbol.iterator]();;){var c;if(l){if(u>=s.length)break;c=s[u++]}else{if((u=s.next()).done)break;c=u.value}var f=c,d=f[0],p=f[1];i.has(d)||a.push(p)}var h=i,v=Array.isArray(h),m=0;for(h=v?h:h[Symbol.iterator]();;){var y;if(v){if(m>=h.length)break;y=h[m++]}else{if((m=h.next()).done)break;y=m.value}var g=y;d=g[0],p=g[1];o.has(d)||a.push(k({},p,{isViewable:!1}))}a.length>0&&(this._viewableItems=o,t({viewableItems:Array.from(o.values()),changed:a,viewabilityConfig:this._config}))},e}();function N(e,t,n){for(var r=[],i=0,o=0;o<t;o++)for(var a=n(o),s=a.offset+a.length,l=0;l<e.length;l++)if(null==r[l]&&s>=e[l]&&(r[l]=o,i++,l===e.length-1))return T()(i===e.length,"bad offsets input, should be in increasing order: %s",JSON.stringify(e)),r;return r}function R(e,t){return t.last-t.first+1-Math.max(0,1+Math.min(t.last,e.last)-Math.max(t.first,e.first))}function A(e,t,n,r){var i=e.data,o=e.getItemCount,a=e.maxToRenderPerBatch,s=e.windowSize,l=o(i);if(0===l)return t;var u=r.offset,c=r.velocity,f=r.visibleLength,d=Math.max(0,u),p=d+f,h=(s-1)*f,v=c>1?"after":c<-1?"before":"none",m=Math.max(0,d-.5*h),y=Math.max(0,p+.5*h);if(n(l-1).offset<m)return{first:Math.max(0,l-1-a),last:l-1};var g=N([m,d,p,y],e.getItemCount(e.data),n),b=g[0],_=g[1],w=g[2],S=g[3];b=null==b?0:b,S=null==S?l-1:S;for(var O={first:_=null==_?Math.max(0,b):_,last:w=null==w?Math.min(S,_+a-1):w},E=R(t,O);!(_<=b&&w>=S);){var T=E>=a,k=_<=t.first||_>t.last,x=_>b&&(!T||!k),P=w>=t.last||w<t.first,C=w<S&&(!T||!P);if(T&&!x&&!C)break;!x||"after"===v&&C&&P||(k&&E++,_--),!C||"before"===v&&x&&k||(P&&E++,w++)}if(!(w>=_&&_>=0&&w<l&&_>=b&&w<=S&&_<=O.first&&w>=O.last))throw new Error("Bad window calculation "+JSON.stringify({first:_,last:w,itemCount:l,overscanFirst:b,overscanLast:S,visible:O}));return{first:_,last:w}}var I=n(7);var j=function(){var e;return(e=console).log.apply(e,arguments)};function M(){return(M=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function D(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){L(e,t,n[t])}))}return e}function L(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function F(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function V(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}w.default.flatten;var H=!1,B=function(e){F(n,e);var t=n.prototype;function n(t,n){var r;(r=e.call(this,t,n)||this)._getScrollMetrics=function(){return r._scrollMetrics},r._getOutermostParentListRef=function(){return r._isNestedWithSameOrientation()?r.context.virtualizedList.getOutermostParentListRef():V(V(r))},r._getNestedChildState=function(e){var t=r._nestedChildLists.get(e);return t&&t.state},r._registerAsNestedChild=function(e){var t=r._cellKeysToChildListKeys.get(e.cellKey)||new Set;t.add(e.key),r._cellKeysToChildListKeys.set(e.cellKey,t);var n=r._nestedChildLists.get(e.key);T()(!(n&&null!==n.ref),"A VirtualizedList contains a cell which itself contains more than one VirtualizedList of the same orientation as the parent list. You must pass a unique listKey prop to each sibling list."),r._nestedChildLists.set(e.key,{ref:e.ref,state:null}),r._hasInteracted&&e.ref.recordInteraction()},r._unregisterAsNestedChild=function(e){r._nestedChildLists.set(e.key,{ref:null,state:e.state})},r._onUpdateSeparators=function(e,t){e.forEach((function(e){var n=null!=e&&r._cellRefs[e];n&&n.updateSeparatorProps(t)}))},r._averageCellLength=0,r._cellKeysToChildListKeys=new Map,r._cellRefs={},r._frames={},r._footerLength=0,r._hasDataChangedSinceEndReached=!0,r._hasInteracted=!1,r._hasMore=!1,r._hasWarned={},r._highestMeasuredFrameIndex=0,r._headerLength=0,r._indicesToKeys=new Map,r._hasDoneInitialScroll=!1,r._nestedChildLists=new Map,r._offsetFromParentVirtualizedList=0,r._prevParentOffset=0,r._scrollMetrics={contentLength:0,dOffset:0,dt:10,offset:0,timestamp:0,velocity:0,visibleLength:0},r._scrollRef=null,r._sentEndForContentLength=0,r._totalCellLength=0,r._totalCellsMeasured=0,r._viewabilityTuples=[],r._captureScrollRef=function(e){r._scrollRef=e},r._defaultRenderScrollComponent=function(e){return r._isNestedWithSameOrientation()?g.a.createElement(O.default,e):e.onRefresh?(T()("boolean"==typeof e.refreshing,"`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `"+JSON.stringify(e.refreshing)+"`"),g.a.createElement(_.default,M({},e,{refreshControl:g.a.createElement(b.default,{refreshing:e.refreshing,onRefresh:e.onRefresh,progressViewOffset:e.progressViewOffset})}))):g.a.createElement(_.default,e)},r._onCellUnmount=function(e){var t=r._frames[e];t&&(r._frames[e]=D({},t,{inLayout:!1}))},r._onLayout=function(e){r._isNestedWithSameOrientation()?r._measureLayoutRelativeToContainingList():r._scrollMetrics.visibleLength=r._selectLength(e.nativeEvent.layout),r.props.onLayout&&r.props.onLayout(e),r._scheduleCellsToRenderUpdate(),r._maybeCallOnEndReached()},r._onLayoutEmpty=function(e){r.props.onLayout&&r.props.onLayout(e)},r._onLayoutFooter=function(e){r._footerLength=r._selectLength(e.nativeEvent.layout)},r._onLayoutHeader=function(e){r._headerLength=r._selectLength(e.nativeEvent.layout)},r._onContentSizeChange=function(e,t){e>0&&t>0&&null!=r.props.initialScrollIndex&&r.props.initialScrollIndex>0&&!r._hasDoneInitialScroll&&(r.scrollToIndex({animated:!1,index:r.props.initialScrollIndex}),r._hasDoneInitialScroll=!0),r.props.onContentSizeChange&&r.props.onContentSizeChange(e,t),r._scrollMetrics.contentLength=r._selectLength({height:t,width:e}),r._scheduleCellsToRenderUpdate(),r._maybeCallOnEndReached()},r._convertParentScrollMetrics=function(e){var t=e.offset-r._offsetFromParentVirtualizedList,n=e.visibleLength,i=t-r._scrollMetrics.offset;return{visibleLength:n,contentLength:r._scrollMetrics.contentLength,offset:t,dOffset:i}},r._onScroll=function(e){r._nestedChildLists.forEach((function(t){t.ref&&t.ref._onScroll(e)})),r.props.onScroll&&r.props.onScroll(e);var t=e.timeStamp,n=r._selectLength(e.nativeEvent.layoutMeasurement),i=r._selectLength(e.nativeEvent.contentSize),o=r._selectOffset(e.nativeEvent.contentOffset),a=o-r._scrollMetrics.offset;if(r._isNestedWithSameOrientation()){if(0===r._scrollMetrics.contentLength)return;var s=r._convertParentScrollMetrics({visibleLength:n,offset:o});n=s.visibleLength,i=s.contentLength,o=s.offset,a=s.dOffset}var l=r._scrollMetrics.timestamp?Math.max(1,t-r._scrollMetrics.timestamp):1,u=a/l;l>500&&r._scrollMetrics.dt>500&&i>5*n&&!r._hasWarned.perf&&(j("VirtualizedList: You have a large list that is slow to update - make sure your renderItem function renders components that follow React performance best practices like PureComponent, shouldComponentUpdate, etc.",{dt:l,prevDt:r._scrollMetrics.dt,contentLength:i}),r._hasWarned.perf=!0),r._scrollMetrics={contentLength:i,dt:l,dOffset:a,offset:o,timestamp:t,velocity:u,visibleLength:n},r._updateViewableItems(r.props.data),r.props&&(r._maybeCallOnEndReached(),0!==u&&r._fillRateHelper.activate(),r._computeBlankness(),r._scheduleCellsToRenderUpdate())},r._onScrollBeginDrag=function(e){r._nestedChildLists.forEach((function(t){t.ref&&t.ref._onScrollBeginDrag(e)})),r._viewabilityTuples.forEach((function(e){e.viewabilityHelper.recordInteraction()})),r._hasInteracted=!0,r.props.onScrollBeginDrag&&r.props.onScrollBeginDrag(e)},r._onScrollEndDrag=function(e){var t=e.nativeEvent.velocity;t&&(r._scrollMetrics.velocity=r._selectOffset(t)),r._computeBlankness(),r.props.onScrollEndDrag&&r.props.onScrollEndDrag(e)},r._onMomentumScrollEnd=function(e){r._scrollMetrics.velocity=0,r._computeBlankness(),r.props.onMomentumScrollEnd&&r.props.onMomentumScrollEnd(e)},r._updateCellsToRender=function(){var e=r.props,t=e.data,n=e.getItemCount,i=e.onEndReachedThreshold,o=r._isVirtualizationDisabled();r._updateViewableItems(t),t&&r.setState((function(e){var a;if(o){var s=r._scrollMetrics,l=s.contentLength,u=s.offset,c=s.visibleLength,f=l-c-u<i*c?r.props.maxToRenderPerBatch:0;a={first:0,last:Math.min(e.last+f,n(t)-1)}}else r._scrollMetrics.visibleLength&&(r.props.initialScrollIndex&&!r._scrollMetrics.offset||(a=A(r.props,e,r._getFrameMetricsApprox,r._scrollMetrics)));if(a&&r._nestedChildLists.size>0)for(var d=a.first,p=a.last,h=d;h<=p;h++){var v=r._indicesToKeys.get(h),m=v&&r._cellKeysToChildListKeys.get(v);if(m){var y=!1,g=m,b=Array.isArray(g),_=0;for(g=b?g:g[Symbol.iterator]();;){var w;if(b){if(_>=g.length)break;w=g[_++]}else{if((_=g.next()).done)break;w=_.value}var S=w,O=r._nestedChildLists.get(S);if(O&&O.ref&&O.ref.hasMore()){y=!0;break}}if(y){a.last=h;break}}}return a}))},r._createViewToken=function(e,t){var n=r.props,i=n.data,o=n.getItem,a=n.keyExtractor,s=o(i,e);return{index:e,item:s,key:a(s,e),isViewable:t}},r._getFrameMetricsApprox=function(e){var t=r._getFrameMetrics(e);if(t&&t.index===e)return t;var n=r.props.getItemLayout;return T()(!n,"Should not have to estimate frames when a measurement metrics function is provided"),{length:r._averageCellLength,offset:r._averageCellLength*e}},r._getFrameMetrics=function(e){var t=r.props,n=t.data,i=t.getItem,o=t.getItemCount,a=t.getItemLayout,s=t.keyExtractor;T()(o(n)>e,"Tried to get frame for out of range index "+e);var l=i(n,e),u=l&&r._frames[s(l,e)];u&&u.index===e||a&&(u=a(n,e));return u},T()(!t.onScroll||!t.onScroll.__isNative,"Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent to support native onScroll events with useNativeDriver"),T()(t.windowSize>0,"VirtualizedList: The windowSize prop must be present and set to a value greater than 0."),r._fillRateHelper=new h(r._getFrameMetrics),r._updateCellsToRenderBatcher=new i(r._updateCellsToRender,r.props.updateCellsBatchingPeriod),r.props.viewabilityConfigCallbackPairs?r._viewabilityTuples=r.props.viewabilityConfigCallbackPairs.map((function(e){return{viewabilityHelper:new C(e.viewabilityConfig),onViewableItemsChanged:e.onViewableItemsChanged}})):r.props.onViewableItemsChanged&&r._viewabilityTuples.push({viewabilityHelper:new C(r.props.viewabilityConfig),onViewableItemsChanged:r.props.onViewableItemsChanged});var o={first:r.props.initialScrollIndex||0,last:Math.min(r.props.getItemCount(r.props.data),(r.props.initialScrollIndex||0)+r.props.initialNumToRender)-1};if(r._isNestedWithSameOrientation()){var a=r.context.virtualizedList.getNestedChildState(r.props.listKey||r._getCellKey());a&&(o=a,r.state=a,r._frames=a.frames)}return r.state=o,r}return t.scrollToEnd=function(e){var t=!e||e.animated,n=this.props.getItemCount(this.props.data)-1,r=this._getFrameMetricsApprox(n),i=Math.max(0,r.offset+r.length+this._footerLength-this._scrollMetrics.visibleLength);this._scrollRef.scrollTo(this.props.horizontal?{x:i,animated:t}:{y:i,animated:t})},t.scrollToIndex=function(e){var t=this.props,n=t.data,r=t.horizontal,i=t.getItemCount,o=t.getItemLayout,a=t.onScrollToIndexFailed,s=e.animated,l=e.index,u=e.viewOffset,c=e.viewPosition;if(T()(l>=0&&l<i(n),"scrollToIndex out of range: "+l+" vs "+(i(n)-1)),!o&&l>this._highestMeasuredFrameIndex)return T()(!!a,"scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, otherwise there is no way to know the location of offscreen indices or handle failures."),void a({averageItemLength:this._averageCellLength,highestMeasuredFrameIndex:this._highestMeasuredFrameIndex,index:l});var f=this._getFrameMetricsApprox(l),d=Math.max(0,f.offset-(c||0)*(this._scrollMetrics.visibleLength-f.length))-(u||0);this._scrollRef.scrollTo(r?{x:d,animated:s}:{y:d,animated:s})},t.scrollToItem=function(e){for(var t=e.item,n=this.props,r=n.data,i=n.getItem,o=(0,n.getItemCount)(r),a=0;a<o;a++)if(i(r,a)===t){this.scrollToIndex(D({},e,{index:a}));break}},t.scrollToOffset=function(e){var t=e.animated,n=e.offset;this._scrollRef.scrollTo(this.props.horizontal?{x:n,animated:t}:{y:n,animated:t})},t.recordInteraction=function(){this._nestedChildLists.forEach((function(e){e.ref&&e.ref.recordInteraction()})),this._viewabilityTuples.forEach((function(e){e.viewabilityHelper.recordInteraction()})),this._updateViewableItems(this.props.data)},t.flashScrollIndicators=function(){this._scrollRef.flashScrollIndicators()},t.getScrollResponder=function(){if(this._scrollRef&&this._scrollRef.getScrollResponder)return this._scrollRef.getScrollResponder()},t.getScrollableNode=function(){return this._scrollRef&&this._scrollRef.getScrollableNode?this._scrollRef.getScrollableNode():Object(I.default)(this._scrollRef)},t.setNativeProps=function(e){this._scrollRef&&this._scrollRef.setNativeProps(e)},t.getChildContext=function(){return{virtualizedList:{getScrollMetrics:this._getScrollMetrics,horizontal:this.props.horizontal,getOutermostParentListRef:this._getOutermostParentListRef,getNestedChildState:this._getNestedChildState,registerAsNestedChild:this._registerAsNestedChild,unregisterAsNestedChild:this._unregisterAsNestedChild}}},t._getCellKey=function(){return this.context.virtualizedCell&&this.context.virtualizedCell.cellKey||"rootList"},t.hasMore=function(){return this._hasMore},t.componentDidMount=function(){this._isNestedWithSameOrientation()&&this.context.virtualizedList.registerAsNestedChild({cellKey:this._getCellKey(),key:this.props.listKey||this._getCellKey(),ref:this})},t.componentWillUnmount=function(){this._isNestedWithSameOrientation()&&this.context.virtualizedList.unregisterAsNestedChild({key:this.props.listKey||this._getCellKey(),state:{first:this.state.first,last:this.state.last,frames:this._frames}}),this._updateViewableItems(null),this._updateCellsToRenderBatcher.dispose({abort:!0}),this._viewabilityTuples.forEach((function(e){e.viewabilityHelper.dispose()})),this._fillRateHelper.deactivateAndFlush()},n.getDerivedStateFromProps=function(e,t){var n=e.data,r=(e.extraData,e.getItemCount),i=e.maxToRenderPerBatch;return{first:Math.max(0,Math.min(t.first,r(n)-1-i)),last:Math.max(0,Math.min(t.last,r(n)-1))}},t._pushCells=function(e,t,n,r,i,o){var a,s=this,l=this.props,u=l.CellRendererComponent,c=l.ItemSeparatorComponent,f=l.data,d=l.getItem,p=l.getItemCount,h=l.horizontal,v=l.keyExtractor,m=this.props.ListHeaderComponent?1:0,y=p(f)-1;i=Math.min(y,i);for(var b=function(r){var i=d(f,r),l=v(i,r);s._indicesToKeys.set(r,l),n.has(r+m)&&t.push(e.length),e.push(g.a.createElement(U,{CellRendererComponent:u,ItemSeparatorComponent:r<y?c:void 0,cellKey:l,fillRateHelper:s._fillRateHelper,horizontal:h,index:r,inversionStyle:o,item:i,key:l,prevCellKey:a,onUpdateSeparators:s._onUpdateSeparators,onLayout:function(e){return s._onCellLayout(e,l,r)},onUnmount:s._onCellUnmount,parentProps:s.props,ref:function(e){s._cellRefs[l]=e}})),a=l},_=r;_<=i;_++)b(_)},t._isVirtualizationDisabled=function(){return this.props.disableVirtualization},t._isNestedWithSameOrientation=function(){var e=this.context.virtualizedList;return!(!e||!!e.horizontal!=!!this.props.horizontal)},t.render=function(){var e=this.props,t=e.ListEmptyComponent,n=e.ListFooterComponent,r=e.ListHeaderComponent,i=this.props,o=i.data,a=i.horizontal,s=this._isVirtualizationDisabled(),l=this.props.inverted?this.props.horizontal?z.horizontallyInverted:z.verticallyInverted:null,u=[],c=new Set(this.props.stickyHeaderIndices),f=[];if(r){c.has(0)&&f.push(0);var d=g.a.isValidElement(r)?r:g.a.createElement(r,null);u.push(g.a.createElement(G,{cellKey:this._getCellKey()+"-header",key:"$header"},g.a.createElement(O.default,{onLayout:this._onLayoutHeader,style:l},d)))}var p=this.props.getItemCount(o);if(p>0){H=!1;var h=a?"width":"height",v=this.props.initialScrollIndex?-1:this.props.initialNumToRender-1,m=this.state,y=m.first,b=m.last;this._pushCells(u,f,c,0,v,l);var _=Math.max(v+1,y);if(!s&&y>v+1){var w=!1;if(c.size>0)for(var S=r?1:0,E=_-1;E>v;E--)if(c.has(E+S)){var T,k,x=this._getFrameMetricsApprox(v),P=this._getFrameMetricsApprox(E),C=P.offset-(x.offset+x.length);u.push(g.a.createElement(O.default,{key:"$sticky_lead",style:(T={},T[h]=C,T)})),this._pushCells(u,f,c,E,E,l);var N=this._getFrameMetricsApprox(y).offset-(P.offset+P.length);u.push(g.a.createElement(O.default,{key:"$sticky_trail",style:(k={},k[h]=N,k)})),w=!0;break}if(!w){var R,A=this._getFrameMetricsApprox(v),I=this._getFrameMetricsApprox(y).offset-(A.offset+A.length);u.push(g.a.createElement(O.default,{key:"$lead_spacer",style:(R={},R[h]=I,R)}))}}if(this._pushCells(u,f,c,_,b,l),!this._hasWarned.keys&&H&&(console.warn("VirtualizedList: missing keys for items, make sure to specify a key property on each item or provide a custom keyExtractor."),this._hasWarned.keys=!0),!s&&b<p-1){var j,M=this._getFrameMetricsApprox(b),L=this.props.getItemLayout?p-1:Math.min(p-1,this._highestMeasuredFrameIndex),F=this._getFrameMetricsApprox(L),V=F.offset+F.length-(M.offset+M.length);u.push(g.a.createElement(O.default,{key:"$tail_spacer",style:(j={},j[h]=V,j)}))}}else if(t){var B=g.a.isValidElement(t)?t:g.a.createElement(t,null);u.push(g.a.createElement(O.default,{key:"$empty",onLayout:this._onLayoutEmpty,style:l},B))}if(n){var U=g.a.isValidElement(n)?n:g.a.createElement(n,null);u.push(g.a.createElement(G,{cellKey:this._getCellKey()+"-footer",key:"$footer"},g.a.createElement(O.default,{onLayout:this._onLayoutFooter,style:l},U)))}var W=D({},this.props,{onContentSizeChange:this._onContentSizeChange,onLayout:this._onLayout,onScroll:this._onScroll,onScrollBeginDrag:this._onScrollBeginDrag,onScrollEndDrag:this._onScrollEndDrag,onMomentumScrollEnd:this._onMomentumScrollEnd,scrollEventThrottle:this.props.scrollEventThrottle,invertStickyHeaders:void 0!==this.props.invertStickyHeaders?this.props.invertStickyHeaders:this.props.inverted,stickyHeaderIndices:f});l&&(W.style=[l,this.props.style]),this._hasMore=this.state.last<this.props.getItemCount(this.props.data)-1;var X=g.a.cloneElement((this.props.renderScrollComponent||this._defaultRenderScrollComponent)(W),{ref:this._captureScrollRef},u);return this.props.debug?g.a.createElement(O.default,{style:{flex:1}},X,this._renderDebugOverlay()):X},t.componentDidUpdate=function(e){var t=this.props,n=t.data,r=t.extraData;n===e.data&&r===e.extraData||(this._hasDataChangedSinceEndReached=!0,this._viewabilityTuples.forEach((function(e){e.viewabilityHelper.resetViewableIndices()}))),this._scheduleCellsToRenderUpdate()},t._computeBlankness=function(){this._fillRateHelper.computeBlankness(this.props,this.state,this._scrollMetrics)},t._onCellLayout=function(e,t,n){var r=e.nativeEvent.layout,i={offset:this._selectOffset(r),length:this._selectLength(r),index:n,inLayout:!0},o=this._frames[t];o&&i.offset===o.offset&&i.length===o.length&&n===o.index?this._frames[t].inLayout=!0:(this._totalCellLength+=i.length-(o?o.length:0),this._totalCellsMeasured+=o?0:1,this._averageCellLength=this._totalCellLength/this._totalCellsMeasured,this._frames[t]=i,this._highestMeasuredFrameIndex=Math.max(this._highestMeasuredFrameIndex,n),this._scheduleCellsToRenderUpdate()),this._computeBlankness()},t._measureLayoutRelativeToContainingList=function(){var e=this;S.a.measureLayout(Object(I.default)(this),Object(I.default)(this.context.virtualizedList.getOutermostParentListRef()),(function(e){console.warn("VirtualizedList: Encountered an error while measuring a list's offset from its containing VirtualizedList.")}),(function(t,n,r,i){e._offsetFromParentVirtualizedList=e._selectOffset({x:t,y:n}),e._scrollMetrics.contentLength=e._selectLength({width:r,height:i});var o=e._convertParentScrollMetrics(e.context.virtualizedList.getScrollMetrics());e._scrollMetrics.visibleLength=o.visibleLength,e._scrollMetrics.offset=o.offset}))},t._renderDebugOverlay=function(){for(var e=this._scrollMetrics.visibleLength/this._scrollMetrics.contentLength,t=[],n=this.props.getItemCount(this.props.data),r=0;r<n;r++){var i=this._getFrameMetricsApprox(r);i.inLayout&&t.push(i)}var o=this._getFrameMetricsApprox(this.state.first).offset,a=this._getFrameMetricsApprox(this.state.last),s=a.offset+a.length-o,l=this._scrollMetrics.offset,u=this._scrollMetrics.visibleLength,c={position:"absolute",top:0,right:0};return g.a.createElement(O.default,{style:D({},c,{bottom:0,width:20,borderColor:"blue",borderWidth:1})},t.map((function(t,n){return g.a.createElement(O.default,{key:"f"+n,style:D({},c,{left:0,top:t.offset*e,height:t.length*e,backgroundColor:"orange"})})})),g.a.createElement(O.default,{style:D({},c,{left:0,top:o*e,height:s*e,borderColor:"green",borderWidth:2})}),g.a.createElement(O.default,{style:D({},c,{left:0,top:l*e,height:u*e,borderColor:"red",borderWidth:2})}))},t._selectLength=function(e){return this.props.horizontal?e.width:e.height},t._selectOffset=function(e){return this.props.horizontal?e.x:e.y},t._maybeCallOnEndReached=function(){var e=this.props,t=e.data,n=e.getItemCount,r=e.onEndReached,i=e.onEndReachedThreshold,o=this._scrollMetrics,a=o.contentLength,s=o.visibleLength,l=a-s-o.offset;r&&this.state.last===n(t)-1&&l<i*s&&(this._hasDataChangedSinceEndReached||this._scrollMetrics.contentLength!==this._sentEndForContentLength)&&(this._hasDataChangedSinceEndReached=!1,this._sentEndForContentLength=this._scrollMetrics.contentLength,r({distanceFromEnd:l}))},t._scheduleCellsToRenderUpdate=function(){var e=this.state,t=e.first,n=e.last,r=this._scrollMetrics,i=r.offset,o=r.visibleLength,a=r.velocity,s=this.props.getItemCount(this.props.data),l=!1;if(t>0||n<s-1){var u=i-this._getFrameMetricsApprox(t).offset,c=this._getFrameMetricsApprox(n).offset-(i+o),f=this.props.onEndReachedThreshold*o/2;l=Math.min(u,c)<0||a<-2&&u<f||a>2&&c<f}if(l&&this._averageCellLength)return this._updateCellsToRenderBatcher.dispose({abort:!0}),void this._updateCellsToRender();this._updateCellsToRenderBatcher.schedule()},t._updateViewableItems=function(e){var t=this,n=this.props.getItemCount;this._viewabilityTuples.forEach((function(r){r.viewabilityHelper.onUpdate(n(e),t._scrollMetrics.offset,t._scrollMetrics.visibleLength,t._getFrameMetrics,t._createViewToken,r.onViewableItemsChanged,t.state)}))},n}(g.a.PureComponent);B.defaultProps={disableVirtualization:!1,horizontal:!1,initialNumToRender:10,keyExtractor:function(e,t){return null!=e.key?e.key:(H=!0,String(t))},maxToRenderPerBatch:10,onEndReachedThreshold:2,scrollEventThrottle:50,updateCellsBatchingPeriod:50,windowSize:21},B.contextTypes={virtualizedCell:m.a.shape({cellKey:m.a.string}),virtualizedList:m.a.shape({getScrollMetrics:m.a.func,horizontal:m.a.bool,getOutermostParentListRef:m.a.func,getNestedChildState:m.a.func,registerAsNestedChild:m.a.func,unregisterAsNestedChild:m.a.func})},B.childContextTypes={virtualizedList:m.a.shape({getScrollMetrics:m.a.func,horizontal:m.a.bool,getOutermostParentListRef:m.a.func,getNestedChildState:m.a.func,registerAsNestedChild:m.a.func,unregisterAsNestedChild:m.a.func})};var U=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).state={separatorProps:{highlighted:!1,leadingItem:t.props.item}},t._separators={highlight:function(){var e=t.props,n=e.cellKey,r=e.prevCellKey;t.props.onUpdateSeparators([n,r],{highlighted:!0})},unhighlight:function(){var e=t.props,n=e.cellKey,r=e.prevCellKey;t.props.onUpdateSeparators([n,r],{highlighted:!1})},updateProps:function(e,n){var r=t.props,i=r.cellKey,o=r.prevCellKey;t.props.onUpdateSeparators(["leading"===e?o:i],n)}},t}F(t,e);var n=t.prototype;return n.getChildContext=function(){return{virtualizedCell:{cellKey:this.props.cellKey}}},n.updateSeparatorProps=function(e){this.setState((function(t){return{separatorProps:D({},t.separatorProps,e)}}))},n.componentWillUnmount=function(){this.props.onUnmount(this.props.cellKey)},n.render=function(){var e=this.props,t=e.CellRendererComponent,n=e.ItemSeparatorComponent,r=e.fillRateHelper,i=e.horizontal,o=e.item,a=e.index,s=e.inversionStyle,l=e.parentProps,u=l.renderItem,c=l.getItemLayout;T()(u,"no renderItem!");var f=u({item:o,index:a,separators:this._separators}),d=!c||l.debug||r.enabled()?this.props.onLayout:void 0,p=n&&g.a.createElement(n,this.state.separatorProps),h=s?i?[z.rowReverse,s]:[z.columnReverse,s]:i?[z.row,s]:s;return t?g.a.createElement(t,M({},this.props,{style:h,onLayout:d}),f,p):g.a.createElement(O.default,{style:h,onLayout:d},f,p)},t}(g.a.Component);U.childContextTypes={virtualizedCell:m.a.shape({cellKey:m.a.string})};var G=function(e){function t(){return e.apply(this,arguments)||this}F(t,e);var n=t.prototype;return n.getChildContext=function(){return{virtualizedCell:{cellKey:this.props.cellKey}}},n.render=function(){return this.props.children},t}(g.a.Component);G.childContextTypes={virtualizedCell:m.a.shape({cellKey:m.a.string})};var z=w.default.create({verticallyInverted:{transform:[{scaleY:-1}]},horizontallyInverted:{transform:[{scaleX:-1}]},row:{flexDirection:"row"},rowReverse:{flexDirection:"row-reverse"},columnReverse:{flexDirection:"column-reverse"}});t.a=B},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"string"==typeof e&&r.test(e)};var r=/-webkit-|-moz-|-ms-/;e.exports=t.default},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=t.BACK="Navigation/BACK",r=t.INIT="Navigation/INIT",i=t.NAVIGATE="Navigation/NAVIGATE",o=t.SET_PARAMS="Navigation/SET_PARAMS";t.back=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:n,key:e.key,immediate:e.immediate}},t.init=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={type:r};return e.params&&(t.params=e.params),t},t.navigate=function(e){var t={type:i,routeName:e.routeName};return e.params&&(t.params=e.params),e.action&&(t.action=e.action),e.key&&(t.key=e.key),t},t.setParams=function(e){return{type:o,key:e.key,params:e.params,preserveFocus:!0}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1));t.default=r.createContext("light")},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1));t.default=r.createContext(void 0)},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return f}));var r=n(9),i=n(46),o=n.n(i),a=n(2),s=n.n(a),l=r.canUseDOM?window:{devicePixelRatio:void 0,innerHeight:void 0,innerWidth:void 0,screen:{height:void 0,width:void 0}},u={},c={},f=function(){function e(){}return e.get=function(e){return s()(u[e],"No dimension set for key "+e),u[e]},e.set=function(e){e&&(r.canUseDOM?s()(!1,"Dimensions cannot be set in the browser"):(u.screen=e.screen,u.window=e.window))},e._update=function(){u.window={fontScale:1,height:l.innerHeight,scale:l.devicePixelRatio||1,width:l.innerWidth},u.screen={fontScale:1,height:l.screen.height,scale:l.devicePixelRatio||1,width:l.screen.width},Array.isArray(c.change)&&c.change.forEach((function(e){return e(u)}))},e.addEventListener=function(e,t){c[e]=c[e]||[],c[e].push(t)},e.removeEventListener=function(e,t){Array.isArray(c[e])&&(c[e]=c[e].filter((function(e){return e!==t})))},e}();f._update(),r.canUseDOM&&window.addEventListener("resize",o()(f._update,16),!1)},function(e,t,n){"use strict";n.r(t);var r=n(3),i=(n(0),n(1)),o=n.n(i);var a=function(e){var t,n;function i(){return e.apply(this,arguments)||this}return n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,i.prototype.render=function(){var e=this.props,t=(e.colors,e.enabled,e.onRefresh,e.progressBackgroundColor,e.progressViewOffset,e.refreshing,e.size,e.tintColor,e.title,e.titleColor,function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["colors","enabled","onRefresh","progressBackgroundColor","progressViewOffset","refreshing","size","tintColor","title","titleColor"]));return o.a.createElement(r.default,t)},i}(i.Component);a.propTypes={},t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(26),i=n(32),o=n(35),a=[];function s(e){return a[e-1]}var l=n(83),u=0,c={},f={abort:function(e){var t=c[""+e];t&&(t.onerror=t.onload=t=null,delete c[""+e])},getSize:function(e,t,n){var r=!1,i=setInterval(a,16),o=f.load(e,a,(function(){"function"==typeof n&&n();f.abort(o),clearInterval(i)}));function a(){var e=c[""+o];if(e){var n=e.naturalHeight,a=e.naturalWidth;n&&a&&(t(a,n),r=!0)}r&&(f.abort(o),clearInterval(i))}},load:function(e,t,n){u+=1;var r=new window.Image;return r.onerror=n,r.onload=function(e){var n=function(){return t(e)};"function"==typeof r.decode?r.decode().then(n,n):setTimeout(n,0)},r.src=e,c[""+u]=r,u},prefetch:function(e){return new Promise((function(t,n){f.load(e,t,n)}))}},d=f,p={center:"center",contain:"contain",cover:"cover",none:"none",repeat:"repeat",stretch:"stretch"},h=/^data:/,v=function(){function e(){}return e.has=function(t){var n=e._entries;return h.test(t)||Boolean(n[t])},e.add=function(t){var n=e._entries,r=Date.now();n[t]?(n[t].lastUsedTimestamp=r,n[t].refCount+=1):n[t]={lastUsedTimestamp:r,refCount:1}},e.remove=function(t){var n=e._entries;n[t]&&(n[t].refCount-=1),e._cleanUpIfNeeded()},e._cleanUpIfNeeded=function(){var t,n,r=e._entries,i=Object.keys(r);i.length+1>e._maximumEntries&&(i.forEach((function(e){var i=r[e];(!n||i.lastUsedTimestamp<n.lastUsedTimestamp)&&0===i.refCount&&(t=e,n=i)})),t&&delete r[t])},e}();v._maximumEntries=256,v._entries={};var m=n(4),y=n(3),g=n(0),b=n(1),_=n.n(b);function w(){return(w=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function S(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){O(e,t,n[t])}))}return e}function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var E=function(e,t){return t?"LOADED":e?"PENDING":"IDLE"},T=/^(data:image\/svg\+xml;utf8,)(.*)/,k=function(e){var t="";if("number"==typeof e){var n=s(e),r=n.scales[0],i=1!==r?"@"+r+"x":"";t=n?n.httpServerLocation+"/"+n.name+i+"."+n.type:""}else"string"==typeof e?t=e:e&&"string"==typeof e.uri&&(t=e.uri);if(t){var o=t.match(T);if(o){var a=o[1],l=o[2];return""+a+encodeURIComponent(l)}}return t},x=0,P=function(e){var t,n;function r(t,n){var r;(r=e.call(this,t,n)||this)._filterId=0,r._imageRef=null,r._imageRequestId=null,r._imageState=null,r._isMounted=!1,r._createLayoutHandler=function(e){var t=r.props.onLayout;if("center"===e||"repeat"===e||t)return function(e){var n=e.nativeEvent.layout;t&&t(e),r.setState((function(){return{layout:n}}))}},r._getBackgroundSize=function(e){if(r._imageRef&&("center"===e||"repeat"===e)){var t=r._imageRef,n=t.naturalHeight,i=t.naturalWidth,o=r.state.layout,a=o.height,s=o.width;if(n&&i&&a&&s){var l=Math.min(1,s/i,a/n);return{backgroundSize:Math.ceil(l*i)+"px "+Math.ceil(l*n)+"px"}}}},r._onError=function(){var e=r.props,t=e.onError,n=e.source;r._updateImageState("ERRORED"),t&&t({nativeEvent:{error:"Failed to load resource "+k(n)+" (404)"}}),r._onLoadEnd()},r._onLoad=function(e){var t=r.props,n=t.onLoad,i=t.source,o={nativeEvent:e};v.add(k(i)),r._updateImageState("LOADED"),n&&n(o),r._onLoadEnd()},r._setImageRef=function(e){r._imageRef=e};var i=k(t.source),o=v.has(i);return r.state={layout:{},shouldDisplaySource:o},r._imageState=E(i,o),r._filterId=x,x++,r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,r.getSize=function(e,t,n){d.getSize(e,t,n)},r.prefetch=function(e){return d.prefetch(e).then((function(){v.add(e),v.remove(e)}))},r.queryCache=function(e){var t={};return e.forEach((function(e){v.has(e)&&(t[e]="disk/memory")})),Promise.resolve(t)};var o=r.prototype;return o.componentDidMount=function(){this._isMounted=!0,"PENDING"===this._imageState?this._createImageLoader():"LOADED"===this._imageState&&this._onLoad({target:this._imageRef})},o.componentDidUpdate=function(e){var t=k(e.source),n=k(this.props.source),r=null!=this.props.defaultSource;if(t!==n){v.remove(t);var i=v.has(n);i&&v.add(n),this._updateImageState(E(n,i),r)}else r&&e.defaultSource!==this.props.defaultSource&&this._updateImageState(this._imageState,r);"PENDING"===this._imageState&&this._createImageLoader()},o.componentWillUnmount=function(){var e=k(this.props.source);v.remove(e),this._destroyImageLoader(),this._isMounted=!1},o.render=function(){var e=this.state.shouldDisplaySource,t=this.props,n=t.accessibilityLabel,r=t.accessible,o=t.blurRadius,a=t.defaultSource,u=t.draggable,c=t.source,f=t.testID,d=(t.capInsets,t.onError,t.onLayout,t.onLoad,t.onLoadEnd,t.onLoadStart,t.resizeMethod,t.resizeMode),h=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(t,["accessibilityLabel","accessible","blurRadius","defaultSource","draggable","source","testID","capInsets","onError","onLayout","onLoad","onLoadEnd","onLoadStart","resizeMethod","resizeMode"]);var v=e?c:a,g=k(v),b=function(e){if("number"==typeof e){var t=s(e);return{height:t.height,width:t.width}}if("object"==typeof e)return{height:e.height,width:e.width}}(v),O=g?'url("'+g+'")':null,E=S({},m.default.flatten(this.props.style)),T=d||E.resizeMode||p.cover,x=[],P=E.tintColor;if(E.filter&&x.push(E.filter),o&&x.push("blur("+o+"px)"),E.shadowOffset){var A=Object(l.a)(E);A&&x.push("drop-shadow("+A+")")}E.tintColor&&x.push("url(#tint-"+this._filterId+")"),delete E.shadowColor,delete E.shadowOpacity,delete E.shadowOffset,delete E.shadowRadius,delete E.tintColor,delete E.overlayColor,delete E.resizeMode;var I=g?Object(i.a)("img",{alt:n||"",classList:[C.accessibilityImage],draggable:u||!1,ref:this._setImageRef,src:g}):null;return _.a.createElement(y.default,w({},h,{accessibilityLabel:n,accessible:r,onLayout:this._createLayoutHandler(T),style:[N.root,this.context.isInAParentText&&N.inline,b,E],testID:f}),_.a.createElement(y.default,{style:[N.image,R[T],this._getBackgroundSize(T),O&&{backgroundImage:O},x.length>0&&{filter:x.join(" ")}]}),I,function(e,t){return e&&null!=t?_.a.createElement("svg",{style:{position:"absolute",height:0,visibility:"hidden",width:0}},_.a.createElement("defs",null,_.a.createElement("filter",{id:"tint-"+t},_.a.createElement("feFlood",{floodColor:""+e}),_.a.createElement("feComposite",{in2:"SourceAlpha",operator:"atop"})))):null}(P,this._filterId))},o._createImageLoader=function(){var e=this.props.source;this._destroyImageLoader();var t=k(e);this._imageRequestId=d.load(t,this._onLoad,this._onError),this._onLoadStart()},o._destroyImageLoader=function(){this._imageRequestId&&(d.abort(this._imageRequestId),this._imageRequestId=null)},o._onLoadEnd=function(){var e=this.props.onLoadEnd;e&&e()},o._onLoadStart=function(){var e=this.props,t=e.defaultSource,n=e.onLoadStart;this._updateImageState("LOADING",null!=t),n&&n()},o._updateImageState=function(e,t){void 0===t&&(t=!1),this._imageState=e;var n="LOADED"===this._imageState||"LOADING"===this._imageState&&!t;n!==this.state.shouldDisplaySource&&this._isMounted&&this.setState((function(){return{shouldDisplaySource:n}}))},r}(b.Component);P.displayName="Image",P.contextTypes={isInAParentText:g.bool},P.defaultProps={style:{}},P.propTypes={};var C=o.a.create({accessibilityImage:S({},m.default.absoluteFillObject,{height:"100%",opacity:0,width:"100%",zIndex:-1})}),N=m.default.create({root:{flexBasis:"auto",overflow:"hidden",zIndex:0},inline:{display:"inline-flex"},image:S({},m.default.absoluteFillObject,{backgroundColor:"transparent",backgroundPosition:"center",backgroundRepeat:"no-repeat",backgroundSize:"cover",height:"100%",width:"100%",zIndex:-1})}),R=m.default.create({center:{backgroundSize:"auto"},contain:{backgroundSize:"contain"},cover:{backgroundSize:"cover"},none:{backgroundPosition:"0 0",backgroundSize:"auto"},repeat:{backgroundPosition:"0 0",backgroundRepeat:"repeat",backgroundSize:"auto"},stretch:{backgroundSize:"100% 100%"}});t.default=Object(r.a)(P)},function(e,t,n){"use strict";n.r(t);var r=/[A-Z]/g,i=/^ms-/,o={};function a(e){return"-"+e.toLowerCase()}t.default=function(e){if(o.hasOwnProperty(e))return o[e];var t=e.replace(r,a);return o[e]=i.test(t)?"-"+t:t}},function(e,t){function n(e){var t;return"number"==typeof e?e>>>0===e&&e>=0&&e<=4294967295?e:null:(t=u.hex6.exec(e))?parseInt(t[1]+"ff",16)>>>0:h.hasOwnProperty(e)?h[e]:(t=u.rgb.exec(e))?(c(t[1])<<24|c(t[2])<<16|c(t[3])<<8|255)>>>0:(t=u.rgba.exec(e))?(c(t[1])<<24|c(t[2])<<16|c(t[3])<<8|d(t[4]))>>>0:(t=u.hex3.exec(e))?parseInt(t[1]+t[1]+t[2]+t[2]+t[3]+t[3]+"ff",16)>>>0:(t=u.hex8.exec(e))?parseInt(t[1],16)>>>0:(t=u.hex4.exec(e))?parseInt(t[1]+t[1]+t[2]+t[2]+t[3]+t[3]+t[4]+t[4],16)>>>0:(t=u.hsl.exec(e))?(255|i(f(t[1]),p(t[2]),p(t[3])))>>>0:(t=u.hsla.exec(e))?(i(f(t[1]),p(t[2]),p(t[3]))|d(t[4]))>>>0:null}function r(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function i(e,t,n){var i=n<.5?n*(1+t):n+t-n*t,o=2*n-i,a=r(o,i,e+1/3),s=r(o,i,e),l=r(o,i,e-1/3);return Math.round(255*a)<<24|Math.round(255*s)<<16|Math.round(255*l)<<8}var o="[-+]?\\d*\\.?\\d+",a=o+"%";function s(e){return Array.prototype.slice.call(e,0)}function l(){return"\\(\\s*("+s(arguments).join(")\\s*,\\s*(")+")\\s*\\)"}var u={rgb:new RegExp("rgb"+l(o,o,o)),rgba:new RegExp("rgba"+l(o,o,o,o)),hsl:new RegExp("hsl"+l(o,a,a)),hsla:new RegExp("hsla"+l(o,a,a,o)),hex3:/^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex4:/^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#([0-9a-fA-F]{6})$/,hex8:/^#([0-9a-fA-F]{8})$/};function c(e){var t=parseInt(e,10);return t<0?0:t>255?255:t}function f(e){return(parseFloat(e)%360+360)%360/360}function d(e){var t=parseFloat(e);return t<0?0:t>1?255:Math.round(255*t)}function p(e){var t=parseFloat(e,10);return t<0?0:t>100?1:t/100}var h={transparent:0,aliceblue:4042850303,antiquewhite:4209760255,aqua:16777215,aquamarine:2147472639,azure:4043309055,beige:4126530815,bisque:4293182719,black:255,blanchedalmond:4293643775,blue:65535,blueviolet:2318131967,brown:2771004159,burlywood:3736635391,burntsienna:3934150143,cadetblue:1604231423,chartreuse:2147418367,chocolate:3530104575,coral:4286533887,cornflowerblue:1687547391,cornsilk:4294499583,crimson:3692313855,cyan:16777215,darkblue:35839,darkcyan:9145343,darkgoldenrod:3095792639,darkgray:2846468607,darkgreen:6553855,darkgrey:2846468607,darkkhaki:3182914559,darkmagenta:2332068863,darkolivegreen:1433087999,darkorange:4287365375,darkorchid:2570243327,darkred:2332033279,darksalmon:3918953215,darkseagreen:2411499519,darkslateblue:1211993087,darkslategray:793726975,darkslategrey:793726975,darkturquoise:13554175,darkviolet:2483082239,deeppink:4279538687,deepskyblue:12582911,dimgray:1768516095,dimgrey:1768516095,dodgerblue:512819199,firebrick:2988581631,floralwhite:4294635775,forestgreen:579543807,fuchsia:4278255615,gainsboro:3705462015,ghostwhite:4177068031,gold:4292280575,goldenrod:3668254975,gray:2155905279,green:8388863,greenyellow:2919182335,grey:2155905279,honeydew:4043305215,hotpink:4285117695,indianred:3445382399,indigo:1258324735,ivory:4294963455,khaki:4041641215,lavender:3873897215,lavenderblush:4293981695,lawngreen:2096890111,lemonchiffon:4294626815,lightblue:2916673279,lightcoral:4034953471,lightcyan:3774873599,lightgoldenrodyellow:4210742015,lightgray:3553874943,lightgreen:2431553791,lightgrey:3553874943,lightpink:4290167295,lightsalmon:4288707327,lightseagreen:548580095,lightskyblue:2278488831,lightslategray:2005441023,lightslategrey:2005441023,lightsteelblue:2965692159,lightyellow:4294959359,lime:16711935,limegreen:852308735,linen:4210091775,magenta:4278255615,maroon:2147483903,mediumaquamarine:1724754687,mediumblue:52735,mediumorchid:3126187007,mediumpurple:2473647103,mediumseagreen:1018393087,mediumslateblue:2070474495,mediumspringgreen:16423679,mediumturquoise:1221709055,mediumvioletred:3340076543,midnightblue:421097727,mintcream:4127193855,mistyrose:4293190143,moccasin:4293178879,navajowhite:4292783615,navy:33023,oldlace:4260751103,olive:2155872511,olivedrab:1804477439,orange:4289003775,orangered:4282712319,orchid:3664828159,palegoldenrod:4008225535,palegreen:2566625535,paleturquoise:2951671551,palevioletred:3681588223,papayawhip:4293907967,peachpuff:4292524543,peru:3448061951,pink:4290825215,plum:3718307327,powderblue:2967529215,purple:2147516671,rebeccapurple:1714657791,red:4278190335,rosybrown:3163525119,royalblue:1097458175,saddlebrown:2336560127,salmon:4202722047,sandybrown:4104413439,seagreen:780883967,seashell:4294307583,sienna:2689740287,silver:3233857791,skyblue:2278484991,slateblue:1784335871,slategray:1887473919,slategrey:1887473919,snow:4294638335,springgreen:16744447,steelblue:1182971135,tan:3535047935,teal:8421631,thistle:3636451583,tomato:4284696575,turquoise:1088475391,violet:4001558271,wheat:4125012991,white:4294967295,whitesmoke:4126537215,yellow:4294902015,yellowgreen:2597139199};n.rgba=function(e){return{r:Math.round((4278190080&e)>>>24),g:Math.round((16711680&e)>>>16),b:Math.round((65280&e)>>>8),a:((255&e)>>>0)/255}},e.exports=n},function(e,t,n){"use strict";var r=n(10),i=n(14),o=n(2),a=n.n(o);var s=1,l=function(e){var t,n;function i(t){var n;n=e.call(this)||this;var i=t||{x:0,y:0};return"number"==typeof i.x&&"number"==typeof i.y?(n.x=new r.a(i.x),n.y=new r.a(i.y)):(a()(i.x instanceof r.a&&i.y instanceof r.a,"AnimatedValueXY must be initialized with an object of numbers or AnimatedValues."),n.x=i.x,n.y=i.y),n._listeners={},n}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=i.prototype;return o.setValue=function(e){this.x.setValue(e.x),this.y.setValue(e.y)},o.setOffset=function(e){this.x.setOffset(e.x),this.y.setOffset(e.y)},o.flattenOffset=function(){this.x.flattenOffset(),this.y.flattenOffset()},o.extractOffset=function(){this.x.extractOffset(),this.y.extractOffset()},o.__getValue=function(){return{x:this.x.__getValue(),y:this.y.__getValue()}},o.resetAnimation=function(e){this.x.resetAnimation(),this.y.resetAnimation(),e&&e(this.__getValue())},o.stopAnimation=function(e){this.x.stopAnimation(),this.y.stopAnimation(),e&&e(this.__getValue())},o.addListener=function(e){var t=this,n=String(s++),r=function(n){n.value;e(t.__getValue())};return this._listeners[n]={x:this.x.addListener(r),y:this.y.addListener(r)},n},o.removeListener=function(e){this.x.removeListener(this._listeners[e].x),this.y.removeListener(this._listeners[e].y),delete this._listeners[e]},o.removeAllListeners=function(){this.x.removeAllListeners(),this.y.removeAllListeners(),this._listeners={}},o.getLayout=function(){return{left:this.x,top:this.y}},o.getTranslateTransform=function(){return[{translateX:this.x},{translateY:this.y}]},i}(i.a);t.a=l},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var r={},i={},o=1,a=function(e){return"r-"+e},s=function(){function e(){}return e.register=function(e){var t=o++;var n=a(t);return i[n]=e,t},e.getByID=function(e){if(!e)return r;var t=a(e),n=i[t];return n||(console.warn("Invalid style with id `"+e+"`. Skipping ..."),r)},e}()},function(e,t,n){"use strict";var r=n(68);n(2);t.a=function e(t){if(t){if(!Array.isArray(t))return function(e){return"number"==typeof e?r.a.getByID(e):e}(t);for(var n={},i=0,o=t.length;i<o;++i){var a=e(t[i]);if(a)for(var s in a){var l=a[s];n[s]=l}}return n}}},function(e,t,n){"use strict";e.exports=n(190)},function(e,t,n){"use strict";var r={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexOrder:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,fontWeight:!0,gridRow:!0,gridColumn:!0,lineClamp:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0,scale:!0,scaleX:!0,scaleY:!0,scaleZ:!0,shadowOpacity:!0},i=["ms","Moz","O","Webkit"];Object.keys(r).forEach((function(e){i.forEach((function(t){r[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=r[e]}))})),t.a=r},function(e,t,n){"use strict";var r=n(84),i=n(0),o=Object(r.a)({top:i.number,left:i.number,bottom:i.number,right:i.number});t.a=o},function(e,t,n){"use strict";var r,i=n(179),o=n.n(i),a=function(){function e(){}return e.step0=function(e){return e>0?1:0},e.step1=function(e){return e>=1?1:0},e.linear=function(e){return e},e.ease=function(t){return r||(r=e.bezier(.42,0,1,1)),r(t)},e.quad=function(e){return e*e},e.cubic=function(e){return e*e*e},e.poly=function(e){return function(t){return Math.pow(t,e)}},e.sin=function(e){return 1-Math.cos(e*Math.PI/2)},e.circle=function(e){return 1-Math.sqrt(1-e*e)},e.exp=function(e){return Math.pow(2,10*(e-1))},e.elastic=function(e){void 0===e&&(e=1);var t=e*Math.PI;return function(e){return 1-Math.pow(Math.cos(e*Math.PI/2),3)*Math.cos(e*t)}},e.back=function(e){return void 0===e&&(e=1.70158),function(t){return t*t*((e+1)*t-e)}},e.bounce=function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},e.bezier=function(e,t,n,r){return o()(e,t,n,r)},e.in=function(e){return e},e.out=function(e){return function(t){return 1-e(1-t)}},e.inOut=function(e){return function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2}},e}();t.a=a},function(e,t,n){"use strict";var r=n(2),i=n.n(r),o=n(9).canUseDOM&&void 0!==window.requestIdleCallback,a=o?window.requestIdleCallback:function(e,t){return setTimeout((function(){var t=Date.now();e({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-t))}})}),1)},s=o?window.cancelIdleCallback:function(e){clearTimeout(e)},l=a,u={Events:{interactionStart:"interactionStart",interactionComplete:"interactionComplete"},runAfterInteractions:function(e){var t,n=new Promise((function(n){t=l((function(){e?n(e()):n()}))}));return{then:n.then.bind(n),done:n.then.bind(n),cancel:function(){s(t)}}},createInteractionHandle:function(){return 1},clearInteractionHandle:function(e){i()(!!e,"Must provide a handle to clear.")},addListener:function(){}};t.a=u},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,l=a(e),u=1;u<arguments.length;u++){for(var c in n=Object(arguments[u]))i.call(n,c)&&(l[c]=n[c]);if(r){s=r(n);for(var f=0;f<s.length;f++)o.call(n,s[f])&&(l[s[f]]=n[s[f]])}}return l}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=e[t];if(!n)throw new Error("There is no route defined for key "+t+".\nMust be one of: "+Object.keys(e).map((function(e){return"'"+e+"'"})).join(","));if(n.screen)return n.screen;if("function"==typeof n.getScreen){var r=n.getScreen();return(0,a.default)((0,i.isValidElementType)(r),"The getScreen defined for route '"+t+" didn't return a valid screen or navigator.\n\nPlease pass it like this:\n"+t+": {\n  getScreen: () => require('./MyScreen').default\n}"),r}return n};var r,i=n(77),o=n(33),a=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";e.exports=n(224)},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(98);Object.defineProperty(t,"createNativeWrapper",{enumerable:!0,get:function(){return f(r).default}});var i=n(263);Object.defineProperty(t,"Directions",{enumerable:!0,get:function(){return f(i).default}});var o=n(264);Object.defineProperty(t,"gestureHandlerRootHOC",{enumerable:!0,get:function(){return f(o).default}});var a=n(136);Object.defineProperty(t,"NativeViewGestureHandler",{enumerable:!0,get:function(){return f(a).default}});var s=n(43);Object.defineProperty(t,"State",{enumerable:!0,get:function(){return f(s).default}});var l=n(265);Object.keys(l).forEach((function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return l[e]}})}));var u=n(267);Object.keys(u).forEach((function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return u[e]}})}));var c=n(271);function f(e){return e&&e.__esModule?e:{default:e}}Object.keys(c).forEach((function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return c[e]}})}))},function(e,t,n){var r=n(156);e.exports=new r({uri:n.p+"7d40544b395c5949f4646f5e150fe020.png",width:12,height:21})},function(e,t,n){"use strict";var r=n(84),i=n(4);t.a=function(e){var t=Object(r.a)(e);return function(e,n,r,o){var a=e;if(e[n]){a={};var s=i.default.flatten(e[n]),l=Object.keys(s).reduce((function(e,t){return 0!==t.indexOf("--")&&(e[t]=s[t]),e}),{});a[n]=l}for(var u=arguments.length,c=new Array(u>4?u-4:0),f=4;f<u;f++)c[f-4]=arguments[f];return t.apply(void 0,[a,n,r,o].concat(c))}}},function(e,t,n){"use strict";n.r(t);var r={UIManager:n(12).a};t.default=r},function(e,t,n){"use strict";var r=n(36),i=n(35),o=n(4),a=n(41),s=n(22);var l={},u=i.a.create({reset:{backgroundColor:"transparent",color:"inherit",font:"inherit",listStyle:"none",margin:0,textAlign:"inherit",textDecoration:"none"},cursor:{cursor:"pointer"}},s.c.classicReset),c=o.default.create({auto:{pointerEvents:"auto"},"box-none":{pointerEvents:"box-none"},"box-only":{pointerEvents:"box-only"},none:{pointerEvents:"none"}}),f=function(e,t){return a.a.resolve(e,t)};t.a=function(e,t,n){n||(n=f),t||(t=l);var i=t,a=i.accessibilityLabel,s=i.accessibilityLiveRegion,d=i.accessibilityStates,p=i.classList,h=i.className,v=i.importantForAccessibility,m=i.nativeID,y=i.placeholderTextColor,g=i.pointerEvents,b=i.style,_=i.testID,w=i.accessible,S=(i.accessibilityComponentType,i.accessibilityRole,i.accessibilityTraits,function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(i,["accessibilityLabel","accessibilityLiveRegion","accessibilityStates","classList","className","importantForAccessibility","nativeID","placeholderTextColor","pointerEvents","style","testID","accessible","accessibilityComponentType","accessibilityRole","accessibilityTraits"])),O=r.a.isDisabled(t),E=r.a.propsToAriaRole(t);if("no-hide-descendants"===v&&(S["aria-hidden"]=!0),a&&a.constructor===String&&(S["aria-label"]=a),s&&s.constructor===String&&(S["aria-live"]="none"===s?"off":s),Array.isArray(d))for(var T=0;T<d.length;T+=1)S["aria-"+d[T]]=!0;E&&E.constructor===String&&(S.role=E),O&&(S["aria-disabled"]=O,S.disabled=O);var k=!O&&"no"!==v&&"no-hide-descendants"!==v;"link"===E||"a"===e||"button"===e||"input"===e||"select"===e||"textarea"===e?!1!==w&&k?S["data-focusable"]=!0:S.tabIndex="-1":r.a.buttonLikeRoles[E]||"textbox"===E?!1!==w&&k&&(S["data-focusable"]=!0,S.tabIndex="0"):!0===w&&k&&(S["data-focusable"]=!0,S.tabIndex="0");var x=("button"===E||"link"===E)&&!O,P=n(o.default.compose(g&&c[g],o.default.compose(b,y&&{placeholderTextColor:y})),[h,("a"===e||"button"===e||"li"===e||"ul"===e||"heading"===E)&&u.reset,x&&u.cursor,p]),C=P.className,N=P.style;return null!=C&&""!==C&&(S.className=C),N&&(S.style=N),m&&m.constructor===String&&(S.id=m),"a"===e&&"_blank"===S.target&&(S.rel=(S.rel||"")+" noopener noreferrer"),_&&_.constructor===String&&(S["data-testid"]=_),S}},function(e,t,n){"use strict";var r=n(55),i=n(27),o={height:0,width:0};t.a=function(e){var t=e.shadowColor,n=e.shadowOffset,a=e.shadowOpacity,s=e.shadowRadius,l=n||o,u=l.height,c=l.width,f=Object(i.a)(c),d=Object(i.a)(u),p=Object(i.a)(s||0),h=Object(r.a)(t||"black",a);if(null!=h&&null!=f&&null!=d&&null!=p)return f+" "+d+" "+p+" "+h}},function(e,t,n){"use strict";var r=n(2),i=n.n(r);function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}t.a=function(e){function t(t,n,r,a,s){if(n[r]){var l=n[r],u=typeof l,c=s||"(unknown)";"object"!==u&&i()(!1,"Invalid "+c+" `"+r+"` of type `"+u+"` supplied to `"+a+"`, expected `object`.");for(var f=o({},n[r],e),d=arguments.length,p=new Array(d>5?d-5:0),h=5;h<d;h++)p[h-5]=arguments[h];for(var v in f){var m=e[v];m||i()(!1,"Invalid props."+r+" key `"+v+"` supplied to `"+a+"`.\nBad object: "+JSON.stringify(n[r],null,"  ")+"\nValid keys: "+JSON.stringify(Object.keys(e),null,"  "));var y=m.apply(void 0,[l,v,a,s].concat(p));y&&i()(!1,y.message+"\nBad object: "+JSON.stringify(n[r],null,"  "))}}else t&&i()(!1,"Required object `"+r+"` was not specified in `"+a+"`.")}function n(e,n,r,i){for(var o=arguments.length,a=new Array(o>4?o-4:0),s=4;s<o;s++)a[s-4]=arguments[s];return t.apply(void 0,[!1,e,n,r,i].concat(a))}return n.isRequired=t.bind(null,!0),n}},function(e,t,n){"use strict";var r=n(30);t.a=function(){r.a.blurTextInput(r.a.currentlyFocusedField())}},function(e,t,n){"use strict";var r,i=n(209);r=i.now?function(){return i.now()}:function(){return Date.now()},e.exports=r},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.RXSegmentTabBar=t.RXSegment=void 0;var r=o(n(203)),i=o(n(119));function o(e){return e&&e.__esModule?e:{default:e}}t.default=r.default,t.RXSegment=r.default,t.RXSegmentTabBar=i.default},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,u=[],c=!1,f=-1;function d(){c&&l&&(c=!1,l.length?u=l.concat(u):f=-1,u.length&&p())}function p(){if(!c){var e=s(d);c=!0;for(var t=u.length;t;){for(l=u,u=[];++f<t;)l&&l[f].run();f=-1,t=u.length}l=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||c||s(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=p(n(90)),i=p(n(13)),o=p(n(33)),a=p(n(76)),s=p(n(91)),l=d(n(59)),u=d(n(127)),c=p(n(92)),f=n(93);function d(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function p(e){return e&&e.__esModule?e:{default:e}}var h=function(){return{}};t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,c.default)(e);var n=t.order||Object.keys(e),d=t.getCustomActionCreators||h,p=t.initialRouteParams,v=t.initialRouteName||n[0],m=t.backBehavior||"none",y=!t.hasOwnProperty("resetOnBlur")||t.resetOnBlur,g=n.indexOf(v);if(-1===g)throw new Error("Invalid initialRouteName '"+v+"'.Should be one of "+n.map((function(e){return'"'+e+'"'})).join(", "));var b={};function _(t,n){var r=e[t];return r&&r.params?(0,i.default)({},r.params,n):n}n.forEach((function(t){b[t]=null;var n=(0,a.default)(e,t);n.router&&(b[t]=n.router)}));var w=(0,f.createPathParser)(b,e,t),S=w.getPathAndParamsForRoute,O=w.getActionForPathAndParams;function E(e){var t=_(e,e===v?p:void 0),n=b[e];if(n){var r=l.init();return(0,i.default)({},n.getStateForAction(r),{key:e,routeName:e,params:t})}return{key:e,routeName:e,params:t}}function T(e,t,n){var o=n;if(t&&t.index!==n.index&&y){var a=t.routes[t.index].routeName,s=(0,r.default)(n.routes);s[t.index]=E(a),o=(0,i.default)({},n,{routes:s})}return function(n){if("history"!==m)return n;var o=t?t.routeKeyHistory:[];if(e.type===l.NAVIGATE){o=(0,r.default)(o);var a=n.routes[n.index].key;(o=o.filter((function(e){return e!==a}))).push(a)}else e.type===l.BACK&&(o=(0,r.default)(o)).pop();return(0,i.default)({},n,{routeKeyHistory:o})}(o)}function k(){var e=n.map(E),t={routes:e,index:g,isTransitioning:!1};if("history"===m){var r=e[g].key;t.routeKeyHistory=[r]}return t}return{childRouters:b,getActionCreators:function(e,t){return d(e,t)},getStateForAction:function(e,t){var o=t?(0,i.default)({},t):t,a=t||k(),s=a.index;if(e.type===l.INIT){var c=e.params;c&&(a.routes=a.routes.map((function(e){return(0,i.default)({},e,{params:(0,i.default)({},e.params,c,e.routeName===v?p:null)})})))}if(e.type===u.JUMP_TO&&(null==e.key||e.key===a.key)){var f=e.params,d=a.routes.findIndex((function(t){return t.routeName===e.routeName}));if(-1===d)throw new Error("There is no route named '"+e.routeName+"' in the navigator with the key '"+e.key+"'.\nMust be one of: "+a.routes.map((function(e){return"'"+e.routeName+"'"})).join(","));return T(e,o,(0,i.default)({},a,{routes:f?a.routes.map((function(e,t){return t===d?(0,i.default)({},e,{params:(0,i.default)({},e.params,f)}):e})):a.routes,index:d}))}var h=a.routes[a.index],y=b[n[a.index]];if(y){var _=y.getStateForAction(e,h);if(!_&&t)return null;if(_&&_!==h){var w=(0,r.default)(a.routes);return w[a.index]=_,T(e,o,(0,i.default)({},a,{routes:w}))}}var S=null==e.key||e.key===h.key;if(e.type===l.BACK)if(S&&"initialRoute"===m)s=g;else if(S&&"order"===m)s=Math.max(0,s-1);else{if(!(S&&"history"===m&&a.routeKeyHistory.length>1))return a;var O=a.routeKeyHistory[a.routeKeyHistory.length-2];s=n.indexOf(O)}var E=!1;if(e.type===l.NAVIGATE&&(E=!!n.find((function(t,n){return t===e.routeName&&(s=n,!0)})))){var x=a.routes[s],P=b[e.routeName],C=x;if(e.action&&P){var N=P.getStateForAction(e.action,x);N&&(C=N)}if(e.params&&(C=(0,i.default)({},C,{params:(0,i.default)({},C.params||{},e.params)})),C!==x){var R=(0,r.default)(a.routes);R[s]=C;var A=(0,i.default)({},a,{routes:R,index:s});return T(e,o,A)}if(C===x&&a.index===s&&o)return null}if(e.type===l.SET_PARAMS){var I=e.key,j=a.routes.find((function(e){return e.key===I}));if(j){var M=(0,i.default)({},j.params,e.params),D=(0,r.default)(a.routes);return D[a.routes.indexOf(j)]=(0,i.default)({},j,{params:M}),T(e,o,(0,i.default)({},a,{routes:D}))}}if(s!==a.index)return T(e,o,(0,i.default)({},a,{index:s}));if(E&&!t)return a;if(E)return(0,i.default)({},a);var L=a.index,F=a.routes;return n.find((function(t,n){var i=b[t];if(n===L)return!1;var o=F[n];return i&&(o=i.getStateForAction(e,o)),o?o!==F[n]&&((F=(0,r.default)(F))[n]=o,L=n,!0):(L=n,!0)})),e.preserveFocus&&(L=a.index),L!==a.index||F!==a.routes?T(e,o,(0,i.default)({},a,{index:L,routes:F})):a},getComponentForState:function(t){var n=t.routes[t.index].routeName;(0,o.default)(n,"There is no route defined for index "+t.index+". Check that\n        that you passed in a navigation state with a valid tab/screen index.");var r=b[n];return r?r.getComponentForState(t.routes[t.index]):(0,a.default)(e,n)},getComponentForRouteName:function(t){return(0,a.default)(e,t)},getPathAndParamsForState:function(e){var t=e.routes[e.index];return S(t)},getActionForPathAndParams:function(e,t){return O(e,t)},getScreenOptions:(0,s.default)(e,t.defaultNavigationOptions)}}},function(e,t,n){var r=n(221),i=n(222),o=n(223);e.exports=function(e){return r(e)||i(e)||o()}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(13)),i=s(n(33)),o=s(n(76)),a=s(n(225));function s(e){return e&&e.__esModule?e:{default:e}}function l(e,t,n){return"function"==typeof e?(0,r.default)({},t,e((0,r.default)({},n,{navigationOptions:t}))):"object"==typeof e?(0,r.default)({},t,e):t}t.default=function(e,t){return function(n,r,s){var u=n.state;(0,i.default)(u.routeName&&"string"==typeof u.routeName,"Cannot get config because the route does not have a routeName.");var c=(0,o.default)(e,u.routeName),f=e[u.routeName],d=f===c?null:f.navigationOptions,p=c.navigationOptions,h={navigation:n,screenProps:r||{},theme:s},v=l(t,{},h);return v=l(p,v,h),v=l(d,v,h),(0,a.default)(v,u),v}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(77),o=n(33),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){var t=Object.keys(e);(0,a.default)(t.length>0,"Please specify at least one route when configuring a navigator."),t.forEach((function(t){var n=e[t],r=function(e){if(!e)return null;return e.screen?e.screen:e}(n);if(!r||!(0,i.isValidElementType)(r)&&!n.getScreen)throw new Error("The component for route '"+t+"' must be a React component. For example:\n\nimport MyScreen from './MyScreen';\n...\n"+t+": MyScreen,\n}\n\nYou can also use a navigator:\n\nimport MyNavigator from './MyNavigator';\n...\n"+t+": MyNavigator,\n}");if(n.screen&&n.getScreen)throw new Error("Route '"+t+"' should declare a screen or a getScreen, not both.")}))}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.createPathParser=t.urlToPathAndParams=t.getParamsFromPath=void 0;var r=u(n(226)),i=u(n(13)),o=n(230),a=u(o),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(59)),l=u(n(33));function u(e){return e&&e.__esModule?e:{default:e}}var c=n(232),f=t.getParamsFromPath=function(e,t,n){return t.slice(1).reduce((function(e,t,r){var i=n[r];if(!i||i.asterisk)return e;var o,a=i.name;if(t)try{o=decodeURIComponent(t)}catch(e){}return e[a]=o||t,e}),(0,i.default)({},e))},d=function(e,t){return e[t.findIndex((function(e){return e.asterisk}))+1]};t.urlToPathAndParams=function(e,t){var n=e.match(/^(.*)\?(.*)$/)||[null,e,{}],i=(0,r.default)(n,3),o=i[1],a=i[2],s=c.parse(a),l=function(e,t){if(Array.isArray(t)){if(1===t.length)return t[0];var n=t,r=Array.isArray(n),i=0;for(n=r?n:n["function"==typeof Symbol&&"function"==typeof Symbol?Symbol.iterator:"@@iterator"]();;){var o;if(r){if(i>=n.length)break;o=n[i++]}else{if((i=n.next()).done)break;o=i.value}var a=o;if(e.startsWith(a))return a}return null}return t}(o,t)||"://",u=o.split(l)[1];return void 0===u&&(u=o),"/"===u&&(u=""),"/"===u[u.length-1]&&(u=u.slice(0,-1)),{path:u,params:s}},t.createPathParser=function(e,t,n){var u,c=n.paths,p=void 0===c?{}:c,h=n.disableRouteNamePaths,v={};Object.keys(e).forEach((function(e){var n;void 0===(n=void 0!==p[e]?p[e]:t[e].path)&&(n=h?null:e),(0,l.default)(null===n||"string"==typeof n,"Route path for "+e+" must be specified as a string, or null.");var r=null!==n,i=[],s=r?(0,a.default)(n,i):null,u=[],c=""===n||!r,f=(0,a.default)(c?"*":n+"/*",u);v[e]={exactRe:s,exactReKeys:i,extendedPathRe:f,extendedPathReKeys:u,isWildcard:c,toPath:null===n?function(){return""}:(0,o.compile)(n)}})),u=Object.entries(v);return{getActionForPathAndParams:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=u,o=Array.isArray(i),a=0;for(i=o?i:i["function"==typeof Symbol&&"function"==typeof Symbol?Symbol.iterator:"@@iterator"]();;){var l;if(o){if(a>=i.length)break;l=i[a++]}else{if((a=i.next()).done)break;l=a.value}var c=l,p=(0,r.default)(c,2),h=p[0],v=p[1],m=v.exactRe,y=v.exactReKeys,g=v.extendedPathRe,b=v.extendedPathReKeys,_=e[h],w=m&&m.exec(t);if(w&&w.length){var S=g&&g.exec(t),O=null;if(S&&_){var E=d(S,b);O=_.getActionForPathAndParams(E,n)}return s.navigate({routeName:h,params:f(n,w,y),action:O})}}var T=u,k=Array.isArray(T),x=0;for(T=k?T:T["function"==typeof Symbol&&"function"==typeof Symbol?Symbol.iterator:"@@iterator"]();;){var P;if(k){if(x>=T.length)break;P=T[x++]}else{if((x=T.next()).done)break;P=x.value}var C=P,N=(0,r.default)(C,2),R=N[0],A=N[1],I=A.extendedPathRe,j=A.extendedPathReKeys,M=e[R],D=I&&I.exec(t);if(D&&D.length){var L=d(D,j),F=null;if(M&&(F=M.getActionForPathAndParams(L,n)),!F)continue;return s.navigate({routeName:R,params:f(n,D,j),action:F})}}return null},getPathAndParamsForRoute:function(t){var n=t.routeName,r=t.params,o=e[n],a=v[n],s=a.toPath,l=a.exactReKeys,u=s(r),c={};if(r&&Object.keys(r).filter((function(e){return!l.find((function(t){return t.name===e}))})).forEach((function(e){c[e]=r[e]})),o){var f=o.getPathAndParamsForState(t);return{path:u?u+"/"+f.path:f.path,params:f.params?(0,i.default)({},c,f.params):c}}return{path:u,params:c}}}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{forwardRef:!0},n=function(n){function c(){return(0,i.default)(this,c),(0,a.default)(this,(0,s.default)(c).apply(this,arguments))}return(0,l.default)(c,n),(0,o.default)(c,[{key:"render",value:function(){var n=this,i=this.props.navigation;return u.default.createElement(d.default.Consumer,{__source:{fileName:h,lineNumber:17}},(function(o){var a=i||o;return(0,f.default)(!!a,"withNavigation can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context."),u.default.createElement(e,(0,r.default)({},n.props,{navigation:a,ref:t.forwardRef?n.props.onRef:void 0,__source:{fileName:h,lineNumber:25}}))}))}}]),c}(u.default.Component);return n.displayName="withNavigation("+(e.displayName||e.name)+")",(0,c.default)(n,e)};var r=p(n(31)),i=p(n(15)),o=p(n(16)),a=p(n(17)),s=p(n(18)),l=p(n(19)),u=p(n(1)),c=p(n(131)),f=p(n(33)),d=p(n(61));function p(e){return e&&e.__esModule?e:{default:e}}var h="/Users/satya/Workspace/Callstack/react-navigation-core/src/views/withNavigation.js"},function(e,t,n){"use strict";n.r(t);var r=n(52),i=n(26),o=n(9),a=n(1),s=n(32),l=n(35),u=n(7),c=n(30);n(0);var f=o.canUseDOM&&/Android/i.test(navigator&&navigator.userAgent),d={},p=function(e){return function(t){if(e)return t.nativeEvent.text=t.target.value,e(t)}},h=function(e,t){if(e&&t){var n=e.selectionEnd,r=e.selectionStart,i=t.start,o=t.end;return i!==r||o!==n}return!1},v=function(e,t){try{if(h(e,t)){var n=t.start,r=t.end;f?setTimeout((function(){return e.setSelectionRange(n,r||n)}),10):e.setSelectionRange(n,r||n)}}catch(e){}},m=function(e){var t,n;function r(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this)._handleBlur=function(e){var n=t.props.onBlur;c.a._currentlyFocusedNode=null,n&&n(e)},t._handleContentSizeChange=function(){var e=t.props,n=e.onContentSizeChange;if(e.multiline&&n){var r=t._node.scrollHeight,i=t._node.scrollWidth;r===t._nodeHeight&&i===t._nodeWidth||(t._nodeHeight=r,t._nodeWidth=i,n({nativeEvent:{contentSize:{height:t._nodeHeight,width:t._nodeWidth}}}))}},t._handleChange=function(e){var n=t.props,r=n.onChange,i=n.onChangeText,o=e.nativeEvent.text;t._handleContentSizeChange(),r&&r(e),i&&i(o),t._handleSelectionChange(e)},t._handleFocus=function(e){var n=t.props,r=n.clearTextOnFocus,i=n.onFocus,o=n.selectTextOnFocus,a=t._node;c.a._currentlyFocusedNode=t._node,i&&i(e),r&&t.clear(),o&&a&&a.select()},t._handleKeyDown=function(e){e.stopPropagation(),("ArrowLeft"===e.key||"ArrowUp"===e.key||"ArrowRight"===e.key||"ArrowDown"===e.key||"Backspace"===e.key||"Escape"===e.key||"Enter"===e.key&&e.metaKey||"Tab"===e.key)&&t._handleKeyPress(e)},t._handleKeyPress=function(e){var n=t.props,r=n.blurOnSubmit,i=n.multiline,o=n.onKeyPress,a=n.onSubmitEditing,s=null==r?!i:r;if(o){var l=e.key;l&&(e.nativeEvent={altKey:e.altKey,ctrlKey:e.ctrlKey,key:l,metaKey:e.metaKey,shiftKey:e.shiftKey,target:e.target},o(e))}e.isDefaultPrevented()||"Enter"!==e.key||e.shiftKey||(!r&&i||!a||(e.preventDefault(),e.nativeEvent={target:e.target,text:e.target.value},a(e)),s&&t.blur())},t._handleSelectionChange=function(e){var n=t.props,r=n.onSelectionChange,i=n.selection,o=void 0===i?d:i;if(r)try{var a=e.target;if(h(a,o)){var s=a.selectionStart,l=a.selectionEnd;e.nativeEvent.selection={start:s,end:l},r(e)}}catch(e){}},t._setNode=function(e){t._node=Object(u.default)(e),t._node&&t._handleContentSizeChange()},t}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.clear=function(){this._node.value=""},i.isFocused=function(){return c.a.currentlyFocusedField()===this._node},i.componentDidMount=function(){v(this._node,this.props.selection),document.activeElement===this._node&&(c.a._currentlyFocusedNode=this._node)},i.componentDidUpdate=function(){v(this._node,this.props.selection)},i.render=function(){var e,t=this.props,n=t.autoComplete,r=t.autoCorrect,i=t.editable,o=t.keyboardType,a=t.multiline,l=t.numberOfLines,u=t.returnKeyType,c=t.secureTextEntry,f=(t.blurOnSubmit,t.clearTextOnFocus,t.onChangeText,t.onLayout,t.onSelectionChange,t.onSubmitEditing,t.selection,t.selectTextOnFocus,t.spellCheck),d=(t.accessibilityViewIsModal,t.allowFontScaling,t.caretHidden,t.clearButtonMode,t.dataDetectorTypes,t.disableFullscreenUI,t.enablesReturnKeyAutomatically,t.hitSlop,t.inlineImageLeft,t.inlineImagePadding,t.inputAccessoryViewID,t.keyboardAppearance,t.maxFontSizeMultiplier,t.needsOffscreenAlphaCompositing,t.onAccessibilityTap,t.onContentSizeChange,t.onEndEditing,t.onMagicTap,t.onScroll,t.removeClippedSubviews,t.renderToHardwareTextureAndroid,t.returnKeyLabel,t.scrollEnabled,t.selectionColor,t.selectionState,t.shouldRasterizeIOS,t.textBreakStrategy,t.textContentType,t.underlineColorAndroid,function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(t,["autoComplete","autoCorrect","editable","keyboardType","multiline","numberOfLines","returnKeyType","secureTextEntry","blurOnSubmit","clearTextOnFocus","onChangeText","onLayout","onSelectionChange","onSubmitEditing","selection","selectTextOnFocus","spellCheck","accessibilityViewIsModal","allowFontScaling","caretHidden","clearButtonMode","dataDetectorTypes","disableFullscreenUI","enablesReturnKeyAutomatically","hitSlop","inlineImageLeft","inlineImagePadding","inputAccessoryViewID","keyboardAppearance","maxFontSizeMultiplier","needsOffscreenAlphaCompositing","onAccessibilityTap","onContentSizeChange","onEndEditing","onMagicTap","onScroll","removeClippedSubviews","renderToHardwareTextureAndroid","returnKeyLabel","scrollEnabled","selectionColor","selectionState","shouldRasterizeIOS","textBreakStrategy","textContentType","underlineColorAndroid"]));switch(o){case"email-address":e="email";break;case"number-pad":case"numeric":e="number";break;case"phone-pad":e="tel";break;case"search":case"web-search":e="search";break;case"url":e="url";break;default:e="text"}c&&(e="password");var h=a?"textarea":"input";return Object.assign(d,{autoComplete:"off"===n?"noop":n,autoCorrect:r?"on":"off",classList:[y.textinput],dir:"auto",enterkeyhint:u,onBlur:p(this._handleBlur),onChange:p(this._handleChange),onFocus:p(this._handleFocus),onKeyDown:this._handleKeyDown,onKeyPress:this._handleKeyPress,onSelect:p(this._handleSelectionChange),readOnly:!i,ref:this._setNode,spellCheck:null!=f?f:r}),a?d.rows=l:d.type=e,Object(s.a)(h,d)},r}(a.Component);m.displayName="TextInput",m.defaultProps={autoCapitalize:"sentences",autoComplete:"on",autoCorrect:!0,editable:!0,keyboardType:"default",multiline:!1,numberOfLines:1,secureTextEntry:!1},m.State=c.a,m.propTypes={};var y=l.a.create({textinput:{MozAppearance:"textfield",WebkitAppearance:"none",backgroundColor:"transparent",border:"0 solid black",borderRadius:0,boxSizing:"border-box",font:"14px System",padding:0,resize:"none"}});t.default=Object(r.a)(Object(i.a)(m))},function(e,t,n){var r="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/@react-navigation/native/dist/Scrollables.js",i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=h(n(1)),a=h(n(38)),s=h(n(8)),l=h(n(105)),u=h(n(293)),c=h(n(63)),f=n(97),d=h(n(134)),p=h(n(133));function h(e){return e&&e.__esModule?e:{default:e}}var v=void 0;function m(e){var t=e.onRefresh;return t?((0,p.default)("boolean"==typeof e.refreshing,"`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `"+JSON.stringify(e.refreshing)+"`"),i({},e,{refreshControl:null==e.refreshControl?o.default.createElement(c.default,{refreshing:e.refreshing,onRefresh:t,progressViewOffset:e.progressViewOffset,__source:{fileName:r,lineNumber:23}}):e.refreshControl})):e}v="android"===s.default.OS?(0,d.default)(a.default):(0,d.default)(f.ScrollView);var y=o.default.forwardRef((function(e,t){return o.default.createElement(l.default,i({ref:t},e,{renderScrollComponent:function(e){return o.default.createElement(v,i({},m(e),{__source:{fileName:r,lineNumber:30}}))},__source:{fileName:r,lineNumber:30}}))})),g=o.default.forwardRef((function(e,t){return o.default.createElement(u.default,i({ref:t},e,{renderScrollComponent:function(e){return o.default.createElement(v,i({},m(e),{__source:{fileName:r,lineNumber:32}}))},__source:{fileName:r,lineNumber:32}}))}));e.exports={ScrollView:v,FlatList:y,SectionList:g}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(252);Object.defineProperty(t,"Swipeable",{enumerable:!0,get:function(){return s(r).default}});var i=n(273);Object.defineProperty(t,"DrawerLayout",{enumerable:!0,get:function(){return s(i).default}});var o=n(78);Object.keys(o).forEach((function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return o[e]}})}));var a=n(275);function s(e){return e&&e.__esModule?e:{default:e}}Object.keys(a).forEach((function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}})}))},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/react-native-gesture-handler/createNativeWrapper.js",i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=function(n){function l(){var e,t,n;u(this,l);for(var r=arguments.length,i=Array(r),o=0;o<r;o++)i[o]=arguments[o];return t=n=c(this,(e=l.__proto__||Object.getPrototypeOf(l)).call.apply(e,[this].concat(i))),n._refHandler=function(e){for(var t=e;null!=t;){var r=Object.getOwnPropertyNames(t),i=Array.isArray(r),o=0;for(r=i?r:r["function"==typeof Symbol&&"function"==typeof Symbol?Symbol.iterator:"@@iterator"]();;){var a;if(i){if(o>=r.length)break;a=r[o++]}else{if((o=r.next()).done)break;a=o.value}var s=a;s.startsWith("_")||s.startsWith("component")||d.has(s)||"function"!=typeof t[s]||void 0!==n[s]||(t[s].prototype?n[s]=t[s].bind(e):n[s]=t[s])}t=Object.getPrototypeOf(t)}},c(n,t)}return f(l,n),o(l,[{key:"render",value:function(){var n=this,o=Object.keys(this.props).reduce((function(e,t){return-1!==p.indexOf(t)&&(e[t]=n.props[t]),e}),i({},t));return a.default.createElement(s.default,i({},o,{__source:{fileName:r,lineNumber:79}}),a.default.createElement(e,i({},this.props,{ref:this._refHandler,__source:{fileName:r,lineNumber:80}})))}}]),l}(a.default.Component);return n.propTypes=i({},e.propTypes),n.displayName=e.displayName||"ComponentWrapper",n};var a=l(n(1)),s=l(n(136));function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function f(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var d=new Set(["replaceState","isMounted"]),p=["id","minPointers","enabled","waitFor","simultaneousHandlers","shouldCancelWhenOutside","hitSlop","onGestureEvent","onHandlerStateChange","onBegan","onFailed","onCancelled","onActivated","onEnded","shouldActivateOnStart","disallowInterruption","onGestureHandlerEvent","onGestureHandlerStateChange"]},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(("function"==typeof Symbol?Symbol.iterator:"@@iterator")in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e["function"==typeof Symbol?Symbol.iterator:"@@iterator"]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=f(n(37)),s=f(n(7)),l=f(n(43)),u=n(50),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(100));function f(e){return e&&e.__esModule?e:{default:e}}var d=0,p=function(){function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.isGestureRunning=!1,this.hasGestureFailed=!1,this.view=null,this.config={},this.hammer=null,this.pendingGestures={},this.oldState=l.default.UNDETERMINED,this.previousState=l.default.UNDETERMINED,this.clearSelfAsPending=function(){if(Array.isArray(t.config.waitFor)){var e=t.config.waitFor,n=Array.isArray(e),r=0;for(e=n?e:e["function"==typeof Symbol&&"function"==typeof Symbol?Symbol.iterator:"@@iterator"]();;){var i;if(n){if(r>=e.length)break;i=e[r++]}else{if((r=e.next()).done)break;i=r.value}i.removePendingGesture(t.id)}}},this.destroy=function(){t.clearSelfAsPending(),t.hammer&&(t.hammer.stop(),t.hammer.destroy()),t.hammer=null},this.isPointInView=function(e){var n=e.x,r=e.y,i=t.view.getBoundingClientRect();return n>=i.left&&n<=i.right&&r>=i.top&&r<=i.bottom},this.sendEvent=function(e){var n=t.ref.props,r=n.onGestureHandlerStateChange,i=n.onGestureHandlerEvent,o=t.transformEventData(e);e.isFinal&&(t.oldState=l.default.UNDETERMINED,t.previousState=l.default.UNDETERMINED),h("onGestureEvent",i,o),h("onHandlerStateChange",r,o)},this.sync=function(){var e=t.hammer.get(t.name);if(e){var n=t.getHammerConfig();e.set(i({},n,{enable:function(e,n){if(!t.config.enabled)return t.isGestureRunning=!1,t.hasGestureFailed=!1,!1;if(!n||!e.options||void 0===n.maxPointers)return t.shouldEnableGestureOnSetup;if(t.hasGestureFailed)return!1;if(!t.isDiscrete){if(t.isGestureRunning)return!0;if(t._stillWaiting=t._getPendingGestures(),t._stillWaiting.length){var r=t._stillWaiting,o=Array.isArray(r),a=0;for(r=o?r:r["function"==typeof Symbol&&"function"==typeof Symbol?Symbol.iterator:"@@iterator"]();;){var s;if(o){if(a>=r.length)break;s=r[a++]}else{if((a=r.next()).done)break;s=a.value}var l=s;if(!l.isDiscrete&&l.isGestureRunning)return t.hasGestureFailed=!0,t.isGestureRunning=!1,!1}return!1}}if(!t._hasCustomActivationCriteria)return!0;var u=null==t.initialRotation?0:n.rotation-t.initialRotation,c=t.isGestureEnabledForEvent(t.getConfig(),e,i({},n,{deltaRotation:u})),f=c.success;return c.failed&&(t.simulateCancelEvent(n),t.hasGestureFailed=!0),f}}))}},this._gestureInstance=d++}return o(e,[{key:"id",get:function(){return""+this.name+this._gestureInstance}},{key:"isDiscrete",get:function(){return!1}},{key:"shouldEnableGestureOnSetup",get:function(){throw new Error("Must override GestureHandler.shouldEnableGestureOnSetup")}}]),o(e,[{key:"getConfig",value:function(){return this.config}},{key:"onWaitingEnded",value:function(e){}},{key:"removePendingGesture",value:function(e){delete this.pendingGestures[e]}},{key:"addPendingGesture",value:function(e){this.pendingGestures[e.id]=e}},{key:"isGestureEnabledForEvent",value:function(){return{success:!0}}},{key:"parseNativeEvent",value:function(e){return e}},{key:"updateHasCustomActivationCriteria",value:function(e){return!0}},{key:"updateGestureConfig",value:function(e){var t=e.enabled,n=void 0===t||t,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["enabled"]);if(this.clearSelfAsPending(),this.config=function(e){var t=i({},e);"minDist"in e&&(t.minDist=e.minDist,t.minDistSq=t.minDist*t.minDist);"minVelocity"in e&&(t.minVelocity=e.minVelocity,t.minVelocitySq=t.minVelocity*t.minVelocity);"maxDist"in e&&(t.maxDist=e.maxDist,t.maxDistSq=e.maxDist*e.maxDist);t.waitFor="waitFor"in e?(n=e.waitFor,null==n?[]:Array.isArray(n)?n:[n]).map((function(e){var t=e._handlerTag;return c.getHandler(t)})).filter((function(e){return e})):null;var n;return["minPointers","maxPointers","minDist","maxDist","maxDistSq","minVelocitySq","minDistSq","minVelocity","failOffsetXStart","failOffsetYStart","failOffsetXEnd","failOffsetYEnd","activeOffsetXStart","activeOffsetXEnd","activeOffsetYStart","activeOffsetYEnd"].forEach((function(e){void 0===t[e]&&(t[e]=Number.NaN)})),t}(i({enabled:n},r)),this._hasCustomActivationCriteria=this.updateHasCustomActivationCriteria(this.config),Array.isArray(this.config.waitFor)){var o=this.config.waitFor,a=Array.isArray(o),s=0;for(o=a?o:o["function"==typeof Symbol?Symbol.iterator:"@@iterator"]();;){var l;if(a){if(s>=o.length)break;l=o[s++]}else{if((s=o.next()).done)break;l=s.value}l.addPendingGesture(this)}}return this.hammer&&this.sync(),this.config}},{key:"getState",value:function(e){return u.EventMap[e]}},{key:"transformEventData",value:function(e){var t=e.eventType,n=e.maxPointers,r=e.changedPointers[0],o=this.isPointInView({x:r.clientX,y:r.clientY}),a=this.getState(t);return a!==this.previousState&&(this.oldState=this.previousState,this.previousState=a),{nativeEvent:i({numberOfPointers:n,state:a,pointerInside:o},this.transformNativeEvent(e),{handlerTag:this.handlerTag,target:this.ref,oldState:this.oldState}),timeStamp:Date.now()}}},{key:"transformNativeEvent",value:function(e){return{}}},{key:"cancelPendingGestures",value:function(e){var t=Object.values(this.pendingGestures),n=Array.isArray(t),r=0;for(t=n?t:t["function"==typeof Symbol?Symbol.iterator:"@@iterator"]();;){var i;if(n){if(r>=t.length)break;i=t[r++]}else{if((r=t.next()).done)break;i=r.value}var o=i;o&&o.isGestureRunning&&(o.hasGestureFailed=!0,o.cancelEvent(e))}}},{key:"notifyPendingGestures",value:function(){var e=Object.values(this.pendingGestures),t=Array.isArray(e),n=0;for(e=t?e:e["function"==typeof Symbol?Symbol.iterator:"@@iterator"]();;){var r;if(t){if(n>=e.length)break;r=e[n++]}else{if((n=e.next()).done)break;r=n.value}r&&r.onWaitingEnded(this)}}},{key:"onGestureEnded",value:function(e){this.isGestureRunning=!1,this.cancelPendingGestures(e)}},{key:"forceInvalidate",value:function(e){this.isGestureRunning&&(this.hasGestureFailed=!0,this.cancelEvent(e))}},{key:"cancelEvent",value:function(e){this.notifyPendingGestures(),this.sendEvent(i({},e,{eventType:a.default.INPUT_CANCEL,isFinal:!0})),this.onGestureEnded(e)}},{key:"onRawEvent",value:function(e){e.isFirst&&(this.hasGestureFailed=!1)}},{key:"setView",value:function(e){var t=this;if(null==e)return this.destroy(),void(this.view=null);this.ref=e,this.view=(0,s.default)(e),this.hammer=new a.default.Manager(this.view),this.oldState=l.default.UNDETERMINED,this.previousState=l.default.UNDETERMINED;var n=new(0,this.NativeGestureClass)(this.getHammerConfig());this.hammer.add(n),this.hammer.on("hammer.input",(function(e){if(!t.config.enabled)return t.hasGestureFailed=!1,void(t.isGestureRunning=!1);t.onRawEvent(e),null===t.initialRotation&&0!==e.rotation&&(t.initialRotation=e.rotation),e.isFinal&&setTimeout((function(){t.initialRotation=null,t.hasGestureFailed=!1}))})),this.setupEvents(),this.sync()}},{key:"setupEvents",value:function(){var e=this;this.isDiscrete||(this.hammer.on(this.name+"start",(function(t){return e.onStart(t)})),this.hammer.on(this.name+"end "+this.name+"cancel",(function(t){return e.onGestureEnded(t)}))),this.hammer.on(this.name,(function(t){return e.onGestureActivated(t)}))}},{key:"onStart",value:function(e){var t=e.deltaX,n=e.deltaY,r=e.rotation;this.isGestureRunning=!0,this.__initialX=t,this.__initialY=n,this.initialRotation=r}},{key:"onGestureActivated",value:function(e){this.sendEvent(e)}},{key:"onSuccess",value:function(){}},{key:"_getPendingGestures",value:function(){return Array.isArray(this.config.waitFor)&&this.config.waitFor.length?this.config.waitFor.filter((function(e){return!1===e.hasGestureFailed})):[]}},{key:"getHammerConfig",value:function(){return{pointers:this.config.minPointers===this.config.maxPointers?this.config.minPointers:0}}},{key:"simulateCancelEvent",value:function(e){}},{key:"NativeGestureClass",get:function(){throw new Error("Must override GestureHandler.NativeGestureClass")}}]),e}();function h(e,t,n){if(t)if("function"==typeof t)t(n);else if("__getHandler"in t&&"function"==typeof t.__getHandler)h(e,t.__getHandler(),n);else if("__nodeConfig"in t){var i=t.__nodeConfig.argMapping;if(Array.isArray(i))for(var o in i){var a=r(i[o],1)[0];a in n.nativeEvent&&(t.__nodeConfig.argMapping[o]=[a,n.nativeEvent[a]])}}}t.default=p},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.getHandler=i,t.createGestureHandler=function(e,t){if(e in r)throw new Error("Handler with tag "+e+" already exists");r[e]=t,r[e].handlerTag=e},t.dropGestureHandler=function(e){i(e).destroy(),delete r[e]},t.getNodes=function(){return n({},r)};var r={};function i(e){if(e in r)return r[e];throw new Error("No handler for tag "+e)}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(99),s=(r=a)&&r.__esModule?r:{default:r},l=n(44);function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=function(e){function t(){return u(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"shouldFailUnderCustomCriteria",value:function(e,t){var n=e.x,r=e.y,i=e.deltaX,o=e.deltaY,a=t.maxDeltaX,s=t.maxDeltaY,u=t.maxDistSq;return!(!t.shouldCancelWhenOutside||this.isPointInView({x:n,y:r}))||((0,l.TEST_MAX_IF_NOT_NAN)(Math.abs(i),a)||(0,l.TEST_MAX_IF_NOT_NAN)(Math.abs(o),s)||(0,l.TEST_MAX_IF_NOT_NAN)(Math.abs(o*o+i*i),u))}},{key:"transformNativeEvent",value:function(e){var t=e.x,n=e.y;return{absoluteX:t,absoluteY:n,x:t,y:n}}},{key:"isGestureEnabledForEvent",value:function(e,t,n){var r=e.minPointers,o=e.maxPointers,a=(e.maxDist,e.maxDeltaX),s=e.maxDeltaY,l=e.maxDistSq,u=e.shouldCancelWhenOutside,c=n.maxPointers,f=n.center,d=n.deltaX,p=n.deltaY,h=(function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}(n,["maxPointers","center","deltaX","deltaY"]),c>=r&&c<=o);return this.shouldFailUnderCustomCriteria(i({},f,{deltaX:d,deltaY:p}),{maxDeltaX:a,maxDeltaY:s,maxDistSq:l,shouldCancelWhenOutside:u})||!h&&this.isGestureRunning?{failed:!0}:{success:h}}},{key:"isDiscrete",get:function(){return!0}},{key:"shouldEnableGestureOnSetup",get:function(){return!0}}]),t}(s.default);t.default=f},function(e,t,n){"use strict";n.r(t);var r=n(73);t.default=r.a},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(62)),i=a(n(21)),o=a(n(157));function a(e){return e&&e.__esModule?e:{default:e}}function s(e){if(!e)return!0;var t=e.descriptor.options,n=t.header,r=t.headerShown;return null!==n&&!1!==r}var l=function(e,t,n,r){return{inputRange:[t,t+.001,n-.9,n-.2,n,r-.001,r],outputRange:[0,s(e[t])?0:1,s(e[t])?0:1,s(e[t])?.3:1,s(e[n])?1:0,s(e[r])?0:1,0],extrapolate:"clamp"}};var u=r.default.get("window").width/2-70-25;var c=r.default.get("window").width/2-70+25;var f={opacity:1},d={opacity:0};function p(e){var t=e.navigation,n=e.scene;return t.state.index===n.index?f:d}var h=r.default.get("window").width;var v=p;t.default={forLayout:function(e){var t=e.layout,n=e.position,a=e.scene,l=e.scenes;if("float"!==e.mode)return{};var u=function(e){return!e[e.length-1].isActive}(l),c=(0,o.default)(e);if(!c)return{};var f=c.first,d=c.last,p=a.index,h=t.initWidth||r.default.get("window").width;if(u&&!s(l[p])&&!s(l[d])||!u&&!s(l[f])&&!s(l[p]))return{transform:[{translateX:h}]};var v=i.default.isRTL?-1:1;return{transform:[{translateX:n.interpolate({inputRange:[f,p,d],outputRange:[v*(s(l[f])?0:h),v*(s(l[p])?0:u?h:-h),v*(s(l[d])?0:-h)],extrapolate:"clamp"})}]}},forLeft:function(e){var t=e.position,n=e.scene,r=e.scenes,i=(0,o.default)(e);if(!i)return{opacity:0};var a=i.first,s=i.last,u=n.index;return{opacity:t.interpolate(l(r,a,u,s))}},forLeftButton:function(e){var t=e.position,n=e.scene,r=e.scenes,i=(0,o.default)(e);if(!i)return{opacity:0};var a=i.first,l=i.last,u=n.index,c=[a,a+.001,a+Math.abs(u-a)/2,u,l-Math.abs(l-u)/2,l-.001,l],f=[0,s(r[a])?0:1,s(r[a])?.3:1,s(r[u])?1:0,s(r[l])?.3:1,s(r[l])?0:1,0];return{opacity:t.interpolate({inputRange:c,outputRange:f,extrapolate:"clamp"})}},forLeftLabel:function(e){var t=e.position,n=e.scene,r=e.scenes,a=(0,o.default)(e);if(!a)return{opacity:0};var l=a.first,c=a.last,f=n.index,d=u;return{opacity:t.interpolate({inputRange:[l,l+.001,f-.35,f,f+.5,c-.001,c],outputRange:[0,s(r[l])?0:1,s(r[l])?0:1,s(r[f])?1:0,s(r[c])?.5:1,s(r[c])?0:1,0],extrapolate:"clamp"}),transform:[{translateX:t.interpolate({inputRange:[l,l+.001,f,c-.001,c],outputRange:i.default.isRTL?[1.5*-d,s(r[l])?1.5*-d:0,0,s(r[c])?d:0,d]:[d,s(r[l])?d:0,0,s(r[c])?1.5*-d:0,1.5*-d],extrapolate:"clamp"})}]}},forCenterFromLeft:function(e){var t=e.position,n=e.scene,r=e.scenes,a=(0,o.default)(e);if(!a)return{opacity:0};var l=a.first,u=a.last,f=n.index,d=c;return{opacity:t.interpolate({inputRange:[l,l+.001,f-.5,f,f+.7,u-.001,u],outputRange:[0,s(r[l])?0:1,s(r[l])?0:1,s(r[f])?1:0,s(r[u])?0:1,s(r[u])?0:1,0],extrapolate:"clamp"}),transform:[{translateX:t.interpolate({inputRange:[l,l+.001,f,u-.001,u],outputRange:i.default.isRTL?[-d,s(r[l])?-d:0,0,s(r[u])?d:0,d]:[d,s(r[l])?d:0,0,s(r[u])?-d:0,-d],extrapolate:"clamp"})}]}},forCenter:function(e){var t=e.position,n=e.scene,r=e.scenes,i=(0,o.default)(e);if(!i)return{opacity:0};var a=i.first,s=i.last,u=n.index;return{opacity:t.interpolate(l(r,a,u,s))}},forRight:function(e){var t=e.position,n=e.scene,r=e.scenes,i=(0,o.default)(e);if(!i)return{opacity:0};var a=i.first,s=i.last,u=n.index;return{opacity:t.interpolate(l(r,a,u,s))}},forBackground:v,forBackgroundWithInactiveHidden:p,forBackgroundWithFade:function(e){var t=e.position,n=e.scene,r=(0,o.default)(e);return r?{opacity:t.interpolate({inputRange:[r.first,n.index,r.last],outputRange:[0,1,0],extrapolate:"clamp"})}:{opacity:0}},forBackgroundWithTranslation:function(e){var t=e.position,n=e.scene,r=(0,o.default)(e);if(!r)return{opacity:0};var a=r.first,s=r.last,l=n.index,u=[h,0,-h];return{transform:[{translateX:t.interpolate({inputRange:[a,l,s],outputRange:i.default.isRTL?u.reverse():u,extrapolate:"clamp"})}]}}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,i=u(n(13)),o=u(n(28)),a=u(n(102)),s=u(n(8)),l=u(n(159));function u(e){return e&&e.__esModule?e:{default:e}}var c={transitionSpec:r=(0,n(160).supportsImprovedSpringAnimation)()?{timing:o.default.spring,stiffness:1e3,damping:500,mass:3,overshootClamping:!0,restDisplacementThreshold:.01,restSpeedThreshold:.01}:{duration:500,easing:a.default.bezier(.2833,.99,.31833,.99),timing:o.default.timing},screenInterpolator:l.default.forHorizontal,containerStyleLight:{backgroundColor:"#eee"},containerStyleDark:{backgroundColor:"#000"}},f={transitionSpec:r,screenInterpolator:l.default.forVertical,containerStyleLight:{backgroundColor:"#eee"},containerStyleDark:{backgroundColor:"#000"}},d={transitionSpec:{duration:350,easing:a.default.out(a.default.poly(5)),timing:o.default.timing},screenInterpolator:l.default.forFadeFromBottomAndroid},p={transitionSpec:{duration:150,easing:a.default.in(a.default.linear),timing:o.default.timing},screenInterpolator:l.default.forFadeToBottomAndroid},h={transitionSpec:{duration:0,timing:o.default.timing},screenInterpolator:l.default.forNoAnimation,containerStyleLight:{backgroundColor:"#eee"},containerStyleDark:{backgroundColor:"#000"}};function v(e,t,n){return"ios"!==s.default.OS?t&&e.index<t.index?p:d:n?f:c}t.default={defaultTransitionConfig:v,getTransitionConfig:function(e,t,n,r){var o=v(t,n,r);return e?(0,i.default)({},o,e(t,n,r)):o},SlideFromRightIOS:c,ModalSlideFromBottomIOS:f,FadeInFromBottomAndroid:d,FadeOutToBottomAndroid:p,NoAnimation:h}},function(e,t,n){"use strict";n.r(t);var r=n(29),i=n(1),o=n.n(i),a=n(3),s=n(57),l=n(2),u=n.n(l);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){d(e,t,n[t])}))}return e}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var p=f({},s.a.defaultProps,{numColumns:1}),h=function(e){var t,n;n=e,(t=l).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=l.prototype;function l(t){var n;return(n=e.call(this,t)||this)._hasWarnedLegacy=!1,n._virtualizedListPairs=[],n._captureRef=function(e){n._listRef=e},n._getItem=function(e,t){var r=n.props.numColumns;if(r>1){for(var i=[],o=0;o<r;o++){var a=e[t*r+o];a&&i.push(a)}return i}return e[t]},n._getItemCount=function(e){return e?Math.ceil(e.length/n.props.numColumns):0},n._keyExtractor=function(e,t){var r=n.props,i=r.keyExtractor,o=r.numColumns;return o>1?(u()(Array.isArray(e),"FlatList: Encountered internal consistency error, expected each item to consist of an array with 1-%s columns; instead, received a single item.",o),e.map((function(e,n){return i(e,t*o+n)})).join(":")):i(e,t)},n._renderItem=function(e){var t=n.props,r=t.renderItem,i=t.numColumns,s=t.columnWrapperStyle;if(i>1){var l=e.item,c=e.index;return u()(Array.isArray(l),"Expected array of items with numColumns > 1"),o.a.createElement(a.default,{style:[{flexDirection:"row"},s]},l.map((function(t,n){var a=r({item:t,index:c*i+n,separators:e.separators});return a&&o.a.cloneElement(a,{key:n})})))}return r(e)},n.props.viewabilityConfigCallbackPairs?n._virtualizedListPairs=n.props.viewabilityConfigCallbackPairs.map((function(e){return{viewabilityConfig:e.viewabilityConfig,onViewableItemsChanged:n._createOnViewableItemsChanged(e.onViewableItemsChanged)}})):n.props.onViewableItemsChanged&&n._virtualizedListPairs.push({viewabilityConfig:n.props.viewabilityConfig,onViewableItemsChanged:n._createOnViewableItemsChanged(n.props.onViewableItemsChanged)}),n}return i.scrollToEnd=function(e){this._listRef&&this._listRef.scrollToEnd(e)},i.scrollToIndex=function(e){this._listRef&&this._listRef.scrollToIndex(e)},i.scrollToItem=function(e){this._listRef&&this._listRef.scrollToItem(e)},i.scrollToOffset=function(e){this._listRef&&this._listRef.scrollToOffset(e)},i.recordInteraction=function(){this._listRef&&this._listRef.recordInteraction()},i.flashScrollIndicators=function(){this._listRef&&this._listRef.flashScrollIndicators()},i.getScrollResponder=function(){if(this._listRef)return this._listRef.getScrollResponder()},i.getScrollableNode=function(){if(this._listRef)return this._listRef.getScrollableNode()},i.setNativeProps=function(e){this._listRef&&this._listRef.setNativeProps(e)},i.UNSAFE_componentWillMount=function(){this._checkProps(this.props)},i.UNSAFE_componentWillReceiveProps=function(e){u()(e.numColumns===this.props.numColumns,"Changing numColumns on the fly is not supported. Change the key prop on FlatList when changing the number of columns to force a fresh render of the component."),u()(e.onViewableItemsChanged===this.props.onViewableItemsChanged,"Changing onViewableItemsChanged on the fly is not supported"),u()(e.viewabilityConfig===this.props.viewabilityConfig,"Changing viewabilityConfig on the fly is not supported"),u()(e.viewabilityConfigCallbackPairs===this.props.viewabilityConfigCallbackPairs,"Changing viewabilityConfigCallbackPairs on the fly is not supported"),this._checkProps(e)},i._checkProps=function(e){var t=e.getItem,n=e.getItemCount,r=e.horizontal,i=e.legacyImplementation,o=e.numColumns,a=e.columnWrapperStyle,s=e.onViewableItemsChanged,l=e.viewabilityConfigCallbackPairs;u()(!t&&!n,"FlatList does not support custom data formats."),o>1?u()(!r,"numColumns does not support horizontal."):u()(!a,"columnWrapperStyle not supported for single column lists"),i&&(u()(1===o,"Legacy list does not support multiple columns."),this._hasWarnedLegacy||(console.warn("FlatList: Using legacyImplementation - some features not supported and performance may suffer"),this._hasWarnedLegacy=!0)),u()(!(s&&l),"FlatList does not support setting both onViewableItemsChanged and viewabilityConfigCallbackPairs.")},i._pushMultiColumnViewable=function(e,t){var n=this.props,r=n.numColumns,i=n.keyExtractor;t.item.forEach((function(n,o){u()(null!=t.index,"Missing index!");var a=t.index*r+o;e.push(f({},t,{item:n,key:i(n,a),index:a}))}))},i._createOnViewableItemsChanged=function(e){var t=this;return function(n){var r=t.props.numColumns;if(e)if(r>1){var i=[],o=[];n.viewableItems.forEach((function(e){return t._pushMultiColumnViewable(o,e)})),n.changed.forEach((function(e){return t._pushMultiColumnViewable(i,e)})),e({viewableItems:o,changed:i})}else e(n)}},i.render=function(){return this.props.legacyImplementation?o.a.createElement(r.a,c({},this.props,{items:this.props.data,ref:this._captureRef})):o.a.createElement(s.a,c({},this.props,{renderItem:this._renderItem,getItem:this._getItem,getItemCount:this._getItemCount,keyExtractor:this._keyExtractor,ref:this._captureRef,viewabilityConfigCallbackPairs:this._virtualizedListPairs}))},l}(o.a.PureComponent);h.defaultProps=p;var v=h;t.default=v},function(e,t,n){"use strict";function r(e){return function(){return e}}var i=function(){};i.thatReturns=r,i.thatReturnsFalse=r(!1),i.thatReturnsTrue=r(!0),i.thatReturnsNull=r(null),i.thatReturnsThis=function(){return this},i.thatReturnsArgument=function(e){return e},e.exports=i},function(e,t,n){"use strict";n.r(t);var r=n(66),i=n.n(r);t.default=function(e){if(null==e)return e;var t=i()(e);return null!=t?t=(t<<24|t>>>8)>>>0:void 0}},function(e,t,n){"use strict";var r=n(72),i=n(80),o=n(109),a=n(0),s=Object(i.a)(o.a),l={accessibilityComponentType:a.string,accessibilityLabel:a.string,accessibilityLiveRegion:Object(a.oneOf)(["assertive","none","polite"]),accessibilityRole:a.string,accessibilityStates:Object(a.arrayOf)(Object(a.oneOf)(["disabled","selected","busy","checked","expanded","grabbed","invalid","pressed"])),accessibilityTraits:Object(a.oneOfType)([a.array,a.string]),accessible:a.bool,children:a.any,hitSlop:r.a,importantForAccessibility:Object(a.oneOf)(["auto","no","no-hide-descendants","yes"]),nativeID:a.string,onBlur:a.func,onClick:a.func,onClickCapture:a.func,onFocus:a.func,onLayout:a.func,onMoveShouldSetResponder:a.func,onMoveShouldSetResponderCapture:a.func,onResponderGrant:a.func,onResponderMove:a.func,onResponderReject:a.func,onResponderRelease:a.func,onResponderTerminate:a.func,onResponderTerminationRequest:a.func,onStartShouldSetResponder:a.func,onStartShouldSetResponderCapture:a.func,onTouchCancel:a.func,onTouchCancelCapture:a.func,onTouchEnd:a.func,onTouchEndCapture:a.func,onTouchMove:a.func,onTouchMoveCapture:a.func,onTouchStart:a.func,onTouchStartCapture:a.func,pointerEvents:Object(a.oneOf)(["auto","box-none","box-only","none"]),style:s,testID:a.string,onContextMenu:a.func,itemID:a.string,itemRef:a.string,itemProp:a.string,itemScope:a.string,itemType:a.string,accessibilityViewIsModal:a.bool,collapsable:a.bool,needsOffscreenAlphaCompositing:a.bool,onAccessibilityTap:a.func,onMagicTap:a.func,removeClippedSubviews:a.bool,renderToHardwareTextureAndroid:a.bool,shouldRasterizeIOS:a.bool,tvParallaxProperties:a.object};t.a=l},function(e,t,n){"use strict";var r=n(0),i=["alternate","alternate-reverse","normal","reverse"],o=["none","forwards","backwards","both"],a=["paused","running"],s={animationDelay:Object(r.oneOfType)([r.string,Object(r.arrayOf)(r.string)]),animationDirection:Object(r.oneOfType)([Object(r.oneOf)(i),Object(r.arrayOf)(i)]),animationDuration:Object(r.oneOfType)([r.string,Object(r.arrayOf)(r.string)]),animationFillMode:Object(r.oneOfType)([Object(r.oneOf)(o),Object(r.arrayOf)(o)]),animationIterationCount:Object(r.oneOfType)([r.number,Object(r.oneOf)(["infinite"]),Object(r.arrayOf)(Object(r.oneOfType)([r.number,Object(r.oneOf)(["infinite"])]))]),animationKeyframes:Object(r.oneOfType)([r.string,r.object,Object(r.arrayOf)(Object(r.oneOfType)([r.string,r.object]))]),animationPlayState:Object(r.oneOfType)([Object(r.oneOf)(a),Object(r.arrayOf)(a)]),animationTimingFunction:Object(r.oneOfType)([r.string,Object(r.arrayOf)(r.string)]),transitionDelay:Object(r.oneOfType)([r.string,Object(r.arrayOf)(r.string)]),transitionDuration:Object(r.oneOfType)([r.string,Object(r.arrayOf)(r.string)]),transitionProperty:Object(r.oneOfType)([r.string,Object(r.arrayOf)(r.string)]),transitionTimingFunction:Object(r.oneOfType)([r.string,Object(r.arrayOf)(r.string)])},l=n(20),u=Object(r.oneOfType)([r.number,r.string]),c=Object(r.oneOf)(["solid","dotted","dashed"]),f={borderColor:l.a,borderBottomColor:l.a,borderEndColor:l.a,borderLeftColor:l.a,borderRightColor:l.a,borderStartColor:l.a,borderTopColor:l.a,borderRadius:u,borderBottomEndRadius:u,borderBottomLeftRadius:u,borderBottomRightRadius:u,borderBottomStartRadius:u,borderTopEndRadius:u,borderTopLeftRadius:u,borderTopRightRadius:u,borderTopStartRadius:u,borderStyle:c,borderBottomStyle:c,borderEndStyle:c,borderLeftStyle:c,borderRightStyle:c,borderStartStyle:c,borderTopStyle:c},d={cursor:Object(r.oneOfType)([r.string,Object(r.oneOf)(["auto","default","none","context-menu","help","pointer","progress","wait","cell","crosshair","text","vertical-text","alias","copy","move","no-drop","not-allowed","e-resize","n-resize","ne-resize","nw-resize","s-resize","se-resize","sw-resize","w-resize","ew-resize","ns-resize","nesw-resize","nwse-resize","col-resize","row-resize","all-scroll","zoom-in","zoom-out","grab","grabbing "])]),touchAction:Object(r.oneOf)(["auto","inherit","manipulation","none","pan-down","pan-left","pan-right","pan-up","pan-x","pan-y","pinch-zoom"]),userSelect:Object(r.oneOf)(["auto","text","none","contain","all"]),willChange:r.string},p=Object(r.oneOf)(["auto","hidden","scroll","visible"]),h=Object(r.oneOf)(["hidden","visible"]),v=Object(r.oneOfType)([r.number,r.string]),m={alignContent:Object(r.oneOf)(["center","flex-end","flex-start","space-around","space-between","stretch"]),alignItems:Object(r.oneOf)(["baseline","center","flex-end","flex-start","stretch"]),alignSelf:Object(r.oneOf)(["auto","baseline","center","flex-end","flex-start","stretch"]),backfaceVisibility:h,borderWidth:v,borderBottomWidth:v,borderEndWidth:v,borderLeftWidth:v,borderRightWidth:v,borderStartWidth:v,borderTopWidth:v,bottom:v,boxSizing:r.string,direction:Object(r.oneOf)(["inherit","ltr","rtl"]),display:r.string,end:v,flex:r.number,flexBasis:v,flexDirection:Object(r.oneOf)(["column","column-reverse","row","row-reverse"]),flexGrow:r.number,flexShrink:r.number,flexWrap:Object(r.oneOf)(["nowrap","wrap","wrap-reverse"]),height:v,justifyContent:Object(r.oneOf)(["center","flex-end","flex-start","space-around","space-between","space-evenly"]),left:v,margin:v,marginBottom:v,marginHorizontal:v,marginEnd:v,marginLeft:v,marginRight:v,marginStart:v,marginTop:v,marginVertical:v,maxHeight:v,maxWidth:v,minHeight:v,minWidth:v,order:r.number,overflow:p,overflowX:p,overflowY:p,padding:v,paddingBottom:v,paddingHorizontal:v,paddingEnd:v,paddingLeft:v,paddingRight:v,paddingStart:v,paddingTop:v,paddingVertical:v,position:Object(r.oneOf)(["absolute","fixed","relative","static","sticky"]),right:v,start:v,top:v,visibility:h,width:v,zIndex:r.number,aspectRatio:r.number,gridAutoColumns:r.string,gridAutoFlow:r.string,gridAutoRows:r.string,gridColumnEnd:r.string,gridColumnGap:r.string,gridColumnStart:r.string,gridRowEnd:r.string,gridRowGap:r.string,gridRowStart:r.string,gridTemplateColumns:r.string,gridTemplateRows:r.string,gridTemplateAreas:r.string},y=Object(r.oneOfType)([r.number,r.string]),g={shadowColor:l.a,shadowOffset:Object(r.shape)({width:y,height:y}),shadowOpacity:r.number,shadowRadius:y,shadowSpread:y},b=Object(r.oneOfType)([r.number,r.string]),_={perspective:Object(r.oneOfType)([r.number,r.string]),perspectiveOrigin:r.string,transform:Object(r.arrayOf)(Object(r.oneOfType)([Object(r.shape)({perspective:b}),Object(r.shape)({rotate:r.string}),Object(r.shape)({rotateX:r.string}),Object(r.shape)({rotateY:r.string}),Object(r.shape)({rotateZ:r.string}),Object(r.shape)({scale:r.number}),Object(r.shape)({scaleX:r.number}),Object(r.shape)({scaleY:r.number}),Object(r.shape)({scaleZ:r.number}),Object(r.shape)({scale3d:r.string}),Object(r.shape)({skewX:r.string}),Object(r.shape)({skewY:r.string}),Object(r.shape)({translateX:b}),Object(r.shape)({translateY:b}),Object(r.shape)({translateZ:b}),Object(r.shape)({translate3d:r.string})])),transformOrigin:r.string,transformStyle:Object(r.oneOf)(["flat","preserve-3d"])};function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var S=Object(r.oneOfType)([r.string,r.number]),O=Object(r.oneOf)(["auto","contain","none"]),E=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){w(e,t,n[t])}))}return e}({},s,f,d,m,g,_,{backgroundColor:l.a,opacity:r.number,elevation:r.number,backdropFilter:r.string,backgroundAttachment:r.string,backgroundBlendMode:r.string,backgroundClip:r.string,backgroundImage:r.string,backgroundOrigin:Object(r.oneOf)(["border-box","content-box","padding-box"]),backgroundPosition:r.string,backgroundRepeat:r.string,backgroundSize:r.string,boxShadow:r.string,clip:r.string,filter:r.string,outlineColor:l.a,outlineOffset:S,outlineStyle:r.string,outlineWidth:S,overscrollBehavior:O,overscrollBehaviorX:O,overscrollBehaviorY:O,scrollbarWidth:Object(r.oneOf)(["auto","none"]),scrollSnapAlign:r.string,scrollSnapType:r.string,WebkitMaskImage:r.string,WebkitOverflowScrolling:Object(r.oneOf)(["auto","touch"])});t.a=E},function(e,t,n){"use strict";e.exports={extractSingleTouch:function(e){var t=e.touches,n=e.changedTouches,r=t&&t.length>0,i=n&&n.length>0;return!r&&i?n[0]:r?t[0]:e}}},function(e,t,n){"use strict";(function(e){var r=n(54),i=n(112),o=n(2),a=n.n(o),s=n(6);function l(e,t){return null==e?t:e}var u=function(t){var n,r;function o(e){var n;if((n=t.call(this)||this)._overshootClamping=l(e.overshootClamping,!1),n._restDisplacementThreshold=l(e.restDisplacementThreshold,.001),n._restSpeedThreshold=l(e.restSpeedThreshold,.001),n._initialVelocity=l(e.velocity,0),n._lastVelocity=l(e.velocity,0),n._toValue=e.toValue,n._delay=l(e.delay,0),n._useNativeDriver=Object(s.c)(e),n.__isInteraction=void 0===e.isInteraction||e.isInteraction,n.__iterations=void 0!==e.iterations?e.iterations:1,void 0!==e.stiffness||void 0!==e.damping||void 0!==e.mass)a()(void 0===e.bounciness&&void 0===e.speed&&void 0===e.tension&&void 0===e.friction,"You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one"),n._stiffness=l(e.stiffness,100),n._damping=l(e.damping,10),n._mass=l(e.mass,1);else if(void 0!==e.bounciness||void 0!==e.speed){a()(void 0===e.tension&&void 0===e.friction&&void 0===e.stiffness&&void 0===e.damping&&void 0===e.mass,"You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one");var r=i.a.fromBouncinessAndSpeed(l(e.bounciness,8),l(e.speed,12));n._stiffness=r.stiffness,n._damping=r.damping,n._mass=1}else{var o=i.a.fromOrigamiTensionAndFriction(l(e.tension,40),l(e.friction,7));n._stiffness=o.stiffness,n._damping=o.damping,n._mass=1}return a()(n._stiffness>0,"Stiffness value must be greater than 0"),a()(n._damping>0,"Damping value must be greater than 0"),a()(n._mass>0,"Mass value must be greater than 0"),n}r=t,(n=o).prototype=Object.create(r.prototype),n.prototype.constructor=n,n.__proto__=r;var u=o.prototype;return u.__getNativeAnimationConfig=function(){return{type:"spring",overshootClamping:this._overshootClamping,restDisplacementThreshold:this._restDisplacementThreshold,restSpeedThreshold:this._restSpeedThreshold,stiffness:this._stiffness,damping:this._damping,mass:this._mass,initialVelocity:l(this._initialVelocity,this._lastVelocity),toValue:this._toValue,iterations:this.__iterations}},u.start=function(e,t,n,r,i){var a=this;if(this.__active=!0,this._startPosition=e,this._lastPosition=this._startPosition,this._onUpdate=t,this.__onEnd=n,this._lastTime=Date.now(),this._frameTime=0,r instanceof o){var s=r.getInternalState();this._lastPosition=s.lastPosition,this._lastVelocity=s.lastVelocity,this._initialVelocity=this._lastVelocity,this._lastTime=s.lastTime}var l=function(){a._useNativeDriver?a.__startNativeAnimation(i):a.onUpdate()};this._delay?this._timeout=setTimeout(l,this._delay):l()},u.getInternalState=function(){return{lastPosition:this._lastPosition,lastVelocity:this._lastVelocity,lastTime:this._lastTime}},u.onUpdate=function(){var e=Date.now();e>this._lastTime+64&&(e=this._lastTime+64);var t=(e-this._lastTime)/1e3;this._frameTime+=t;var n=this._damping,r=this._mass,i=this._stiffness,o=-this._initialVelocity,a=n/(2*Math.sqrt(i*r)),s=Math.sqrt(i/r),l=s*Math.sqrt(1-a*a),u=this._toValue-this._startPosition,c=0,f=0,d=this._frameTime;if(a<1){var p=Math.exp(-a*s*d);c=this._toValue-p*((o+a*s*u)/l*Math.sin(l*d)+u*Math.cos(l*d)),f=a*s*p*(Math.sin(l*d)*(o+a*s*u)/l+u*Math.cos(l*d))-p*(Math.cos(l*d)*(o+a*s*u)-l*u*Math.sin(l*d))}else{var h=Math.exp(-s*d);c=this._toValue-h*(u+(o+s*u)*d),f=h*(o*(d*s-1)+d*u*(s*s))}if(this._lastTime=e,this._lastPosition=c,this._lastVelocity=f,this._onUpdate(c),this.__active){var v=!1;this._overshootClamping&&0!==this._stiffness&&(v=this._startPosition<this._toValue?c>this._toValue:c<this._toValue);var m=Math.abs(f)<=this._restSpeedThreshold,y=!0;if(0!==this._stiffness&&(y=Math.abs(this._toValue-c)<=this._restDisplacementThreshold),v||m&&y)return 0!==this._stiffness&&(this._lastPosition=this._toValue,this._lastVelocity=0,this._onUpdate(this._toValue)),void this.__debouncedOnEnd({finished:!0});this._animationFrame=requestAnimationFrame(this.onUpdate.bind(this))}},u.stop=function(){t.prototype.stop.call(this),this.__active=!1,clearTimeout(this._timeout),e.cancelAnimationFrame(this._animationFrame),this.__debouncedOnEnd({finished:!1})},o}(r.a);t.a=u}).call(this,n(48))},function(e,t,n){"use strict";function r(e){return 3.62*(e-30)+194}function i(e){return 3*(e-8)+25}t.a={fromOrigamiTensionAndFriction:function(e,t){return{stiffness:r(e),damping:i(t)}},fromBouncinessAndSpeed:function(e,t){function n(e,t,n){return(e-t)/(n-t)}function o(e,t,n){return t+e*(n-t)}var a=n(e/1.7,0,20);a=o(a,0,.8);var s,l,u,c,f=o(n(t/1.7,0,20),.5,200),d=(s=a,l=(u=f)<=18?(c=u,7e-4*Math.pow(c,3)-.031*Math.pow(c,2)+.64*c+1.28):u>18&&u<=44?function(e){return 44e-6*Math.pow(e,3)-.006*Math.pow(e,2)+.36*e+2}(u):function(e){return 45e-8*Math.pow(e,3)-332e-6*Math.pow(e,2)+.1078*e+5.84}(u),function(e,t,n){return e*n+(1-e)*t}(2*s-s*s,l,.01));return{stiffness:r(f),damping:i(d)}}}},function(e,t,n){"use strict";(function(e){var r,i=n(54),o=n(73),a=n(6);var s=function(t){var n,i;function s(e){var n;return(n=t.call(this)||this)._toValue=e.toValue,n._easing=void 0!==e.easing?e.easing:(r||(r=o.a.inOut(o.a.ease)),r),n._duration=void 0!==e.duration?e.duration:500,n._delay=void 0!==e.delay?e.delay:0,n.__iterations=void 0!==e.iterations?e.iterations:1,n.__isInteraction=void 0===e.isInteraction||e.isInteraction,n._useNativeDriver=Object(a.c)(e),n}i=t,(n=s).prototype=Object.create(i.prototype),n.prototype.constructor=n,n.__proto__=i;var l=s.prototype;return l.__getNativeAnimationConfig=function(){for(var e=[],t=0;t<this._duration;t+=1e3/60)e.push(this._easing(t/this._duration));return e.push(this._easing(1)),{type:"frames",frames:e,toValue:this._toValue,iterations:this.__iterations}},l.start=function(e,t,n,r,i){var o=this;this.__active=!0,this._fromValue=e,this._onUpdate=t,this.__onEnd=n;var a=function(){0!==o._duration||o._useNativeDriver?(o._startTime=Date.now(),o._useNativeDriver?o.__startNativeAnimation(i):o._animationFrame=requestAnimationFrame(o.onUpdate.bind(o))):(o._onUpdate(o._toValue),o.__debouncedOnEnd({finished:!0}))};this._delay?this._timeout=setTimeout(a,this._delay):a()},l.onUpdate=function(){var e=Date.now();if(e>=this._startTime+this._duration)return 0===this._duration?this._onUpdate(this._toValue):this._onUpdate(this._fromValue+this._easing(1)*(this._toValue-this._fromValue)),void this.__debouncedOnEnd({finished:!0});this._onUpdate(this._fromValue+this._easing((e-this._startTime)/this._duration)*(this._toValue-this._fromValue)),this.__active&&(this._animationFrame=requestAnimationFrame(this.onUpdate.bind(this)))},l.stop=function(){t.prototype.stop.call(this),this.__active=!1,clearTimeout(this._timeout),e.cancelAnimationFrame(this._animationFrame),this.__debouncedOnEnd({finished:!1})},s}(i.a);t.a=s}).call(this,n(48))},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},,function(e,t,n){"use strict";function r(){}n.r(t);var i={exitApp:r,addEventListener:function(){return{remove:r}},removeEventListener:r};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(85),i={addListener:function(){return{remove:function(){}}},dismiss:function(){Object(r.a)()},removeAllListeners:function(){},removeListener:function(){}};t.default=i},function(e,t,n){"use strict";var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/react-native-rxsegment/src/SegmentTabBar.js",o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),s=p(a),l=p(n(4)),u=p(n(23)),c=p(n(3)),f=p(n(40)),d=p(n(0));function p(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.renderTabBarLabel=function(){var e=r.props.tabBarLabels;if(!Array.isArray(e)||!e.length)return null;for(var t=e.length,n=[],i=0;i<t;i++){var o=e[i]||"";if(s.default.isValidElement(o))n.push(o);else if("string"==typeof o||"number"==typeof o){var a=r.renderLabel(o,i);n.push(a)}else{var l=r.renderLabel("",i);n.push(l)}}return n},r.state={lineLocal:{}},r.labelMeasures=[],r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"renderLabel",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments[1],n=this.props,r=n.tabBarStyle,o=n.labelStyle,a=n.selectIndex,l=n.activeTextColor,c=n.inactiveTextColor,d=n.onPress,p=t===a?{fontWeight:"bold",color:l}:{color:c};return s.default.createElement(f.default,{key:"tabBar-label-"+t,style:[v.labelContent,r],activeOpacity:t!=a?.7:1,onPress:function(){t!=a&&d&&d(t)},__source:{fileName:i,lineNumber:60}},s.default.createElement(u.default,{style:[v.label,o,p],__source:{fileName:i,lineNumber:70}},e))}},{key:"render",value:function(){var e=this.props,t=e.style,n=e.underlineStyle,r=e.selectIndex,o=e.tabBarLabels;o=o||[];var a={},l={};if(Array.isArray(o)){var u=1/(1*o.length)*100;if(a={width:u+"%"},r<o.length){var f=r*u;1===f&&(f=100),l={marginLeft:f+"%"}}}return s.default.createElement(c.default,{style:[v.container,t],__source:{fileName:i,lineNumber:120}},s.default.createElement(c.default,{style:{flexDirection:"row"},__source:{fileName:i,lineNumber:121}},this.renderTabBarLabel()),s.default.createElement(c.default,{style:[v.lineContent,l,a],__source:{fileName:i,lineNumber:124}},s.default.createElement(c.default,{style:[v.line,{width:"80%"},n],__source:{fileName:i,lineNumber:125}})))}}]),t}(a.Component);h.propTypes=r({},c.default.propTypes,{tabBarStyle:d.default.any,underlineStyle:d.default.any,tabBarLabels:d.default.arrayOf(d.default.oneOfType([d.default.element,d.default.string,d.default.number])),labelStyle:d.default.any,activeTextColor:d.default.string,inactiveTextColor:d.default.string,onPress:d.default.func,selectIndex:d.default.number}),h.defaultProps=r({},c.default.defaultProps,{tabBarStyle:{},underlineStyle:{},tabBarLabels:[],labelStyle:{},activeTextColor:"#FFF",inactiveTextColor:"rgba(255, 255, 255, 0.8)",onPress:function(e){},selectIndex:0}),e.exports=h;var v=l.default.create({container:{padding:0,margin:0},labelContent:{flex:1,justifyContent:"center",alignItems:"center"},label:{textAlign:"center",fontSize:16},lineContent:{marginTop:5,alignItems:"center",minHeight:1,marginBottom:2},line:{backgroundColor:"#FFF",minHeight:1}})},,function(e,t,n){"use strict";n.r(t);var r=n(4),i=n(40),o=n(23),a=(n(0),n(1)),s=n.n(a);var l=function(e){var t,n;function r(){return e.apply(this,arguments)||this}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,r.prototype.render=function(){var e=this.props,t=e.accessibilityLabel,n=e.color,r=e.disabled,a=e.onPress,l=e.testID,c=e.title;return s.a.createElement(i.default,{accessibilityLabel:t,accessibilityRole:"button",disabled:r,onPress:a,style:[u.button,n&&{backgroundColor:n},r&&u.buttonDisabled],testID:l},s.a.createElement(o.default,{style:[u.text,r&&u.textDisabled]},c))},r}(a.Component);l.propTypes={};var u=r.default.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});t.default=l},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(13)),i=o(n(33));function o(e){return e&&e.__esModule?e:{default:e}}var a={get:function(e,t){return e.routes.find((function(e){return e.key===t}))||null},indexOf:function(e,t){return e.routes.findIndex((function(e){return e.key===t}))},has:function(e,t){return!!e.routes.some((function(e){return e.key===t}))},push:function(e,t){(0,i.default)(-1===a.indexOf(e,t.key),"should not push route with duplicated key %s",t.key);var n=e.routes.slice();return n.push(t),(0,r.default)({},e,{index:n.length-1,routes:n})},pop:function(e){if(e.index<=0)return e;var t=e.routes.slice(0,-1);return(0,r.default)({},e,{index:t.length-1,routes:t})},jumpToIndex:function(e,t){return t===e.index?e:((0,i.default)(!!e.routes[t],"invalid index %s to jump to",t),(0,r.default)({},e,{index:t}))},jumpTo:function(e,t){var n=a.indexOf(e,t);return a.jumpToIndex(e,n)},back:function(e){var t=e.index-1;return e.routes[t]?a.jumpToIndex(e,t):e},forward:function(e){var t=e.index+1;return e.routes[t]?a.jumpToIndex(e,t):e},replaceAndPrune:function(e,t,n){var i=a.indexOf(e,t),o=a.replaceAtIndex(e,i,n);return(0,r.default)({},o,{routes:o.routes.slice(0,i+1)})},replaceAt:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=a.indexOf(e,t),o=r?e.index:i,s=a.replaceAtIndex(e,i,n);return s.index=o,s},replaceAtIndex:function(e,t,n){if((0,i.default)(!!e.routes[t],"invalid index %s for replacing route %s",t,n.key),e.routes[t]===n&&t===e.index)return e;var o=e.routes.slice();return o[t]=n,(0,r.default)({},e,{index:t,routes:o})},reset:function(e,t,n){(0,i.default)(t.length&&Array.isArray(t),"invalid routes to replace");var o=void 0===n?t.length-1:n;if(e.routes.length===t.length&&e.index===o){if(e.routes.every((function(e,n){return t[n]===e})))return e}return(0,i.default)(!!t[o],"invalid index %s to reset",o),(0,r.default)({},e,{index:o,routes:t})}};t.default=a},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(59)),o=n(33),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){return{goBack:function(t){var n=t;return void 0===t&&e.key&&((0,a.default)("string"==typeof e.key,"key should be a string"),n=e.key),i.back({key:n})},navigate:function(e,t,n){return"string"==typeof e?i.navigate({routeName:e,params:t,action:n}):((0,a.default)("object"==typeof e,"Must navigateTo an object or a string"),(0,a.default)(null==t,"Params must not be provided to .navigate() when specifying an object"),(0,a.default)(null==n,"Child action must not be provided to .navigate() when specifying an object"),i.navigate(e))},setParams:function(t){return(0,a.default)(e.key&&"string"==typeof e.key,"setParams cannot be called by root navigator"),i.setParams({params:t,key:e.key})}}}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!e)return{};var t=e._childrenNavigation||(e._childrenNavigation={}),n=e.state.routes.map((function(e){return e.key}));return Object.keys(t).forEach((function(r){n.includes(r)||e.state.isTransitioning||delete t[r]})),e._childrenNavigation}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=d(n(31)),i=d(n(15)),o=d(n(16)),a=d(n(17)),s=d(n(18)),l=d(n(19)),u=d(n(1)),c=d(n(33)),f=d(n(60));function d(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t,n){var d=function(f){function d(e,t){var n;return(0,i.default)(this,d),(n=(0,a.default)(this,(0,s.default)(d).call(this,e,t))).state={descriptors:{},screenProps:n.props.screenProps,theme:t,themeContext:t},n}return(0,l.default)(d,f),(0,o.default)(d,[{key:"componentDidUpdate",value:function(){this.context!==this.state.themeContext&&this.setState({themeContext:this.context})}},{key:"render",value:function(){return u.default.createElement(e,(0,r.default)({},this.props,{screenProps:this.state.screenProps,navigation:this.props.navigation,navigationConfig:n,descriptors:this.state.descriptors,__source:{fileName:"/Users/satya/Workspace/Callstack/react-navigation-core/src/navigators/createNavigator.js",lineNumber:80}}))}}],[{key:"getDerivedStateFromProps",value:function(e,n){var r=n.descriptors,i=e.navigation,o=e.screenProps;(0,c.default)(null!=i,"The navigation prop is missing for this navigator. In react-navigation 3 you must set up your app container directly. More info: https://reactnavigation.org/docs/en/app-containers.html");var a=i.state,s=a.routes;if(void 0===s)throw new TypeError('No "routes" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop');return{descriptors:s.reduce((function(e,a){if(r&&r[a.key]&&a===r[a.key].state&&o===n.screenProps&&n.themeContext===n.theme)return e[a.key]=r[a.key],e;var s=t.getComponentForRouteName.bind(null,a.routeName),l=i.getChildNavigation(a.key),u=t.getScreenOptions(l,o,n.themeContext);return e[a.key]={key:a.key,getComponent:s,options:u,state:a,navigation:l},e}),{}),screenProps:o,theme:a.themeContext}}}]),d}(u.default.Component);return d.contextType=f.default,d.router=t,d.navigationOptions=n.navigationOptions,d}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.jumpTo=t.JUMP_TO=void 0;var r,i=n(13),o=(r=i)&&r.__esModule?r:{default:r};var a=t.JUMP_TO="Navigation/JUMP_TO";t.jumpTo=function(e){return(0,o.default)({type:a,preserveFocus:!0},e)}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=c(n(15)),i=c(n(16)),o=c(n(17)),a=c(n(18)),s=c(n(19)),l=c(n(1)),u=c(n(129));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(){return(0,r.default)(this,t),(0,o.default)(this,(0,a.default)(t).apply(this,arguments))}return(0,s.default)(t,e),(0,i.default)(t,[{key:"render",value:function(){var e=this.props.navigation.state,t=e.routes[e.index].key,n=this.props.descriptors[t],r=n.getComponent();return l.default.createElement(u.default,{component:r,navigation:n.navigation,screenProps:this.props.screenProps,__source:{fileName:"/Users/satya/Workspace/Callstack/react-navigation-core/src/views/SwitchView/SwitchView.js",lineNumber:12}})}}]),t}(l.default.Component);t.default=f},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=c(n(15)),i=c(n(16)),o=c(n(17)),a=c(n(18)),s=c(n(19)),l=c(n(1)),u=c(n(61));function c(e){return e&&e.__esModule?e:{default:e}}var f="/Users/satya/Workspace/Callstack/react-navigation-core/src/views/SceneView.js",d=function(e){function t(){return(0,r.default)(this,t),(0,o.default)(this,(0,a.default)(t).apply(this,arguments))}return(0,s.default)(t,e),(0,i.default)(t,[{key:"render",value:function(){var e=this.props,t=e.screenProps,n=e.component,r=e.navigation;return l.default.createElement(u.default.Provider,{value:r,__source:{fileName:f,lineNumber:8}},l.default.createElement(n,{screenProps:t,navigation:r,__source:{fileName:f,lineNumber:9}}))}}]),t}(l.default.PureComponent);t.default=d},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.completeTransition=t.replace=t.reset=t.push=t.popToTop=t.pop=t.COMPLETE_TRANSITION=t.REPLACE=t.RESET=t.PUSH=t.POP_TO_TOP=t.POP=void 0;var r,i=n(13),o=(r=i)&&r.__esModule?r:{default:r};var a=t.POP="Navigation/POP",s=t.POP_TO_TOP="Navigation/POP_TO_TOP",l=t.PUSH="Navigation/PUSH",u=t.RESET="Navigation/RESET",c=t.REPLACE="Navigation/REPLACE",f=t.COMPLETE_TRANSITION="Navigation/COMPLETE_TRANSITION";t.pop=function(e){return(0,o.default)({type:a},e)},t.popToTop=function(e){return(0,o.default)({type:s},e)},t.push=function(e){return(0,o.default)({type:l},e)},t.reset=function(e){return(0,o.default)({type:u,key:null},e)},t.replace=function(e){return(0,o.default)({type:c},e)},t.completeTransition=function(e){return(0,o.default)({type:f,preserveFocus:!0},e)}},function(e,t,n){"use strict";var r=n(77),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?a:s[e.$$typeof]||i}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var u=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var i=p(n);i&&i!==h&&e(t,i,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var s=l(t),v=l(n),m=0;m<a.length;++m){var y=a[m];if(!(o[y]||r&&r[y]||v&&v[y]||s&&s[y])){var g=d(n,y);try{u(t,y,g)}catch(e){}}}}return t}},function(e,t,n){e.exports={get createAppContainer(){return n(245).default},get createKeyboardAwareNavigator(){return n(248).default},get createNavigationAwareScrollable(){return n(134).default},get withOrientation(){return n(249).default},get ResourceSavingSceneView(){return n(250).default},get SafeAreaView(){return n(251).default},get ScrollView(){return n(96).ScrollView},get FlatList(){return n(96).FlatList},get SectionList(){return n(96).SectionList},get Themed(){return n(280).default}}},function(e,t,n){var r=function(){};r=function(e){if(void 0===e)throw new Error("invariant requires an error message argument")},e.exports=function(e,t,n,i,o,a,s,l){if(r(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,i,o,a,s,l],f=0;(u=new Error(t.replace(/%s/g,(function(){return c[f++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/@react-navigation/native/dist/createNavigationAwareScrollable.js",o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.default=function(e){var t,n,u=(0,l.withNavigation)((n=t=function(t){function n(){return c(this,n),f(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return d(n,t),o(n,[{key:"componentDidMount",value:function(){var e=this;this._subscription=this.props.navigation.addListener("refocus",(function(){var t=e.getNode();e.props.navigation.isFocused()&&null!==t&&(null!=t.scrollToTop?t.scrollToTop():null!=t.scrollTo?t.scrollTo({y:0}):null!=t.scrollResponderScrollTo&&t.scrollResponderScrollTo({y:0}))}))}},{key:"getNode",value:function(){return null===this._scrollRef?null:this._scrollRef.getScrollResponder?this._scrollRef.getScrollResponder():this._scrollRef.getNode?this._scrollRef.getNode():this._scrollRef}},{key:"componentWillUnmount",value:function(){null!=this._subscription&&this._subscription.remove()}},{key:"render",value:function(){var t=this;return a.default.createElement(e,r({ref:function(e){t._scrollRef=e}},this.props,{__source:{fileName:i,lineNumber:45}}))}}]),n}(a.default.PureComponent),t.displayName="withNavigationScrolling("+(e.displayName||e.name)+")",n)),p=function(e){function t(){var e,n,r;c(this,t);for(var i=arguments.length,o=Array(i),a=0;a<i;a++)o[a]=arguments[a];return n=r=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),h.call(r),f(r,n)}return d(t,e),o(t,[{key:"render",value:function(){return a.default.createElement(u,r({},this.props,{onRef:this._captureRef,__source:{fileName:i,lineNumber:92}}))}}]),t}(a.default.PureComponent);p.displayName="NavigationAwareScrollable("+(e.displayName||e.name)+")";var h=function(){var e=this;this._captureRef=function(t){e._innerRef=t,e.props.onRef&&e.props.onRef(t)},this.setNativeProps=function(){var t;return(t=e._innerRef.getNode()).setNativeProps.apply(t,arguments)},this.getScrollResponder=function(){var t;return(t=e._innerRef.getNode()).getScrollResponder.apply(t,arguments)},this.getScrollableNode=function(){var t;return(t=e._innerRef.getNode()).getScrollableNode.apply(t,arguments)},this.getInnerViewNode=function(){var t;return(t=e._innerRef.getNode()).getInnerViewNode.apply(t,arguments)},this.scrollTo=function(){var t;return(t=e._innerRef.getNode()).scrollTo.apply(t,arguments)},this.scrollToEnd=function(){var t;return(t=e._innerRef.getNode()).scrollToEnd.apply(t,arguments)},this.scrollWithoutAnimationTo=function(){var t;return(t=e._innerRef.getNode()).scrollWithoutAnimationTo.apply(t,arguments)},this.flashScrollIndicators=function(){var t;return(t=e._innerRef.getNode()).flashScrollIndicators.apply(t,arguments)}};return(0,s.default)(p,e)};var a=u(n(1)),s=u(n(135)),l=n(49);function u(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function d(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}},function(e,t,n){"use strict";var r=n(77),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?a:s[e.$$typeof]||i}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var u=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var i=p(n);i&&i!==h&&e(t,i,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var s=l(t),v=l(n),m=0;m<a.length;++m){var y=a[m];if(!(o[y]||r&&r[y]||v&&v[y]||s&&s[y])){var g=d(n,y);try{u(t,y,g)}catch(e){}}}}return t}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=s(n(0)),o=s(n(137)),a=s(n(143));function s(e){return e&&e.__esModule?e:{default:e}}var l=(0,o.default)("NativeViewGestureHandler",r({},a.default,{shouldActivateOnStart:i.default.bool,disallowInterruption:i.default.bool}));t.default=l},function(e,t,n){(function(e,r){Object.defineProperty(t,"__esModule",{value:!0});var i,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},l=arguments[3],u=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},f=function(n){function f(e){m(this,f);var n=y(this,(f.__proto__||Object.getPrototypeOf(f)).call(this,e));if(n._onGestureHandlerEvent=function(e){e.nativeEvent.handlerTag===n._handlerTag?n.props.onGestureEvent&&n.props.onGestureEvent(e):n.props.onGestureHandlerEvent&&n.props.onGestureHandlerEvent(e)},n._onGestureHandlerStateChange=function(e){if(e.nativeEvent.handlerTag===n._handlerTag){n.props.onHandlerStateChange&&n.props.onHandlerStateChange(e);var t=j[e.nativeEvent.state];"function"==typeof n.props[t]&&n.props[t](e)}else n.props.onGestureHandlerStateChange&&n.props.onGestureHandlerStateChange(e)},n._refHandler=function(e){n._viewNode=e;var t=s.default.Children.only(n.props.children).ref;null!==t&&("function"==typeof t?t(e):t.current=e)},n._createGestureHandler=function(e){n._config=e,p.default.createGestureHandler(t,n._handlerTag,e)},n._attachGestureHandler=function(e){n._viewTag=e,p.default.attachGestureHandler(n._handlerTag,e)},n._updateGestureHandler=function(e){n._config=e,p.default.updateGestureHandler(n._handlerTag,e)},n._handlerTag=P++,n._config={},e.id){if(void 0!==C[e.id])throw new Error('Handler with ID "'+e.id+'" already registered');C[e.id]=n._handlerTag}return n}return g(f,n),o(f,[{key:"componentWillUnmount",value:function(){p.default.dropGestureHandler(this._handlerTag),this._updateEnqueued&&e(this._updateEnqueued),this.props.id&&delete C[this.props.id]}},{key:"componentDidMount",value:function(){var e=this;I(this.props)&&(this._updateEnqueued=r((function(){e._updateEnqueued=null,e._update()}))),this._createGestureHandler(R(l?l(this.props):this.props,a({},this.constructor.propTypes,u),i)),this._attachGestureHandler(_(this._viewNode))}},{key:"componentDidUpdate",value:function(){var e=_(this._viewNode);this._viewTag!==e&&this._attachGestureHandler(e),this._update()}},{key:"_update",value:function(){var e=R(l?l(this.props):this.props,a({},this.constructor.propTypes,u),i);(0,d.default)(this._config,e)||this._updateGestureHandler(e)}},{key:"setNativeProps",value:function(e){var t=a({},this.props,e),n=R(l?l(t):t,a({},this.constructor.propTypes,u),i);this._updateGestureHandler(n)}},{key:"render",value:function(){var e=this._onGestureHandlerEvent,t=this.props,n=t.onGestureEvent,r=t.onGestureHandlerEvent;if(n&&"function"!=typeof n){if(r)throw new Error("Nesting touch handlers with native animated driver is not supported yet");e=this.props.onGestureEvent}else if(r&&"function"!=typeof r)throw new Error("Nesting touch handlers with native animated driver is not supported yet");var i=this._onGestureHandlerStateChange,o=this.props,a=o.onHandlerStateChange,l=o.onGestureHandlerStateChange;if(a&&"function"!=typeof a){if(l)throw new Error("Nesting touch handlers with native animated driver is not supported yet");i=this.props.onHandlerStateChange}else if(l&&"function"!=typeof l)throw new Error("Nesting touch handlers with native animated driver is not supported yet");var u=s.default.Children.only(this.props.children),f=u.props.children;return c.default.TOUCH_TARGET_DEBUG&&u.type&&("RNGestureHandlerButton"===u.type||"View"===u.type.name||"View"===u.type.displayName)&&(f=s.default.Children.toArray(f)).push(c.default.renderDebugView({color:"mediumspringgreen",hitSlop:u.props.hitSlop})),s.default.cloneElement(u,{ref:this._refHandler,collapsable:!1,onGestureHandlerEvent:e,onGestureHandlerStateChange:i},f)}}]),f}(s.default.Component);return f.displayName=t,f.propTypes=n,f};var s=v(n(1)),l=v(n(7)),u=v(n(81)),c=v(n(47)),f=v(n(8)),d=v(n(254)),p=v(n(139)),h=v(n(43));function v(e){return e&&e.__esModule?e:{default:e}}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function g(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _(e){return"web"===f.default.OS?e:(0,l.default)(e)}var w=u.default.UIManager,S=void 0===w?{}:w,O={onGestureHandlerEvent:{registrationName:"onGestureHandlerEvent"},onGestureHandlerStateChange:{registrationName:"onGestureHandlerStateChange"}};S.genericDirectEventTypes=a({},S.genericDirectEventTypes,O),S.getConstants&&(S.getConstants().genericDirectEventTypes=a({},S.getConstants().genericDirectEventTypes,O));var E=S.setJSResponder,T=void 0===E?function(){}:E,k=S.clearJSResponder,x=void 0===k?function(){}:k;S.setJSResponder=function(e,t){p.default.handleSetJSResponder(e,t),T(e,t)},S.clearJSResponder=function(){p.default.handleClearJSResponder(),x()};var P=1,C={};function N(e,t){return!(void 0===e||e===Object(e)&&"__isNative"in e||"onHandlerStateChange"===t||"onGestureEvent"===t)}function R(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=a({},n);return Object.keys(t).forEach((function(t){if(N(e[t],t)){var n=e[t];"simultaneousHandlers"===t||"waitFor"===t?n=A(e[t]):"hitSlop"===t&&"object"!=typeof n&&(n={top:n,left:n,bottom:n,right:n}),r[t]=n}})),r}function A(e){return Array.isArray(e)||(e=[e]),"web"===f.default.OS?e.map((function(e){return e.current})).filter((function(e){return e})):e.map((function(e){return C[e]||e.current&&e.current._handlerTag||-1})).filter((function(e){return e>0}))}function I(e){var t=function(e){return Array.isArray(e)?e.some((function(e){return e&&null===e.current})):e&&null===e.current};return t(e.simultaneousHandlers)||t(e.waitFor)}var j=(b(i={},h.default.BEGAN,"onBegan"),b(i,h.default.FAILED,"onFailed"),b(i,h.default.CANCELLED,"onCancelled"),b(i,h.default.ACTIVE,"onActivated"),b(i,h.default.END,"onEnded"),i)}).call(this,n(138).clearImmediate,n(138).setImmediate)},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(253),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(48))},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(50),i=d(n(255)),o=d(n(257)),a=d(n(258)),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(100)),l=d(n(259)),u=d(n(260)),c=d(n(261)),f=d(n(262));function d(e){return e&&e.__esModule?e:{default:e}}var p={PanGestureHandler:l.default,RotationGestureHandler:c.default,PinchGestureHandler:u.default,TapGestureHandler:f.default,NativeViewGestureHandler:a.default,LongPressGestureHandler:o.default,FlingGestureHandler:i.default};t.default={Direction:r.Direction,handleSetJSResponder:function(e,t){console.warn("handleSetJSResponder: ",e,t)},handleClearJSResponder:function(){console.warn("handleClearJSResponder: ")},createGestureHandler:function(e,t,n){if(!(e in p))throw new Error("react-native-gesture-handler: "+e+" is not supported on web.");var r=p[e];s.createGestureHandler(t,new r),this.updateGestureHandler(t,n)},attachGestureHandler:function(e,t){s.getHandler(e).setView(t)},updateGestureHandler:function(e,t){s.getHandler(e).updateGestureConfig(t)},getGestureHandlerNode:function(e){return s.getHandler(e)},dropGestureHandler:function(e){s.dropGestureHandler(e)}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(99);function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(){return a(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"transformNativeEvent",value:function(e){var t=e.deltaX,n=e.deltaY,r=e.velocityX,i=e.velocityY,o=e.center,a=o.x,s=o.y,l=this.view.getBoundingClientRect();return{translationX:t-(this.__initialX||0),translationY:n-(this.__initialY||0),absoluteX:a,absoluteY:s,velocityX:r,velocityY:i,x:a-l.left,y:s-l.top}}},{key:"shouldEnableGestureOnSetup",get:function(){return!0}}]),t}(((r=o)&&r.__esModule?r:{default:r}).default);t.default=l},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},a=f(n(37)),s=f(n(43)),l=n(50),u=f(n(101)),c=n(44);function f(e){return e&&e.__esModule?e:{default:e}}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=function(e){function t(){var e,n,r;p(this,t);for(var i=arguments.length,o=Array(i),a=0;a<i;a++)o[a]=arguments[a];return n=r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),r.shouldDelayTouches=!0,h(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"simulateCancelEvent",value:function(e){this.hasGestureFailed=!0,this.cancelEvent(e)}},{key:"updateHasCustomActivationCriteria",value:function(e){var t=e.shouldCancelWhenOutside,n=e.maxDistSq;return t||!(0,c.isValidNumber)(n)}},{key:"getState",value:function(e){var t;return(t={},d(t,a.default.INPUT_START,s.default.BEGAN),d(t,a.default.INPUT_MOVE,s.default.ACTIVE),d(t,a.default.INPUT_END,s.default.END),d(t,a.default.INPUT_CANCEL,s.default.CANCELLED),t)[e]}},{key:"getConfig",value:function(){return this._hasCustomActivationCriteria?this.config:{shouldCancelWhenOutside:!0,maxDistSq:10}}},{key:"getHammerConfig",value:function(){return r({},o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getHammerConfig",this).call(this),{time:this.minDurationMs})}},{key:"onGestureActivated",value:function(e){this.onGestureStart(e)}},{key:"shouldDelayTouchForEvent",value:function(e){var t=e.pointerType;return this.shouldDelayTouches&&"touch"===t}},{key:"onGestureStart",value:function(e){var t=this;this.isGestureRunning=!0,clearTimeout(this.visualFeedbackTimer),this.initialEvent=e,this.visualFeedbackTimer=(0,c.fireAfterInterval)((function(){t.sendGestureStartedEvent(t.initialEvent),t.initialEvent=null}),this.shouldDelayTouchForEvent(e)&&l.CONTENT_TOUCHES_DELAY)}},{key:"sendGestureStartedEvent",value:function(e){clearTimeout(this.visualFeedbackTimer),this.visualFeedbackTimer=null,this.sendEvent(r({},e,{eventType:a.default.INPUT_MOVE,isFirst:!0}))}},{key:"forceInvalidate",value:function(e){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"forceInvalidate",this).call(this,e),clearTimeout(this.visualFeedbackTimer),this.visualFeedbackTimer=null,this.initialEvent=null}},{key:"onRawEvent",value:function(e){var n=this;if(o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"onRawEvent",this).call(this,e),e.isFinal&&this.isGestureRunning){var i=void 0;this.visualFeedbackTimer&&(i=l.CONTENT_TOUCHES_QUICK_TAP_END_DELAY,this.sendGestureStartedEvent(this.initialEvent),this.initialEvent=null),(0,c.fireAfterInterval)((function(){n.sendEvent(r({},e,{eventType:a.default.INPUT_END,isFinal:!0})),n.onGestureEnded()}),i)}}},{key:"updateGestureConfig",value:function(e){var n=e.shouldActivateOnStart,i=void 0!==n&&n,a=e.disallowInterruption,s=void 0!==a&&a,l=e.shouldCancelWhenOutside,u=void 0===l||l,c=e.minDurationMs,f=void 0===c?Number.NaN:c,d=e.maxDist,p=void 0===d?Number.NaN:d,h=e.minPointers,v=void 0===h?1:h,m=e.maxPointers,y=void 0===m?1:m,g=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["shouldActivateOnStart","disallowInterruption","shouldCancelWhenOutside","minDurationMs","maxDist","minPointers","maxPointers"]);return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"updateGestureConfig",this).call(this,r({shouldActivateOnStart:i,disallowInterruption:s,shouldCancelWhenOutside:u,minDurationMs:f,maxDist:p,minPointers:v,maxPointers:y},g))}},{key:"name",get:function(){return"press"}},{key:"minDurationMs",get:function(){return(0,c.isnan)(this.config.minDurationMs)?5:this.config.minDurationMs}},{key:"maxDist",get:function(){return(0,c.isnan)(this.config.maxDist)?9:this.config.maxDist}},{key:"NativeGestureClass",get:function(){return a.default.Press}}]),t}(u.default);t.default=v},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(99);function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){return s(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"updateGestureConfig",value:function(e){var n=e.minPointers,r=void 0===n?2:n,o=e.maxPointers,a=void 0===o?2:o,s=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["minPointers","maxPointers"]);return function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"updateGestureConfig",this).call(this,i({minPointers:r,maxPointers:a},s))}},{key:"isGestureEnabledForEvent",value:function(e,t,n){var r=e.minPointers,i=e.maxPointers,o=n.maxPointers;return o>i?{failed:!0}:{success:o>=r}}},{key:"shouldEnableGestureOnSetup",get:function(){return!1}}]),t}(((r=a)&&r.__esModule?r:{default:r}).default);t.default=u},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(0),o=(r=i)&&r.__esModule?r:{default:r};var a={id:o.default.string,minPointers:o.default.number,enabled:o.default.bool,waitFor:o.default.oneOfType([o.default.string,o.default.object,o.default.arrayOf(o.default.oneOfType([o.default.string,o.default.object]))]),simultaneousHandlers:o.default.oneOfType([o.default.string,o.default.object,o.default.arrayOf(o.default.oneOfType([o.default.string,o.default.object]))]),shouldCancelWhenOutside:o.default.bool,hitSlop:o.default.oneOfType([o.default.number,o.default.shape({left:o.default.number,top:o.default.number,right:o.default.number,bottom:o.default.number,vertical:o.default.number,horizontal:o.default.number,width:o.default.number,height:o.default.number})]),onGestureEvent:o.default.oneOfType([o.default.func,o.default.object]),onHandlerStateChange:o.default.oneOfType([o.default.func,o.default.object]),onBegan:o.default.func,onFailed:o.default.func,onCancelled:o.default.func,onActivated:o.default.func,onEnded:o.default.func};t.default=a},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return i}));var r=n(1);var i=function(e){var t,n;function r(){return e.apply(this,arguments)||this}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,r.setBackgroundColor=function(){},r.setBarStyle=function(){},r.setHidden=function(){},r.setNetworkActivityIndicatorVisible=function(){},r.setTranslucent=function(){},r.prototype.render=function(){return null},r}(r.Component)},function(e,t,n){"use strict";n.r(t);var r=n(29);t.default=r.a},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.TOUCHABLE_STATE=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/react-native-gesture-handler/touchables/GenericTouchable.js",o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),s=d(a),l=d(n(28)),u=d(n(8)),c=n(78),f=d(n(0));function d(e){return e&&e.__esModule?e:{default:e}}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=t.TOUCHABLE_STATE={UNDETERMINED:0,BEGAN:1,MOVED_OUTSIDE:2},m={accessible:f.default.bool,accessibilityLabel:f.default.node,accessibilityHint:f.default.string,hitSlop:f.default.shape({top:f.default.number,left:f.default.number,bottom:f.default.number,right:f.default.number}),disabled:f.default.bool,onPress:f.default.func,onPressIn:f.default.func,onPressOut:f.default.func,onLayout:f.default.func,onLongPress:f.default.func,nativeID:f.default.string,testID:f.default.string,delayPressIn:f.default.number,delayPressOut:f.default.number,delayLongPress:f.default.number,shouldActivateOnStart:f.default.bool,disallowInterruption:f.default.bool},y={extraButtonProps:f.default.object,onStateChange:f.default.func},g=function(e){function t(){var e,n,r;p(this,t);for(var i=arguments.length,o=Array(i),a=0;a<i;a++)o[a]=arguments[a];return n=r=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),r.longPressDetected=!1,r.pointerInside=!0,r.STATE=v.UNDETERMINED,r.onGestureEvent=function(e){var t=e.nativeEvent.pointerInside;r.pointerInside!==t&&(t?r.onMoveIn():r.onMoveOut()),r.pointerInside=t},r.onHandlerStateChange=function(e){var t=e.nativeEvent.state;if(t===c.State.CANCELLED||t===c.State.FAILED)r.moveToState(v.UNDETERMINED);else if(t===("ios"===u.default.OS?c.State.ACTIVE:c.State.BEGAN)&&r.STATE===v.UNDETERMINED)r.handlePressIn();else if(t===c.State.END){var n=!r.longPressDetected&&r.STATE!==v.MOVED_OUTSIDE&&null===r.pressOutTimeout;r.handleGoToUndetermined(),n&&r.props.onPress&&r.props.onPress()}},r.onLongPressDetected=function(){r.longPressDetected=!0,r.props.onLongPress()},h(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"handlePressIn",value:function(){var e=this;if(this.props.delayPressIn?this.pressInTimeout=setTimeout((function(){e.moveToState(v.BEGAN),e.pressInTimeout=null}),this.props.delayPressIn):this.moveToState(v.BEGAN),this.props.onLongPress){var t=(this.props.delayPressIn||0)+(this.props.delayLongPress||0);this.longPressTimeout=setTimeout(this.onLongPressDetected,t)}}},{key:"handleMoveOutside",value:function(){var e=this;this.props.delayPressOut?this.pressOutTimeout=this.pressOutTimeout||setTimeout((function(){e.moveToState(v.MOVED_OUTSIDE),e.pressOutTimeout=null}),this.props.delayPressOut):this.moveToState(v.MOVED_OUTSIDE)}},{key:"handleGoToUndetermined",value:function(){var e=this;clearTimeout(this.pressOutTimeout),this.props.delayPressOut?this.pressOutTimeout=setTimeout((function(){e.STATE===v.UNDETERMINED&&e.moveToState(v.BEGAN),e.moveToState(v.UNDETERMINED),e.pressOutTimeout=null}),this.props.delayPressOut):(this.STATE===v.UNDETERMINED&&this.moveToState(v.BEGAN),this.moveToState(v.UNDETERMINED))}},{key:"componentDidMount",value:function(){this.reset()}},{key:"reset",value:function(){this.longPressDetected=!1,this.pointerInside=!0,clearTimeout(this.pressInTimeout),clearTimeout(this.pressOutTimeout),clearTimeout(this.longPressTimeout),this.pressOutTimeout=null,this.longPressTimeout=null,this.pressInTimeout=null}},{key:"moveToState",value:function(e){e!==this.STATE&&(e===v.BEGAN?this.props.onPressIn&&this.props.onPressIn():e===v.MOVED_OUTSIDE?this.props.onPressOut&&this.props.onPressOut():e===v.UNDETERMINED&&(this.reset(),this.STATE===v.BEGAN&&this.props.onPressOut&&this.props.onPressOut()),this.props.onStateChange&&this.props.onStateChange(this.STATE,e),this.STATE=e)}},{key:"componentWillUnmount",value:function(){this.reset()}},{key:"onMoveIn",value:function(){this.STATE===v.MOVED_OUTSIDE&&this.moveToState(v.BEGAN)}},{key:"onMoveOut",value:function(){clearTimeout(this.longPressTimeout),this.longPressTimeout=null,this.STATE===v.BEGAN&&this.handleMoveOutside()}},{key:"render",value:function(){var e={accessible:!1!==this.props.accessible,accessibilityLabel:this.props.accessibilityLabel,accessibilityHint:this.props.accessibilityHint,accessibilityComponentType:this.props.accessibilityComponentType,accessibilityRole:this.props.accessibilityRole,accessibilityStates:this.props.accessibilityStates,accessibilityTraits:this.props.accessibilityTraits,nativeID:this.props.nativeID,testID:this.props.testID,onLayout:this.props.onLayout,hitSlop:this.props.hitSlop};return s.default.createElement(c.BaseButton,r({style:this.props.containerStyle,onHandlerStateChange:this.props.disabled?null:this.onHandlerStateChange,onGestureEvent:this.onGestureEvent,hitSlop:this.props.hitSlop,shouldActivateOnStart:this.props.shouldActivateOnStart,disallowInterruption:this.props.disallowInterruption},this.props.extraButtonProps,{__source:{fileName:i,lineNumber:260}}),s.default.createElement(l.default.View,r({},e,{style:this.props.style,__source:{fileName:i,lineNumber:270}}),this.props.children))}}]),t}(a.Component);g.publicPropTypes=m,g.internalPropTypes=y,g.propTypes=r({},y,m),g.defaultProps={delayLongPress:600,extraButtonProps:{rippleColor:"transparent"}},t.default=g},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=m(n(31)),i=m(n(13)),o=m(n(15)),a=m(n(16)),s=m(n(17)),l=m(n(18)),u=m(n(19)),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),f=m(n(8)),d=n(39),p=m(n(148)),h=m(n(162)),v=m(n(104));function m(e){return e&&e.__esModule?e:{default:e}}var y="/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/StackView.tsx",g="android"===f.default.OS||"ios"===f.default.OS,b=!0,_=!1,w=function(e){function t(){var e,n;(0,o.default)(this,t);for(var a=arguments.length,u=new Array(a),f=0;f<a;f++)u[f]=arguments[f];return(n=(0,s.default)(this,(e=(0,l.default)(t)).call.apply(e,[this].concat(u)))).configureTransition=function(e,t){return(0,i.default)({useNativeDriver:g},v.default.getTransitionConfig(n.props.navigationConfig.transitionConfig,e,t,"modal"===n.props.navigationConfig.mode).transitionSpec)},n.getShadowEnabled=function(){var e=n.props.navigationConfig;return e&&e.hasOwnProperty("cardShadowEnabled")?e.cardShadowEnabled:b},n.getCardOverlayEnabled=function(){var e=n.props.navigationConfig;return e&&e.hasOwnProperty("cardOverlayEnabled")?e.cardOverlayEnabled:_},n.renderStackviewLayout=function(e,t){var i=n.props,o=i.screenProps,a=i.navigationConfig;return c.createElement(p.default,(0,r.default)({},a,{cardShadowEnabled:n.getShadowEnabled(),cardOverlayEnabled:n.getCardOverlayEnabled(),onGestureBegin:n.props.onGestureBegin,onGestureCanceled:n.props.onGestureCanceled,onGestureEnd:n.props.onGestureEnd,screenProps:o,transitionProps:e,lastTransitionProps:t,__source:{fileName:y,lineNumber:104}}))},n.handleTransitionEnd=function(e,t){var r=n.props,i=r.navigationConfig,o=r.navigation,a=r.onTransitionEnd,s=void 0===a?i.onTransitionEnd:a,l=e.scene.route.key,u=o.state.routes[o.state.index].key===l;e.navigation.state.isTransitioning&&u&&o.dispatch(d.StackActions.completeTransition({key:o.state.key,toChildKey:l})),s&&s(e,t)},n}return(0,u.default)(t,e),(0,a.default)(t,[{key:"render",value:function(){return c.createElement(h.default,{render:this.renderStackviewLayout,configureTransition:this.configureTransition,screenProps:this.props.screenProps,navigation:this.props.navigation,descriptors:this.props.descriptors,onTransitionStart:this.props.onTransitionStart||this.props.navigationConfig.onTransitionStart,onTransitionEnd:this.handleTransitionEnd,__source:{fileName:y,lineNumber:41}})}},{key:"componentDidMount",value:function(){var e=this.props.navigation;e.state.isTransitioning&&e.dispatch(d.StackActions.completeTransition({key:e.state.key}))}}]),t}(c.Component);t.default=w},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=C(n(51)),i=C(n(31)),o=C(n(13)),a=C(n(15)),s=C(n(16)),l=C(n(17)),u=C(n(18)),c=C(n(19)),f=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),d=C(n(28)),p=C(n(4)),h=C(n(8)),v=C(n(3)),m=C(n(21)),y=C(n(102)),g=C(n(62)),b=n(39),_=n(149),w=n(97),S=C(n(150)),O=C(n(152)),E=C(n(104)),T=C(n(103)),k=C(n(161)),x=C(n(288)),P=n(160);function C(e){return e&&e.__esModule?e:{default:e}}var N="/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/StackViewLayout.tsx",R=g.default.get("window"),A=R.width,I=R.height,j=!("ios"!==h.default.OS||h.default.isPad||h.default.isTVOS||812!==I&&812!==A&&896!==I&&896!==A),M=y.default.inOut(y.default.ease),D=["center","left"],L=["fade-in-place","uikit"],F=["toggle","fade","translate"],V="android"===h.default.OS||"ios"===h.default.OS,H=function(e){function t(e){var n,r;return(0,a.default)(this,t),(n=(0,l.default)(this,(0,u.default)(t).call(this,e))).immediateIndex=null,n.handleFloatingHeaderLayout=function(e){var t=e.nativeEvent.layout.height;t!==n.state.floatingHeaderHeight&&n.setState({floatingHeaderHeight:t})},n.handlePanGestureStateChange=function(e){var t=e.nativeEvent;if(t.oldState===w.State.ACTIVE){if(1===n.positionSwitch.__getValue())return;n.isMotionVertical()?n.handleReleaseVertical(t):n.handleReleaseHorizontal(t)}else t.state===w.State.ACTIVE&&(n.props.onGestureBegin&&n.props.onGestureBegin(),n.positionSwitch.setValue(0))},n.renderCard=function(e){var t=n.props,r=t.transitionProps,a=t.cardShadowEnabled,s=t.cardOverlayEnabled,l=t.transparentCard,u=t.cardStyle,c=n.transitionConfig.screenInterpolator,d=c&&c((0,o.default)({},r,{shadowEnabled:a,cardOverlayEnabled:s,position:n.position,scene:e})),v=e.descriptor.options,m=null!==v.header&&!1!==v.headerShown,y=n.getHeaderMode(),g=p.default.absoluteFill;return m&&"float"===y&&!v.headerTransparent&&(g=(0,o.default)({},h.default.select({web:{},default:p.default.absoluteFillObject}),{paddingTop:n.state.floatingHeaderHeight})),f.createElement(S.default,(0,i.default)({},r,{key:"card_"+e.key,position:n.position,realPosition:r.position,animatedStyle:d,transparent:l,style:[g,u],scene:e,__source:{fileName:N,lineNumber:975}}),n.renderInnerScene(e))},n.panGestureRef=f.createRef(),n.gestureX=new d.default.Value(0),n.gestureY=new d.default.Value(0),n.positionSwitch=new d.default.Value(1),d.default.subtract?n.gestureSwitch=d.default.subtract(1,n.positionSwitch):n.gestureSwitch=d.default.add(1,d.default.multiply(-1,n.positionSwitch)),n.gestureEvent=d.default.event([{nativeEvent:{translationX:n.gestureX,translationY:n.gestureY}}],{useNativeDriver:V}),n.state={floatingHeaderHeight:(r=e.isLandscape,"ios"===h.default.OS?r&&!h.default.isPad?32:j?88:64:"android"===h.default.OS?56:64)},n}return(0,c.default)(t,e),(0,s.default)(t,[{key:"renderHeader",value:function(e,t){var n=e.descriptor.options,a=n.header,s=n.headerShown;if("string"==typeof a)throw new Error('Invalid header value: "'+a+'". The header option must be a valid React component or null, not a string.');if((null===a||!1===s)&&"screen"===t)return null;if(f.isValidElement(a))return a;var l=a||function(e){return f.createElement(O.default,(0,i.default)({},e,{__source:{fileName:N,lineNumber:217}}))},u=this.transitionConfig,c=u.headerLeftInterpolator,d=u.headerTitleInterpolator,p=u.headerRightInterpolator,h=u.headerBackgroundInterpolator,v=this.getHeaderBackgroundTransitionPreset();v&&(h=v);var m=this.props,y=m.transitionProps,g=(0,r.default)(m,["transitionProps"]);return f.createElement(b.NavigationProvider,{value:e.descriptor.navigation,__source:{fileName:N,lineNumber:234}},l((0,o.default)({},g,y,{position:this.position,scene:e,mode:t,transitionPreset:this.getHeaderTransitionPreset(),layoutPreset:this.getHeaderLayoutPreset(),backTitleVisible:this.getHeaderBackTitleVisible(),leftInterpolator:c,titleInterpolator:d,rightInterpolator:p,backgroundInterpolator:h})))}},{key:"reset",value:function(e,t){"ios"===h.default.OS&&(0,P.supportsImprovedSpringAnimation)()?d.default.spring(this.props.transitionProps.position,{toValue:e,stiffness:6e3,damping:100,mass:3,overshootClamping:!0,restDisplacementThreshold:.01,restSpeedThreshold:.01,useNativeDriver:V}).start():d.default.timing(this.props.transitionProps.position,{toValue:e,duration:t,easing:M,useNativeDriver:V}).start()}},{key:"goBack",value:function(e,t){var n=this,r=this.props.transitionProps,i=r.navigation,o=r.position,a=r.scenes,s=Math.max(e-1,0);this.immediateIndex=s;var l=function(){n.immediateIndex=null;var e=a.find((function(e){return e.index===s+1}));e&&(i.dispatch(b.NavigationActions.back({key:e.route.key,immediate:!0})),i.dispatch(b.StackActions.completeTransition()))};"ios"===h.default.OS&&(0,P.supportsImprovedSpringAnimation)()?d.default.spring(o,{toValue:s,stiffness:7e3,damping:300,mass:3,overshootClamping:!0,restDisplacementThreshold:.01,restSpeedThreshold:.01,useNativeDriver:V}).start(l):d.default.timing(o,{toValue:s,duration:t,easing:M,useNativeDriver:V}).start(l)}},{key:"prepareAnimated",value:function(){this.props!==this.prevProps&&(this.prevProps=this.props,this.prepareGesture(),this.preparePosition(),this.prepareTransitionConfig())}},{key:"render",value:function(){this.prepareAnimated();var e=this.props.transitionProps,t=e.navigation.state.index,n=e.scenes,r=this.getHeaderMode(),o=null;if("float"===r){var a=e.scene;o=f.createElement(v.default,{style:B.floatingHeader,pointerEvents:"box-none",onLayout:this.handleFloatingHeaderLayout,__source:{fileName:N,lineNumber:356}},this.renderHeader(a,r))}return f.createElement(w.PanGestureHandler,(0,i.default)({},this.gestureActivationCriteria(),{ref:this.panGestureRef,onGestureEvent:this.gestureEvent,onHandlerStateChange:this.handlePanGestureStateChange,enabled:t>0&&this.isGestureEnabled(),__source:{fileName:N,lineNumber:367}}),f.createElement(d.default.View,{style:[B.container,"light"===this.context?this.transitionConfig.containerStyleLight:this.transitionConfig.containerStyleDark,this.transitionConfig.containerStyle],__source:{fileName:N,lineNumber:374}},f.createElement(k.default.Provider,{value:this.panGestureRef,__source:{fileName:N,lineNumber:383}},f.createElement(_.ScreenContainer,{style:B.scenes,__source:{fileName:N,lineNumber:384}},n.map(this.renderCard)),o)))}},{key:"componentDidUpdate",value:function(e){var t=e.transitionProps.navigation.state,n=this.props.transitionProps.navigation.state;t.index!==n.index&&this.maybeCancelGesture()}},{key:"getGestureResponseDistance",value:function(){var e=this.props.transitionProps.scene.descriptor.options.gestureResponseDistance,t=void 0===e?{}:e;return this.isModal()?t.vertical||135:t.horizontal||50}},{key:"gestureActivationCriteria",value:function(){var e=this.props.transitionProps.layout,t=this.getGestureResponseDistance(),n=this.isMotionInverted();if(this.isMotionVertical()){var r=e.height.__getValue();return{maxDeltaX:15,minOffsetY:n?-5:5,hitSlop:n?{top:-r+t}:{bottom:-r+t}}}var i=-e.width.__getValue()+t;return{minOffsetX:n?-5:5,maxDeltaY:20,hitSlop:n?{left:i}:{right:i}}}},{key:"isGestureEnabled",value:function(){var e=this.props.transitionProps.scene.descriptor.options.gesturesEnabled;return"boolean"==typeof e?e:"ios"===h.default.OS}},{key:"isMotionVertical",value:function(){return this.isModal()}},{key:"isModal",value:function(){return"modal"===this.props.mode}},{key:"isMotionInverted",value:function(){var e=this.props.transitionProps.scene.descriptor.options.gestureDirection;return this.isModal()?"inverted"===e:"string"==typeof e?"inverted"===e:m.default.isRTL}},{key:"computeHorizontalGestureValue",value:function(e){var t=e.translationX,n=this.props.transitionProps,r=n.navigation,i=n.layout,o=r.state.index,a=i.width.__getValue(),s=o-(this.isMotionInverted()?-1*t:t)/a;return(0,x.default)(o-1,s,o)}},{key:"computeVerticalGestureValue",value:function(e){var t=e.translationY,n=this.props.transitionProps,r=n.navigation,i=n.layout,o=r.state.index,a=i.height.__getValue(),s=o-(this.isMotionInverted()?-1*t:t)/a;return(0,x.default)(o-1,s,o)}},{key:"maybeCancelGesture",value:function(){this.positionSwitch.setValue(1)}},{key:"prepareGesture",value:function(){if(!this.isGestureEnabled())return 1!==this.positionSwitch.__getValue()&&this.positionSwitch.setValue(1),void(this.gesturePosition=void 0);0!==this.props.transitionProps.layout.width.__getValue()&&0!==this.props.transitionProps.layout.height.__getValue()&&(this.isMotionVertical()?this.prepareGestureVertical():this.prepareGestureHorizontal())}},{key:"prepareGestureHorizontal",value:function(){var e=this.props.transitionProps.navigation.state.index;this.isMotionInverted()?this.gesturePosition=d.default.add(e,d.default.divide(this.gestureX,this.props.transitionProps.layout.width)).interpolate({inputRange:[e-1,e],outputRange:[e-1,e],extrapolate:"clamp"}):this.gesturePosition=d.default.add(e,d.default.multiply(-1,d.default.divide(this.gestureX,this.props.transitionProps.layout.width))).interpolate({inputRange:[e-1,e],outputRange:[e-1,e],extrapolate:"clamp"})}},{key:"prepareGestureVertical",value:function(){var e=this.props.transitionProps.navigation.state.index;this.isMotionInverted()?this.gesturePosition=d.default.add(e,d.default.divide(this.gestureY,this.props.transitionProps.layout.height)).interpolate({inputRange:[e-1,e],outputRange:[e-1,e],extrapolate:"clamp"}):this.gesturePosition=d.default.add(e,d.default.multiply(-1,d.default.divide(this.gestureY,this.props.transitionProps.layout.height))).interpolate({inputRange:[e-1,e],outputRange:[e-1,e],extrapolate:"clamp"})}},{key:"handleReleaseHorizontal",value:function(e){var t=this.props.transitionProps,n=t.navigation,r=t.position,i=t.layout,o=n.state.index,a=null==this.immediateIndex?o:this.immediateIndex,s=i.width.__getValue(),l=this.isMotionInverted()?-1:1,u=l*e.translationX,c=l*e.velocityX,f=s/500,d=Math.max(Math.abs(c),f),p=this.isMotionInverted()?(s-u)/d:u/d,h=this.isMotionInverted()?u/d:(s-u)/d,v=this.computeHorizontalGestureValue(e);return r.setValue(v),this.positionSwitch.setValue(1),c<-50?(this.props.onGestureCanceled&&this.props.onGestureCanceled(),void this.reset(a,p)):c>50?(this.props.onGestureEnd&&this.props.onGestureEnd(),void this.goBack(a,h)):void(v<=o-.5?(this.props.onGestureEnd&&this.props.onGestureEnd(),this.goBack(a,h)):(this.props.onGestureCanceled&&this.props.onGestureCanceled(),this.reset(a,p)))}},{key:"handleReleaseVertical",value:function(e){var t=this.props.transitionProps,n=t.navigation,r=t.position,i=t.layout,o=n.state.index,a=null==this.immediateIndex?o:this.immediateIndex,s=i.height.__getValue(),l=this.isMotionInverted(),u=l?-1:1,c=u*e.translationY,f=u*e.velocityY,d=s/500,p=Math.max(Math.abs(f),d),h=l?(s-c)/p:c/p,v=l?c/p:(s-c)/p,m=this.computeVerticalGestureValue(e);return r.setValue(m),this.positionSwitch.setValue(1),f<-50?(this.props.onGestureCanceled&&this.props.onGestureCanceled(),void this.reset(a,h)):f>50?(this.props.onGestureEnd&&this.props.onGestureEnd(),void this.goBack(a,v)):void(m<=o-.5?(this.props.onGestureEnd&&this.props.onGestureEnd(),this.goBack(a,v)):(this.props.onGestureCanceled&&this.props.onGestureCanceled(),this.reset(a,h)))}},{key:"getHeaderMode",value:function(){return this.props.headerMode?this.props.headerMode:"android"===h.default.OS||"modal"===this.props.mode?"screen":"float"}},{key:"getHeaderBackgroundTransitionPreset",value:function(){var e=this.props.headerBackgroundTransitionPreset;if(e)if(F.includes(e)){if("fade"===e)return T.default.forBackgroundWithFade;if("translate"===e)return T.default.forBackgroundWithTranslation;if("toggle"===e)return T.default.forBackgroundWithInactiveHidden}else console.error("Invalid configuration applied for headerBackgroundTransitionPreset - expected one of "+F.join(", ")+" but received "+JSON.stringify(e));return null}},{key:"getHeaderLayoutPreset",value:function(){var e=this.props.headerLayoutPreset;if(e){if("uikit"===this.getHeaderTransitionPreset()&&"left"===e&&"ios"===h.default.OS&&console.warn("headerTransitionPreset with the value 'uikit' is incompatible with headerLayoutPreset 'left'"),D.includes(e))return e;console.error("Invalid configuration applied for headerLayoutPreset - expected one of "+D.join(", ")+" but received "+JSON.stringify(e))}return"ios"!==h.default.OS?"left":"center"}},{key:"getHeaderTransitionPreset",value:function(){if("ios"!==h.default.OS||"screen"===this.getHeaderMode())return"fade-in-place";var e=this.props.headerTransitionPreset;if(e){if(L.includes(e))return e;console.error("Invalid configuration applied for headerTransitionPreset - expected one of "+L.join(", ")+" but received "+JSON.stringify(e))}return"fade-in-place"}},{key:"getHeaderBackTitleVisible",value:function(){var e=this.props.headerBackTitleVisible,t=!("left"===this.getHeaderLayoutPreset()||"ios"!==h.default.OS);return"boolean"==typeof e?e:t}},{key:"renderInnerScene",value:function(e){var t=e.descriptor,n=t.navigation,r=(0,t.getComponent)(),i=this.props.screenProps,o=this.getHeaderMode();return"screen"===o?f.createElement(v.default,{style:B.container,__source:{fileName:N,lineNumber:887}},f.createElement(v.default,{style:B.scenes,__source:{fileName:N,lineNumber:888}},f.createElement(b.SceneView,{screenProps:i,navigation:n,component:r,__source:{fileName:N,lineNumber:889}})),this.renderHeader(e,o)):f.createElement(b.SceneView,{screenProps:i,navigation:n,component:r,__source:{fileName:N,lineNumber:900}})}},{key:"prepareTransitionConfig",value:function(){this.transitionConfig=E.default.getTransitionConfig(this.props.transitionConfig,(0,o.default)({},this.props.transitionProps,{position:this.position}),this.props.lastTransitionProps,this.isModal())}},{key:"preparePosition",value:function(){this.gesturePosition?this.position=d.default.add(d.default.multiply(this.props.transitionProps.position,this.positionSwitch),d.default.multiply(this.gesturePosition,this.gestureSwitch)):this.position=this.props.transitionProps.position}}]),t}(f.Component);H.contextType=b.ThemeContext;var B=p.default.create({container:{flex:1,flexDirection:"column-reverse",overflow:"hidden"},scenes:{flex:1},floatingHeader:{position:h.default.select({default:"absolute",web:"fixed"}),left:0,top:0,right:0}});t.default=(0,b.withOrientation)(H)},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.NativeScreenContainer=t.NativeScreen=t.ScreenContainer=t.Screen=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.useScreens=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];e&&console.warn("react-native-screens is not fully supported on this platform yet.");c=e},t.screensEnabled=function(){return c};var o=u(n(46)),a=u(n(1)),s=u(n(28)),l=u(n(3));function u(e){return e&&e.__esModule?e:{default:e}}var c=!0;function f(e){return e&&e.__getValue&&e.addListener}function d(e){var t=e;return f(e)&&(t=e.__getValue()),!!t}(t.Screen=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.listenerId=null,n._addListener=function(e){if(n.listenerId)throw new Error("Screen: Attempting to observe an animated value while another value is already observed.");f(e)&&(n.listenerId=e.addListener(n._onAnimatedValueUpdated))},n._removeListener=function(e){f(e)&&(e.removeListener(n.listenerId),n.listenerId=null)},n._onAnimatedValueUpdated=function(e){var t=e.value;n._updateDisplay(!!t)},n._updateDisplay=function(e){void 0===e&&(e=d(n.props.active));var t=e?"flex":"none";n.setNativeProps({style:{display:t}})},n.setNativeProps=function(e){n._view&&n._view.setNativeProps(e)},n._setRef=function(e){n._view=e,n._updateDisplay()},n._onAnimatedValueUpdated=(0,o.default)(n._onAnimatedValueUpdated,10),n._addListener(e.active),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"componentWillUnmount",value:function(){this._removeListener(this.props.active)}},{key:"shouldComponentUpdate",value:function(e){var t=e.active,n=this.props.active;return t===n||(this._removeListener(n),this._addListener(t),this._updateDisplay(d(t)),!1)}},{key:"render",value:function(){return a.default.createElement(s.default.View,r({},this.props,{ref:this._setRef,__source:{fileName:"/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/react-native-screens/src/screens.web.js",lineNumber:105}}))}}]),t}(a.default.Component)).defaultProps={active:!0};t.ScreenContainer=l.default,t.NativeScreen=l.default,t.NativeScreenContainer=l.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=g(n(13)),i=g(n(31)),o=g(n(51)),a=g(n(15)),s=g(n(16)),l=g(n(17)),u=g(n(18)),c=g(n(19)),f=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),d=g(n(28)),p=g(n(4)),h=g(n(8)),v=n(149),m=n(39),y=g(n(151));function g(e){return e&&e.__esModule?e:{default:e}}var b="/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/StackViewCard.tsx";var _=function(e){function t(){return(0,a.default)(this,t),(0,l.default)(this,(0,u.default)(t).apply(this,arguments))}return(0,c.default)(t,e),(0,s.default)(t,[{key:"render",value:function(){var e,t=this.props,n=t.children,r=t.pointerEvents,a=t.style,s=t.position,l=t.transparent,u=t.scene,c=u.index,m=u.isActive,y=h.default.select({web:m,default:l||m?1:s.interpolate({inputRange:[c,c+1-1e-5,c+1],outputRange:[1,1,0],extrapolate:"clamp"})}),g=this.props.animatedStyle||{},_=g.shadowOpacity,S=g.overlayOpacity,O=(0,o.default)(g,["shadowOpacity","overlayOpacity"]),E=p.default.flatten(a)||{},T=E.backgroundColor,k=(0,o.default)(E,["backgroundColor"]),x="dark"===this.context;return e=x?l?w.transparentDark:w.cardDark:l?w.transparentLight:w.cardLight,f.createElement(v.Screen,{pointerEvents:r,onComponentRef:this.props.onComponentRef,style:[O,k],active:y,__source:{fileName:b,lineNumber:93}},!l&&_?f.createElement(d.default.View,{style:[w.shadow,{shadowOpacity:_}],pointerEvents:"none",__source:{fileName:b,lineNumber:101}}):null,f.createElement(d.default.View,(0,i.default)({},function(e){return"ios"===h.default.OS?{accessibilityElementsHidden:!e}:"android"===h.default.OS?{importantForAccessibility:e?"yes":"no-hide-descendants"}:{}}(m),{style:[e,T&&"transparent"!==T?{backgroundColor:T}:null],__source:{fileName:b,lineNumber:106}}),n),S?f.createElement(d.default.View,{pointerEvents:"none",style:[x?w.overlayDark:w.overlayLight,{opacity:S}],__source:{fileName:b,lineNumber:118}}):null)}}]),t}(f.Component);_.contextType=m.ThemeContext;var w=p.default.create({cardLight:{flex:1,backgroundColor:m.ThemeColors.light.body},cardDark:{flex:1,backgroundColor:m.ThemeColors.dark.body},overlayLight:(0,r.default)({},p.default.absoluteFillObject,{backgroundColor:"#000"}),overlayDark:(0,r.default)({},p.default.absoluteFillObject,{backgroundColor:"#fff"}),shadow:{top:0,left:0,bottom:0,width:3,position:"absolute",backgroundColor:"#fff",shadowOffset:{width:-1,height:1},shadowRadius:5,shadowColor:"#000"},transparentLight:{flex:1,backgroundColor:"transparent"},transparentDark:{flex:1,backgroundColor:"transparent"}});t.default=(0,y.default)(_)},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(t){function n(){var e,t;(0,i.default)(this,n);for(var r=arguments.length,o=new Array(r),l=0;l<r;l++)o[l]=arguments[l];return(t=(0,a.default)(this,(e=(0,s.default)(n)).call.apply(e,[this].concat(o)))).pointerEvents=t.computePointerEvents(),t.component=null,t.handleComponentRef=function(e){if(t.component=e,e&&"function"!=typeof e.setNativeProps)throw new Error("Component must implement method `setNativeProps`")},t.handlePositionChange=function(){if(t.component){var e=t.computePointerEvents();t.pointerEvents!==e&&(t.pointerEvents=e,t.component.setNativeProps({pointerEvents:e}))}},t}return(0,l.default)(n,t),(0,o.default)(n,[{key:"componentWillUnmount",value:function(){this.positionListener&&this.positionListener.remove()}},{key:"bindPosition",value:function(){this.positionListener&&this.positionListener.remove(),this.positionListener=new f(this.props.realPosition,this.handlePositionChange)}},{key:"computePointerEvents",value:function(){var e=this.props,t=e.navigation,n=e.realPosition,r=e.scene;if(r.isStale||t.state.index!==r.index)return r.index>t.state.index?"box-only":"none";var i=n.__getAnimatedValue()-t.state.index;return Math.abs(i)>.01?"box-only":"auto"}},{key:"render",value:function(){return this.bindPosition(),this.pointerEvents=this.computePointerEvents(),u.createElement(e,(0,r.default)({},this.props,{pointerEvents:this.pointerEvents,onComponentRef:this.handleComponentRef,__source:{fileName:"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/createPointerEventsContainer.tsx",lineNumber:95}}))}}]),n}(u.Component)};var r=c(n(31)),i=c(n(15)),o=c(n(16)),a=c(n(17)),s=c(n(18)),l=c(n(19)),u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(){function e(t,n){(0,i.default)(this,e),this.value=t,this.token=t.addListener(n)}return(0,o.default)(e,[{key:"remove",value:function(){this.value.removeListener(this.token)}}]),e}()},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=T(n(51)),i=T(n(31)),o=T(n(123)),a=T(n(13)),s=T(n(15)),l=T(n(16)),u=T(n(17)),c=T(n(18)),f=T(n(19)),d=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),p=T(n(28)),h=T(n(64)),v=T(n(8)),m=T(n(4)),y=T(n(3)),g=T(n(21)),b=T(n(284)),_=n(39),w=T(n(153)),S=T(n(154)),O=T(n(287)),E=T(n(103));function T(e){return e&&e.__esModule?e:{default:e}}var k="/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/Header/Header.tsx",x=v.default.select({ios:44,android:56,default:64}),P=v.default.select({ios:20,default:0}),C=v.default.select({ios:70,default:56}),N=v.default.select({ios:20,android:56,default:64}),R=function(e,t,n){if("left"===e){var r={left:N,right:N};return t||(r.left="web"===v.default.OS?16:0),n||(r.right=0),r}if("center"===e){var i={left:C,right:C};return t||n||(i.left=0,i.right=0),i}},A=function(e){function t(){var e,r;(0,s.default)(this,t);for(var l=arguments.length,f=new Array(l),g=0;g<l;g++)f[g]=arguments[g];return(r=(0,u.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(f)))).state={widths:{}},r.renderTitleComponent=function(e){var t=r.props.layoutPreset,n=e.scene.descriptor.options,s=n.headerTitle;if(d.isValidElement(s))return s;var l=r.getHeaderTitleString(e.scene),u=n.headerTitleStyle,c=n.headerTintColor,f=n.headerTitleAllowFontScaling;return(s&&"string"!=typeof s?s:function(e){return d.createElement(w.default,(0,i.default)({},e,{__source:{fileName:k,lineNumber:227}}))})({onLayout:"center"===t?function(t){var n=t.nativeEvent.layout.width;r.setState((function(t){return{widths:(0,a.default)({},t.widths,(0,o.default)({},e.scene.key,n))}}))}:void 0,allowFontScaling:Boolean(f),style:[c?{color:c}:null,"center"===t?{textAlign:"center"}:{textAlign:"left"},u],children:l})},r.renderLeftComponent=function(e){var t=e.scene.descriptor.options;if(d.isValidElement(t.headerLeft)||null===t.headerLeft)return t.headerLeft;if(t.headerLeft||0!==e.scene.index){var n=r.getBackButtonTitleString(e.scene),i=r.getTruncatedBackButtonTitle(e.scene),o=r.state.widths[e.scene.key]?(r.props.layout.initWidth-r.state.widths[e.scene.key])/2:void 0,a=t.headerLeft||S.default;return d.createElement(a,{onPress:function(){requestAnimationFrame((function(){e.scene.descriptor.navigation.goBack(e.scene.descriptor.key)}))},pressColorAndroid:t.headerPressColorAndroid,tintColor:t.headerTintColor,backImage:t.headerBackImage,title:n,truncatedTitle:i,backTitleVisible:r.props.backTitleVisible,allowFontScaling:t.headerBackAllowFontScaling,titleStyle:t.headerBackTitleStyle,layoutPreset:r.props.layoutPreset,width:o,scene:e.scene,__source:{fileName:k,lineNumber:275}})}},r.renderModularLeftComponent=function(e,t,n){var i=e.scene.descriptor,o=i.options,a=i.navigation,s=r.getBackButtonTitleString(e.scene),l=r.getTruncatedBackButtonTitle(e.scene),u=r.state.widths[e.scene.key]?(r.props.layout.initWidth-r.state.widths[e.scene.key])/2:void 0;return d.createElement(O.default,{onPress:function(){requestAnimationFrame((function(){a.goBack(e.scene.descriptor.key)}))},ButtonContainerComponent:t,LabelContainerComponent:n,backTitleVisible:r.props.backTitleVisible,pressColorAndroid:o.headerPressColorAndroid,tintColor:o.headerTintColor,backImage:o.headerBackImage,title:s,truncatedTitle:l,titleStyle:o.headerBackTitleStyle,layoutPreset:r.props.layoutPreset,width:u,scene:e.scene,__source:{fileName:k,lineNumber:318}})},r.renderRightComponent=function(e){var t=e.scene.descriptor.options.headerRight;return"function"==typeof t?t():t||null},r.renderLeft=function(e){var t=e.scene.descriptor.options,n=r.props.transitionPreset,i=e.style;return t.headerLeftContainerStyle&&(i=[i,t.headerLeftContainerStyle]),"uikit"!==n||t.headerBackImage||t.headerLeft||null===t.headerLeft?r.renderSubView((0,a.default)({},e,{style:i}),"left",r.renderLeftComponent,r.props.leftInterpolator):r.renderModularSubView((0,a.default)({},e,{style:i}),"left",r.renderModularLeftComponent,r.props.leftLabelInterpolator,r.props.leftButtonInterpolator)},r.renderTitle=function(e,t){var n=r.props,i=n.layoutPreset,o=n.transitionPreset,s=[{justifyContent:"center"===i?"center":"flex-start"},R(i,t.hasLeftComponent,t.hasRightComponent),t.headerTitleContainerStyle];return r.renderSubView((0,a.default)({},e,{style:s}),"title",r.renderTitleComponent,"uikit"===o?r.props.titleFromLeftInterpolator:r.props.titleInterpolator)},r.renderRight=function(e){var t=e.scene.descriptor.options,n=e.style;return t.headerRightContainerStyle&&(n=[n,t.headerRightContainerStyle]),r.renderSubView((0,a.default)({},e,{style:n}),"right",r.renderRightComponent,r.props.rightInterpolator)},r.renderBackground=function(e){var t=e.scene,n=t.index,i=t.descriptor.options,o=r.props.navigation.state.index-n;return Math.abs(o)>2?null:r.renderSubView((0,a.default)({},e,{style:m.default.absoluteFill}),"background",(function(){return"function"==typeof i.headerBackground?i.headerBackground():i.headerBackground}),r.props.backgroundInterpolator)},r.renderModularSubView=function(e,t,n,i,o){var s=e.scene,l=s.index,u=s.isStale,c=s.key;if(0!==l){var f=r.props.navigation.state.index-l;if(Math.abs(f)>2)return null;var h=n(e,(function(t){var n=t.children;return d.createElement(p.default.View,{style:[o((0,a.default)({},r.props,e))],__source:{fileName:k,lineNumber:483}},n)}),(function(t){var n=t.children;return d.createElement(p.default.View,{style:[i((0,a.default)({},r.props,e))],__source:{fileName:k,lineNumber:491}},n)}));if(null===h)return h;var v=0!==f||u?"none":"box-none";return d.createElement(y.default,{key:t+"_"+c,pointerEvents:v,style:[D.item,D[t],e.style],__source:{fileName:k,lineNumber:511}},h)}},r.renderSubView=function(e,t,n,i){var o=e.scene,s=o.index,l=o.isStale,u=o.key,c=r.props.navigation.state.index-s;if(Math.abs(c)>2)return null;var f=n(e);if(null==f)return null;var h=0!==c||l?"none":"box-none";return d.createElement(p.default.View,{pointerEvents:h,key:t+"_"+u,style:[D.item,D[t],e.style,i&&i((0,a.default)({},r.props,e))],__source:{fileName:k,lineNumber:547}},f)},r.renderHeader=function(e){var t=e.scene.descriptor.options;if(null===t.header||!1===t.headerShown)return null;var o=r.renderLeft(e),a=r.renderRight(e),s=r.renderTitle(e,{hasLeftComponent:!!o,hasRightComponent:!!a,headerTitleContainerStyle:t.headerTitleContainerStyle}),l=r.props.transitionPreset,u={style:D.header,key:"scene_"+e.scene.key};return t.headerLeft||t.headerBackImage||"ios"!==v.default.OS||"uikit"!==l?d.createElement(y.default,(0,i.default)({},u,{__source:{fileName:k,lineNumber:593}}),s,o,a):d.createElement(b.default,(0,i.default)({},u,{maskElement:d.createElement(y.default,{style:D.iconMaskContainer,__source:{fileName:k,lineNumber:604}},d.createElement(h.default,{source:n(158),style:D.iconMask,__source:{fileName:k,lineNumber:605}}),d.createElement(y.default,{style:D.iconMaskFillerRect,__source:{fileName:k,lineNumber:609}})),__source:{fileName:k,lineNumber:601}}),s,o,a)},r}return(0,f.default)(t,e),(0,l.default)(t,[{key:"getHeaderTitleString",value:function(e){var t=e.descriptor.options;if("string"==typeof t.headerTitle)return t.headerTitle;if(t.title&&"string"!=typeof t.title)throw new Error('Invalid title for route "'+e.route.routeName+'" - title must be string or null, instead it was of type '+typeof t.title);return t.title}},{key:"getLastScene",value:function(e){return this.props.scenes.find((function(t){return t.index===e.index-1}))}},{key:"getBackButtonTitleString",value:function(e){var t=this.getLastScene(e);if(!t)return null;var n=t.descriptor.options.headerBackTitle;return n||null===n?n:this.getHeaderTitleString(t)}},{key:"getTruncatedBackButtonTitle",value:function(e){var t=this.getLastScene(e);return t?t.descriptor.options.headerTruncatedBackTitle:null}},{key:"render",value:function(){var e,t,n=this,i=this.props,o=i.mode,a=i.scene,s=i.isLandscape;if("float"===o){var l={};this.props.scenes.forEach((function(e){l[e.index]=e}));var u=Object.values(l).map((function(e){return{position:n.props.position,scene:e}}));e=u.map((function(e){return n.renderHeader(e)})),t=u.map((function(e){return n.renderBackground(e)}))}else{var c={position:new p.default.Value(this.props.scene.index),scene:this.props.scene};e=this.renderHeader(c),t=this.renderBackground(c)}var f=a.descriptor.options,h=f.headerStyle,g=void 0===h?{}:h,b=m.default.flatten(g),w=function(e){return"ios"===v.default.OS?e&&!v.default.isPad?32:44:"android"===v.default.OS?56:64}(s),S=b.alignItems,O=b.justifyContent,E=b.flex,T=b.flexDirection,x=b.flexGrow,P=b.flexShrink,C=b.flexBasis,N=b.flexWrap,R=b.position,A=b.padding,j=b.paddingHorizontal,M=b.paddingRight,L=b.paddingLeft,F=b.top,V=b.right,H=b.bottom,B=b.left,U=(0,r.default)(b,["alignItems","justifyContent","flex","flexDirection","flexGrow","flexShrink","flexBasis","flexWrap","position","padding","paddingHorizontal","paddingRight","paddingLeft","top","right","bottom","left"]);I(S,"alignItems"),I(O,"justifyContent"),I(E,"flex"),I(T,"flexDirection"),I(x,"flexGrow"),I(P,"flexShrink"),I(C,"flexBasis"),I(N,"flexWrap"),I(A,"padding"),I(R,"position"),I(j,"paddingHorizontal"),I(M,"paddingRight"),I(L,"paddingLeft"),I(F,"top"),I(V,"right"),I(H,"bottom"),I(B,"left");var G="dark"===this.context,z=[f.headerTransparent?G?D.transparentContainerDark:D.transparentContainerLight:G?D.containerDark:D.containerLight,{height:w},U],W=f.headerForceInset||{top:"always",bottom:"never",horizontal:"always"},X=U.backgroundColor;return X||(X=G?_.ThemeColors.dark.header:_.ThemeColors.light.header),d.createElement(p.default.View,{style:[this.props.layoutInterpolator(this.props),"ios"!==v.default.OS||f.headerTransparent?null:{backgroundColor:X}],__source:{fileName:k,lineNumber:730}},d.createElement(_.SafeAreaView,{forceInset:W,style:z,__source:{fileName:k,lineNumber:738}},t,d.createElement(y.default,{style:D.flexOne,__source:{fileName:k,lineNumber:740}},e)))}}]),t}(d.PureComponent);function I(e,t){"position"===t&&"absolute"===e?console.warn("position: 'absolute' is not supported on headerStyle. If you would like to render content under the header, use the headerTransparent navigationOption."):void 0!==e&&console.warn(t+" was given a value of "+e+", this has no effect on headerStyle.")}A.contextType=_.ThemeContext,A.defaultProps={layoutInterpolator:E.default.forLayout,leftInterpolator:E.default.forLeft,leftButtonInterpolator:E.default.forLeftButton,leftLabelInterpolator:E.default.forLeftLabel,titleFromLeftInterpolator:E.default.forCenterFromLeft,titleInterpolator:E.default.forCenter,rightInterpolator:E.default.forRight,backgroundInterpolator:E.default.forBackground};var j=v.default.select({android:{elevation:4},web:{boxShadow:"0 2px 4px -1px rgba(0,0,0,0.2), 0 4px 5px 0 rgba(0,0,0,0.14), 0 1px 10px 0 rgba(0,0,0,0.12)"},default:{borderBottomWidth:m.default.hairlineWidth,borderBottomColor:_.ThemeColors.light.headerBorder}}),M=v.default.select({android:{elevation:4},web:{boxShadow:"0 2px 4px -1px rgba(0,0,0,0.2), 0 4px 5px 0 rgba(0,0,0,0.14), 0 1px 10px 0 rgba(0,0,0,0.12)"},default:{borderBottomWidth:m.default.hairlineWidth,borderBottomColor:_.ThemeColors.dark.headerBorder}}),D=m.default.create({containerLight:(0,a.default)({},j,{backgroundColor:_.ThemeColors.light.header}),containerDark:(0,a.default)({},M,{backgroundColor:_.ThemeColors.dark.header}),transparentContainerLight:(0,a.default)({},j,{position:"absolute",top:0,left:0,right:0,borderBottomWidth:0,borderBottomColor:"transparent",elevation:0}),transparentContainerDark:(0,a.default)({},M,{position:"absolute",top:0,left:0,right:0,borderBottomWidth:0,borderBottomColor:"transparent",elevation:0}),header:(0,a.default)({},m.default.absoluteFillObject,{flexDirection:"row"}),item:{backgroundColor:"transparent"},iconMaskContainer:{flex:1,flexDirection:"row",justifyContent:"center"},iconMaskFillerRect:{flex:1,backgroundColor:"#d8d8d8",marginLeft:-5},iconMask:{height:23,width:14.5,marginLeft:8.5,marginTop:-2.5,alignSelf:"center",resizeMode:"contain",transform:[{scaleX:g.default.isRTL?-1:1}]},background:{},title:{bottom:0,top:0,position:"absolute",alignItems:"center",flexDirection:"row"},left:{left:0,bottom:0,top:0,position:"absolute",alignItems:"center",flexDirection:"row"},right:{right:0,bottom:0,top:0,position:"absolute",flexDirection:"row",alignItems:"center"},flexOne:{flex:1}});t.default=(0,i.default)((0,_.withOrientation)(A),{get HEIGHT(){return x+P}})},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=m(n(13)),i=m(n(31)),o=m(n(51)),a=m(n(15)),s=m(n(16)),l=m(n(17)),u=m(n(18)),c=m(n(19)),f=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),d=m(n(8)),p=m(n(4)),h=m(n(28)),v=n(39);function m(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(){return(0,a.default)(this,t),(0,l.default)(this,(0,u.default)(t).apply(this,arguments))}return(0,c.default)(t,e),(0,s.default)(t,[{key:"render",value:function(){var e=this.props,t=e.style,n=(0,o.default)(e,["style"]),r=v.ThemeColors[this.context];return f.createElement(h.default.Text,(0,i.default)({numberOfLines:1},n,{style:[g.title,{color:r.label},t],accessibilityTraits:"header",__source:{fileName:"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/Header/HeaderTitle.tsx",lineNumber:17}}))}}]),t}(f.Component);y.contextType=v.ThemeContext;var g=p.default.create({title:(0,r.default)({},d.default.select({ios:{fontSize:17,fontWeight:"600",color:"rgba(0, 0, 0, .9)",marginHorizontal:16},android:{fontSize:20,fontWeight:"500",color:"rgba(0, 0, 0, .9)",marginHorizontal:16},default:{fontSize:18,fontWeight:"400",color:"#3c4043"}}))});t.default=y},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=_(n(13)),i=_(n(15)),o=_(n(16)),a=_(n(17)),s=_(n(18)),l=_(n(19)),u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),c=_(n(21)),f=_(n(64)),d=_(n(23)),p=_(n(3)),h=_(n(8)),v=_(n(4)),m=n(39),y=_(n(155)),g=_(n(79)),b=_(n(286));function _(e){return e&&e.__esModule?e:{default:e}}var w="/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/Header/HeaderBackButton.tsx",S=function(e){function t(){var e,n;(0,i.default)(this,t);for(var r=arguments.length,o=new Array(r),l=0;l<r;l++)o[l]=arguments[l];return(n=(0,a.default)(this,(e=(0,s.default)(t)).call.apply(e,[this].concat(o)))).state={},n.handleTextLayout=function(e){n.state.initialTextWidth||n.setState({initialTextWidth:e.nativeEvent.layout.x+e.nativeEvent.layout.width})},n.getTitleText=function(){var e=n.props,t=e.width,r=e.title,i=e.truncatedTitle,o=n.state.initialTextWidth;return null===r?null:r?o&&t&&o>t?i:r:i},n}return(0,l.default)(t,e),(0,o.default)(t,[{key:"renderBackImage",value:function(){var e=this.props,t=e.backImage,n=e.backTitleVisible,r=this.props.tintColor;r||"android"!==h.default.OS||(r=m.ThemeColors[this.context].label);var i=this.getTitleText();return u.isValidElement(t)?t:t?t({tintColor:r,title:i}):u.createElement(f.default,{style:[O.icon,!!n&&O.iconWithTitle,!!r&&{tintColor:r}],source:g.default,fadeDuration:0,__source:{fileName:w,lineNumber:71}})}},{key:"maybeRenderTitle",value:function(){var e=this.props,t=e.allowFontScaling,n=e.backTitleVisible,r=e.titleStyle,i=e.tintColor,o=this.getTitleText();return n&&null!==o?u.createElement(d.default,{accessible:!1,onLayout:this.handleTextLayout,style:[O.title,!!i&&{color:i},r],numberOfLines:1,allowFontScaling:!!t,__source:{fileName:w,lineNumber:114}},this.getTitleText()):null}},{key:"render",value:function(){var e=this.props,t=e.onPress,n=e.pressColorAndroid,r=e.title,i=e.disabled,o=u.createElement(y.default,{disabled:i,accessible:!0,accessibilityRole:"button",accessibilityComponentType:"button",accessibilityLabel:r?r+", back":"Go back",accessibilityTraits:"button",testID:"header-back",delayPressIn:0,onPress:i?void 0:t,pressColor:n,style:[O.container,i&&O.disabled],borderless:!0,__source:{fileName:w,lineNumber:130}},u.createElement(p.default,{style:O.container,__source:{fileName:w,lineNumber:144}},this.renderBackImage(),this.maybeRenderTitle()));return"ios"===h.default.OS?o:u.createElement(p.default,{style:O.androidButtonWrapper,__source:{fileName:w,lineNumber:154}},o)}}]),t}(u.PureComponent);S.defaultProps={pressColorAndroid:"rgba(0, 0, 0, .32)",tintColor:h.default.select({ios:"#037aff",web:"#5f6368"}),truncatedTitle:"Back",backImage:h.default.select({web:b.default})},S.contextType=m.ThemeContext;var O=v.default.create({disabled:{opacity:.5},androidButtonWrapper:(0,r.default)({margin:13,backgroundColor:"transparent"},h.default.select({web:{marginLeft:21},default:{}})),container:{alignItems:"center",flexDirection:"row",backgroundColor:"transparent"},title:{fontSize:17,paddingRight:10},icon:h.default.select({ios:{backgroundColor:"transparent",height:21,width:13,marginLeft:9,marginRight:22,marginVertical:12,resizeMode:"contain",transform:[{scaleX:c.default.isRTL?-1:1}]},default:{height:24,width:24,margin:3,resizeMode:"contain",backgroundColor:"transparent",transform:[{scaleX:c.default.isRTL?-1:1}]}}),iconWithTitle:"ios"===h.default.OS?{marginRight:6}:{}});t.default=S},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=m(n(31)),i=m(n(51)),o=m(n(15)),a=m(n(16)),s=m(n(17)),l=m(n(18)),u=m(n(19)),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),f=m(n(8)),d=m(n(145)),p=m(n(40)),h=m(n(3)),v=m(n(285));function m(e){return e&&e.__esModule?e:{default:e}}var y="/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/TouchableItem.tsx",g=function(e){function t(){return(0,o.default)(this,t),(0,s.default)(this,(0,l.default)(t).apply(this,arguments))}return(0,u.default)(t,e),(0,a.default)(t,[{key:"render",value:function(){if("android"===f.default.OS&&f.default.Version>=21){var e=this.props,t=e.style,n=(0,i.default)(e,["style"]);return c.createElement(d.default,(0,r.default)({},n,{style:null,background:d.default.Ripple(this.props.pressColor,this.props.borderless),__source:{fileName:y,lineNumber:52}}),c.createElement(h.default,{style:t,__source:{fileName:y,lineNumber:60}},c.Children.only(this.props.children)))}return"ios"===f.default.OS?c.createElement(v.default,(0,r.default)({hitSlop:{top:10,bottom:10,right:10,left:10},disallowInterruption:!0,enabled:!this.props.disabled},this.props,{__source:{fileName:y,lineNumber:65}}),this.props.children):c.createElement(p.default,(0,r.default)({},this.props,{__source:{fileName:y,lineNumber:76}}),this.props.children)}}]),t}(c.Component);g.defaultProps={borderless:!1,pressColor:"rgba(0, 0, 0, .32)"},t.default=g},function(e,t,n){"use strict";function r(e){this.data=e}r.prototype={get uri(){if("undefined"!=typeof window&&void 0!==window.devicePixelRatio){if(window.devicePixelRatio>2&&this.data["uri@3x"])return this.data["uri@3x"];if(window.devicePixelRatio>1&&this.data["uri@2x"])return this.data["uri@2x"]}return this.data.uri},get width(){return this.data.width},get height(){return this.data.height},toString:function(){return this.data.uri}},e.exports=r},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.scene,n=e.scenes,r=t.index,i=n.length-1;if(!n[i].isActive){var o=n.findIndex((function(e){return e===t})),a=n.findIndex((function(e){return e.isActive})),s=n[a].index,l=n[i].index;return r!==s&&o===i?{first:Math.min(s,r-1),last:r+1}:r===s&&o===a?{first:r-1,last:Math.max(l,r+1)}:r===s||o>a?null:{first:r-1,last:r+1}}return{first:r-1,last:r+1}}},function(e,t,n){var r=n(156);e.exports=new r({uri:n.p+"6165c9d7a2e729ba57b23dd93add5366.png",width:50,height:85})},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(21)),i=o(n(157));function o(e){return e&&e.__esModule?e:{default:e}}function a(e){var t=e.navigation,n=e.scene,r=t.state.index===n.index,i=r?0:1e6;return{opacity:r?1:0,transform:[{translateX:i},{translateY:i}]}}t.default={forHorizontal:function(e){var t=e.layout,n=e.position,o=e.scene;if(!t.isMeasured)return a(e);var s=(0,i.default)(e);if(!s)return{opacity:0};var l=s.first,u=s.last,c=o.index,f=t.initWidth,d=n.interpolate({inputRange:[l,c,u],outputRange:r.default.isRTL?[-f,0,.3*f]:[f,0,-.3*f],extrapolate:"clamp"}),p=e.shadowEnabled?n.interpolate({inputRange:[l,c,u],outputRange:[0,.7,0],extrapolate:"clamp"}):null;return{transform:[{translateX:d}],overlayOpacity:e.cardOverlayEnabled?n.interpolate({inputRange:[c,u-.5,u,u+1e-5],outputRange:[0,.07,.07,0],extrapolate:"clamp"}):null,shadowOpacity:p}},forVertical:function(e){var t=e.layout,n=e.position,r=e.scene;if(!t.isMeasured)return a(e);var o=(0,i.default)(e);if(!o)return{opacity:0};var s=o.first,l=o.last,u=r.index,c=t.initHeight;return{transform:[{translateY:n.interpolate({inputRange:[s,u,l],outputRange:[c,0,0],extrapolate:"clamp"})}]}},forFadeFromBottomAndroid:function(e){var t=e.layout,n=e.position,r=e.scene;if(!t.isMeasured)return a(e);var o=(0,i.default)(e);if(!o)return{opacity:0};var s=o.first,l=o.last,u=r.index,c=n.interpolate({inputRange:[s,s+.5,s+.9,u,l-1e-5,l],outputRange:[0,.25,.7,1,1,0],extrapolate:"clamp"}),f=.08*t.initHeight;return{opacity:c,transform:[{translateY:n.interpolate({inputRange:[s,u,l],outputRange:[f,0,0],extrapolate:"clamp"})}]}},forFadeToBottomAndroid:function(e){var t=e.layout,n=e.position,r=e.scene;if(!t.isMeasured)return a(e);var o=(0,i.default)(e);if(!o)return{opacity:0};var s=o.first,l=o.last,u=[s,r.index,l],c=n.interpolate({inputRange:u,outputRange:[0,1,1],extrapolate:"clamp"}),f=.08*t.initHeight;return{opacity:c,transform:[{translateY:n.interpolate({inputRange:u,outputRange:[f,0,0],extrapolate:"clamp"})}]}},forFade:function(e){var t=e.layout,n=e.position,r=e.scene;if(!t.isMeasured)return a(e);var o=(0,i.default)(e);if(!o)return{opacity:0};var s=o.first,l=o.last,u=r.index;return{opacity:n.interpolate({inputRange:[s,u,l],outputRange:[0,1,1],extrapolate:"clamp"})}},forNoAnimation:function(){return{}}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.supportsImprovedSpringAnimation=void 0;var r,i=n(81);var o=((r=i)&&r.__esModule?r:{default:r}).default.PlatformConstants;t.supportsImprovedSpringAnimation=function(){if(o&&o.reactNativeVersion){var e=o.reactNativeVersion,t=e.major,n=e.minor;return n>=50||0===t&&0===n}return!1}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1));t.default=r.createContext(null)},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=m(n(289)),i=m(n(13)),o=m(n(15)),a=m(n(16)),s=m(n(17)),l=m(n(18)),u=m(n(19)),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),f=m(n(28)),d=m(n(102)),p=m(n(4)),h=m(n(3)),v=m(n(163));function m(e){return e&&e.__esModule?e:{default:e}}var y={duration:250,easing:d.default.inOut(d.default.ease),timing:f.default.timing},g=function(e){function t(e){var n;(0,o.default)(this,t),(n=(0,s.default)(this,(0,l.default)(t).call(this,e))).computeScenes=function(e,t){var r=(0,v.default)(n.state.scenes,t.navigation.state,e.navigation.state,t.descriptors);if(t.navigation.state.isTransitioning||(r=w(r)),t.screenProps!==n.props.screenProps&&n.setState({nextScenes:r}),r!==n.state.scenes)return r},n.handleLayout=function(e){var t=e.nativeEvent.layout,r=t.height,o=t.width;if(n.state.layout.initWidth!==o||n.state.layout.initHeight!==r){var a=(0,i.default)({},n.state.layout,{initHeight:r,initWidth:o,isMeasured:!0});a.height.setValue(r),a.width.setValue(o);var s=(0,i.default)({},n.state,{layout:a});n.transitionProps=b(n.props,s),n.setState(s)}},n.handleTransitionEnd=function(){if(n.isComponentMounted){var e=n.prevTransitionProps;n.prevTransitionProps=void 0;var t=w(n.state.scenes),o=(0,i.default)({},n.state,{scenes:t});n.transitionProps=b(n.props,o),n.setState(o,(function(){var t,i;return r.default.async((function(o){for(;;)switch(o.prev=o.next){case 0:if(!n.props.onTransitionEnd){o.next=5;break}if(!((t=n.props.onTransitionEnd(n.transitionProps,e))instanceof Promise)){o.next=5;break}return o.next=5,r.default.awrap(t);case 5:n.queuedTransition?(i=n.queuedTransition.prevProps,n.queuedTransition=null,n.startTransition(i,n.props)):n.isTransitionRunning=!1;case 6:case"end":return o.stop()}}))}))}};var a={height:new f.default.Value(0),initHeight:0,initWidth:0,isMeasured:!1,width:new f.default.Value(0)},u=new f.default.Value(n.props.navigation.state.index);return n.positionListener=u.addListener((function(){})),n.state={layout:a,position:u,scenes:(0,v.default)([],n.props.navigation.state,null,n.props.descriptors)},n.prevTransitionProps=void 0,n.transitionProps=b(e,n.state),n.isComponentMounted=!1,n.isTransitionRunning=!1,n.queuedTransition=null,n}return(0,u.default)(t,e),(0,a.default)(t,[{key:"componentDidMount",value:function(){this.isComponentMounted=!0}},{key:"componentWillUnmount",value:function(){this.isComponentMounted=!1,this.positionListener&&this.state.position.removeListener(this.positionListener)}},{key:"UNSAFE_componentWillReceiveProps",value:function(e){this.isTransitionRunning?this.queuedTransition||(this.queuedTransition={prevProps:this.props}):this.startTransition(this.props,e)}},{key:"startTransition",value:function(e,t){var n=this,o=e.navigation.state.index!==t.navigation.state.index,a=this.computeScenes(e,t);if(!a)return this.prevTransitionProps=this.transitionProps,this.state.position.setValue(e.navigation.state.index),void this.handleTransitionEnd();var s=(0,i.default)({},this.state,{scenes:a}),l=s.position,u=t.navigation.state.index;this.prevTransitionProps=this.transitionProps,this.transitionProps=b(t,s);var c=this.transitionProps.navigation.state.isTransitioning;c&&o?c&&(this.isTransitionRunning=!0,this.setState(s,(function(){var e,a,s,c,f;return r.default.async((function(d){for(;;)switch(d.prev=d.next){case 0:if(!t.onTransitionStart){d.next=5;break}if(!((e=t.onTransitionStart(n.transitionProps,n.prevTransitionProps))instanceof Promise)){d.next=5;break}return d.next=5,r.default.awrap(e);case 5:a=t.configureTransition?t.configureTransition(n.transitionProps,n.prevTransitionProps):null,s=(0,i.default)({},y,a),c=s.timing,delete s.timing,f=l.__getValue()!==u,o&&f?c(l,(0,i.default)({},s,{toValue:t.navigation.state.index})).start((function(){requestAnimationFrame(n.handleTransitionEnd)})):n.handleTransitionEnd();case 11:case"end":return d.stop()}}))}))):this.setState(s,(function(){var e;return r.default.async((function(i){for(;;)switch(i.prev=i.next){case 0:if(!t.onTransitionStart){i.next=5;break}if(!((e=t.onTransitionStart(n.transitionProps,n.prevTransitionProps))instanceof Promise)){i.next=5;break}return i.next=5,r.default.awrap(e);case 5:o&&l.setValue(u),n.handleTransitionEnd();case 7:case"end":return i.stop()}}))}))}},{key:"render",value:function(){return c.createElement(h.default,{onLayout:this.handleLayout,style:O.main,__source:{fileName:"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/Transitioner.tsx",lineNumber:267}},this.props.render(this.transitionProps,this.prevTransitionProps))}}]),t}(c.Component);function b(e,t){var n=e.navigation,r=t.layout,i=t.position,o=t.scenes,a=o.find(S);if(!a)throw new Error("Could not find active scene");return{layout:r,navigation:n,position:i,scenes:o,scene:a,index:a.index}}function _(e){return!e.isStale}function w(e){var t=e.filter(_);return t.length===e.length?e:t}function S(e){return e.isActive}var O=p.default.create({main:{flex:1}});t.default=g},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,i){if(e.forEach((function(e){var t=e.route;i&&i[t.key]&&(e.descriptor=i[t.key])})),n===t)return e;var o=new Map,l=new Map,u=new Map;e.forEach((function(e){var t=e.key;e.isStale&&u.set(t,e),o.set(t,e)}));var c=new Set,f=t.routes;f.length>t.index+1&&(console.warn("StackRouter provided invalid state, index should always be the top route"),f=t.routes.slice(0,t.index+1));if(f.forEach((function(e,t){var n="scene_"+e.key,r={index:t,isActive:!1,isStale:!1,key:n,route:e,descriptor:i&&i[e.key]};if(c.has(n))throw new Error("navigation.state.routes["+t+'].key "'+n+'" conflicts with another route!');c.add(n),u.has(n)&&u.delete(n),l.set(n,r)})),n){var d=n.routes;d.length>n.index+1&&(console.warn("StackRouter provided invalid state, index should always be the top route"),d=d.slice(0,n.index+1)),d.forEach((function(t,n){var r="scene_"+t.key;if(!l.has(r)){var o=e.find((function(e){return e.route.key===t.key})),a=o?o.descriptor:i[t.key];a&&u.set(r,{index:n,isActive:!1,isStale:!0,key:r,route:t,descriptor:a})}}))}var p=[],h=function(e){var t=e.key,n=o.has(t)?o.get(t):null;n&&s(n,e)?p.push(n):p.push(e)};u.forEach(h),l.forEach(h),p.sort(a);var v=0;if(p.forEach((function(e,n){var i=!e.isStale&&e.index===t.index;i!==e.isActive&&(p[n]=(0,r.default)({},e,{isActive:i})),i&&v++})),1!==v)throw new Error("There should always be only one scene active, not "+v+".");if(p.length!==e.length)return p;if(p.some((function(t,n){return!s(e[n],t)})))return p;return e};var r=o(n(13)),i=o(n(291));function o(e){return e&&e.__esModule?e:{default:e}}function a(e,t){return e.index>t.index?1:e.index<t.index?-1:function(e,t){var n=e.length-t.length;return n>0?1:n<0?-1:e>t?1:-1}(e.key,t.key)}function s(e,t){return e.key===t.key&&e.index===t.index&&e.isStale===t.isStale&&e.isActive===t.isActive&&function(e,t){if(!e||!t)return e===t;if(e.key!==t.key)return!1;return(0,i.default)(e,t)}(e.route,t.route)}},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.prefixMap,n=e.plugins;return function e(s){for(var l in s){var u=s[l];if((0,a.default)(u))s[l]=e(u);else if(Array.isArray(u)){for(var c=[],f=0,d=u.length;f<d;++f){var p=(0,i.default)(n,l,u[f],s,t);(0,o.default)(c,p||u[f])}c.length>0&&(s[l]=c)}else{var h=(0,i.default)(n,l,u,s,t);h&&(s[l]=h),s=(0,r.default)(t,l,s)}}return s}};var r=s(n(194)),i=s(n(195)),o=s(n(196)),a=s(n(197));function s(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&"text"===t)return["-webkit-text","text"]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,o.default)(t)&&t.indexOf("cross-fade(")>-1)return a.map((function(e){return t.replace(/cross-fade\(/g,e+"cross-fade(")}))};var r,i=n(58),o=(r=i)&&r.__esModule?r:{default:r};var a=["-webkit-",""]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("cursor"===e&&i.hasOwnProperty(t))return r.map((function(e){return e+t}))};var r=["-webkit-","-moz-",""],i={"zoom-in":!0,"zoom-out":!0,grab:!0,grabbing:!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,o.default)(t)&&t.indexOf("filter(")>-1)return a.map((function(e){return t.replace(/filter\(/g,e+"filter(")}))};var r,i=n(58),o=(r=i)&&r.__esModule?r:{default:r};var a=["-webkit-",""]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("display"===e&&r.hasOwnProperty(t))return r[t]};var r={flex:["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex","flex"],"inline-flex":["-webkit-inline-box","-moz-inline-box","-ms-inline-flexbox","-webkit-inline-flex","inline-flex"]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){Object.prototype.hasOwnProperty.call(i,e)&&(n[i[e]]=r[t]||t);if("flex"===e){if(Object.prototype.hasOwnProperty.call(o,t))return void(n.msFlex=o[t]);if(a.test(t))return void(n.msFlex=t+" 1 0%");var s=t.split(/\s/);switch(s.length){case 1:return void(n.msFlex="1 1 "+t);case 2:return void(a.test(s[1])?n.msFlex=s[0]+" "+s[1]+" 0%":n.msFlex=s[0]+" 1 "+s[1]);default:n.msFlex=t}}};var r={"space-around":"distribute","space-between":"justify","flex-start":"start","flex-end":"end"},i={alignContent:"msFlexLinePack",alignSelf:"msFlexItemAlign",alignItems:"msFlexAlign",justifyContent:"msFlexPack",order:"msFlexOrder",flexGrow:"msFlexPositive",flexShrink:"msFlexNegative",flexBasis:"msFlexPreferredSize"},o={auto:"1 1 auto",inherit:"inherit",initial:"0 1 auto",none:"0 0 auto",unset:"unset"},a=/^\d+(\.\d+)?$/},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){"flexDirection"===e&&"string"==typeof t&&(t.indexOf("column")>-1?n.WebkitBoxOrient="vertical":n.WebkitBoxOrient="horizontal",t.indexOf("reverse")>-1?n.WebkitBoxDirection="reverse":n.WebkitBoxDirection="normal");i.hasOwnProperty(e)&&(n[i[e]]=r[t]||t)};var r={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple"},i={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines",flexGrow:"WebkitBoxFlex"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,o.default)(t)&&s.test(t))return a.map((function(e){return t.replace(s,(function(t){return e+t}))}))};var r,i=n(58),o=(r=i)&&r.__esModule?r:{default:r};var a=["-webkit-","-moz-",""],s=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/gi},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,o.default)(t)&&t.indexOf("image-set(")>-1)return a.map((function(e){return t.replace(/image-set\(/g,e+"image-set(")}))};var r,i=n(58),o=(r=i)&&r.__esModule?r:{default:r};var a=["-webkit-",""]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("position"===e&&"sticky"===t)return["-webkit-sticky","sticky"]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(i.hasOwnProperty(e)&&o.hasOwnProperty(t))return r.map((function(e){return e+t}))};var r=["-webkit-","-moz-",""],i={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},o={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,a){if("string"==typeof t&&s.hasOwnProperty(e)){var u=function(e,t){if((0,i.default)(e))return e;for(var n=e.split(/,(?![^()]*(?:\([^()]*\))?\))/g),o=0,a=n.length;o<a;++o){var s=n[o],u=[s];for(var c in t){var f=(0,r.default)(c);if(s.indexOf(f)>-1&&"order"!==f)for(var d=t[c],p=0,h=d.length;p<h;++p)u.unshift(s.replace(f,l[d[p]]+f))}n[o]=u.join(",")}return n.join(",")}(t,a),c=u.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter((function(e){return!/-moz-|-ms-/.test(e)})).join(",");if(e.indexOf("Webkit")>-1)return c;var f=u.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter((function(e){return!/-webkit-|-ms-/.test(e)})).join(",");return e.indexOf("Moz")>-1?f:(n["Webkit"+(0,o.default)(e)]=c,n["Moz"+(0,o.default)(e)]=f,u)}};var r=a(n(198)),i=a(n(58)),o=a(n(115));function a(e){return e&&e.__esModule?e:{default:e}}var s={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},l={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-"}},function(e,t,n){"use strict";(function(t){var n="undefined"==typeof window?t:window,r=function(e,t,n){return function(r,i){var o=e(function(){t.call(this,o),r.apply(this,arguments)}.bind(this),i);return this[n]?this[n].push(o):this[n]=[o],o}},i=function(e,t){return function(n){if(this[t]){var r=this[t].indexOf(n);-1!==r&&this[t].splice(r,1)}e(n)}},o="TimerMixin_timeouts",a=i(n.clearTimeout,o),s=r(n.setTimeout,a,o),l="TimerMixin_intervals",u=i(n.clearInterval,l),c=r(n.setInterval,(function(){}),l),f="TimerMixin_immediates",d=i(n.clearImmediate,f),p=r(n.setImmediate,d,f),h="TimerMixin_rafs",v=i(n.cancelAnimationFrame,h),m={componentWillUnmount:function(){this[o]&&this[o].forEach((function(e){n.clearTimeout(e)})),this[o]=null,this[l]&&this[l].forEach((function(e){n.clearInterval(e)})),this[l]=null,this[f]&&this[f].forEach((function(e){n.clearImmediate(e)})),this[f]=null,this[h]&&this[h].forEach((function(e){n.cancelAnimationFrame(e)})),this[h]=null},setTimeout:s,clearTimeout:a,setInterval:c,clearInterval:u,setImmediate:p,clearImmediate:d,requestAnimationFrame:r(n.requestAnimationFrame,v,h),cancelAnimationFrame:v};e.exports=m}).call(this,n(48))},function(e,t,n){"use strict";var r="function"==typeof Float32Array;function i(e,t){return 1-3*t+3*e}function o(e,t){return 3*t-6*e}function a(e){return 3*e}function s(e,t,n){return((i(t,n)*e+o(t,n))*e+a(t))*e}function l(e,t,n){return 3*i(t,n)*e*e+2*o(t,n)*e+a(t)}e.exports=function(e,t,n,i){if(!(0<=e&&e<=1&&0<=n&&n<=1))throw new Error("bezier x values must be in [0, 1] range");var o=r?new Float32Array(11):new Array(11);if(e!==t||n!==i)for(var a=0;a<11;++a)o[a]=s(.1*a,e,n);function u(t){for(var r=0,i=1;10!==i&&o[i]<=t;++i)r+=.1;--i;var a=r+.1*((t-o[i])/(o[i+1]-o[i])),u=l(a,e,n);return u>=.001?function(e,t,n,r){for(var i=0;i<4;++i){var o=l(t,n,r);if(0===o)return t;t-=(s(t,n,r)-e)/o}return t}(t,a,e,n):0===u?a:function(e,t,n,r,i){var o,a,l=0;do{(o=s(a=t+(n-t)/2,r,i)-e)>0?n=a:t=a}while(Math.abs(o)>1e-7&&++l<10);return a}(t,r,r+.1,e,n)}return function(r){return e===t&&n===i?r:0===r?0:1===r?1:s(u(r),t,i)}}},function(e,t,n){"use strict";(function(e){var r=n(54),i=n(6);var o=function(t){var n,r;function o(e){var n;return(n=t.call(this)||this)._deceleration=void 0!==e.deceleration?e.deceleration:.998,n._velocity=e.velocity,n._useNativeDriver=Object(i.c)(e),n.__isInteraction=void 0===e.isInteraction||e.isInteraction,n.__iterations=void 0!==e.iterations?e.iterations:1,n}r=t,(n=o).prototype=Object.create(r.prototype),n.prototype.constructor=n,n.__proto__=r;var a=o.prototype;return a.__getNativeAnimationConfig=function(){return{type:"decay",deceleration:this._deceleration,velocity:this._velocity,iterations:this.__iterations}},a.start=function(e,t,n,r,i){this.__active=!0,this._lastValue=e,this._fromValue=e,this._onUpdate=t,this.__onEnd=n,this._startTime=Date.now(),this._useNativeDriver?this.__startNativeAnimation(i):this._animationFrame=requestAnimationFrame(this.onUpdate.bind(this))},a.onUpdate=function(){var e=Date.now(),t=this._fromValue+this._velocity/(1-this._deceleration)*(1-Math.exp(-(1-this._deceleration)*(e-this._startTime)));this._onUpdate(t),Math.abs(this._lastValue-t)<.1?this.__debouncedOnEnd({finished:!0}):(this._lastValue=t,this.__active&&(this._animationFrame=requestAnimationFrame(this.onUpdate.bind(this))))},a.stop=function(){t.prototype.stop.call(this),this.__active=!1,e.cancelAnimationFrame(this._animationFrame),this.__debouncedOnEnd({finished:!1})},o}(r.a);t.a=o}).call(this,n(48))},function(e,t,n){"use strict";var r=n(2),i=n.n(r),o=n(45),a=o.unmountComponentAtNode,s=n(4),l=n(3),u=n(0),c=n(1),f=n.n(c);var d=function(e){var t,n;function r(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).state={mainKey:1},t}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.getChildContext=function(){return{rootTag:this.props.rootTag}},i.render=function(){var e=this.props,t=e.children,n=e.WrapperComponent,r=f.a.createElement(l.default,{children:t,key:this.state.mainKey,pointerEvents:"box-none",style:p.appContainer});return n&&(r=f.a.createElement(n,null,r)),f.a.createElement(l.default,{pointerEvents:"box-none",style:p.appContainer},r)},r}(c.Component);d.childContextTypes={rootTag:u.any},d.propTypes={};var p=s.default.create({appContainer:{flex:1}}),h=o.hydrate,v=n(41);function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var y=h;n.d(t,"a",(function(){return S}));var g,b={},_={},w=function(e){return e()},S=function(){function e(){}return e.getAppKeys=function(){return Object.keys(_)},e.getApplication=function(e,t){return i()(_[e]&&_[e].getApplication,"Application "+e+" has not been registered. This is either due to an import error during initialization or failure to call AppRegistry.registerComponent."),_[e].getApplication(t)},e.registerComponent=function(e,t){return _[e]={getApplication:function(e){return n=w(t),r=e?e.initialProps:b,i=g&&g(e),{element:f.a.createElement(d,{WrapperComponent:i,rootTag:{}},f.a.createElement(n,r)),getStyleElement:function(e){var t=v.a.getStyleSheet();return f.a.createElement("style",m({},e,{dangerouslySetInnerHTML:{__html:t.textContent},id:t.id}))}};var n,r,i},run:function(e){return n=w(t),r=e.initialProps||b,o=e.rootTag,a=g&&g(e),s=e.callback,i()(o,"Expect to have a valid rootTag, instead got ",o),void y(f.a.createElement(d,{WrapperComponent:a,rootTag:o},f.a.createElement(n,r)),o,s);var n,r,o,a,s}},e},e.registerConfig=function(t){t.forEach((function(t){var n=t.appKey,r=t.component,o=t.run;o?e.registerRunnable(n,o):(i()(r,"No component provider passed in"),e.registerComponent(n,r))}))},e.registerRunnable=function(e,t){return _[e]={run:t},e},e.runApplication=function(e,t){i()(_[e]&&_[e].run,'Application "'+e+'" has not been registered. This is either due to an import error during initialization or failure to call AppRegistry.registerComponent.'),_[e].run(t)},e.setComponentProviderInstrumentationHook=function(e){w=e},e.setWrapperComponentProvider=function(e){g=e},e.unmountApplicationComponentAtRootTag=function(e){a(e)},e}()},,,,,function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(75),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,s=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,u=i?Symbol.for("react.profiler"):60114,c=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.concurrent_mode"):60111,p=i?Symbol.for("react.forward_ref"):60112,h=i?Symbol.for("react.suspense"):60113,v=i?Symbol.for("react.memo"):60115,m=i?Symbol.for("react.lazy"):60116,y="function"==typeof Symbol&&Symbol.iterator;function g(e,t,n,r,i,o,a,s){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,i,o,a,s],u=0;(e=Error(t.replace(/%s/g,(function(){return l[u++]})))).name="Invariant Violation"}throw e.framesToPop=1,e}}function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);g(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var _={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function S(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||_}function O(){}function E(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||_}S.prototype.isReactComponent={},S.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},S.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},O.prototype=S.prototype;var T=E.prototype=new O;T.constructor=E,r(T,S.prototype),T.isPureReactComponent=!0;var k={current:null},x={current:null},P=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function N(e,t,n){var r=void 0,i={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)P.call(t,r)&&!C.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:s,props:i,_owner:x.current}}function R(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var A=/\/+/g,I=[];function j(e,t,n,r){if(I.length){var i=I.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>I.length&&I.push(e)}function D(e,t,n){return null==e?0:function e(t,n,r,i){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var l=!1;if(null===t)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case o:case a:l=!0}}if(l)return r(i,t,""===n?"."+L(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var c=n+L(s=t[u],u);l+=e(s,c,r,i)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=y&&t[y]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),u=0;!(s=t.next()).done;)l+=e(s=s.value,c=n+L(s,u++),r,i);else"object"===s&&b("31","[object Object]"===(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function L(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function F(e,t){e.func.call(e.context,t,e.count++)}function V(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?H(e,r,n,(function(e){return e})):null!=e&&(R(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(A,"$&/")+"/")+n)),r.push(e))}function H(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(A,"$&/")+"/"),D(e,V,t=j(t,o,r,i)),M(t)}function B(){var e=k.current;return null===e&&b("321"),e}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return H(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;D(e,F,t=j(null,null,t,n)),M(t)},count:function(e){return D(e,(function(){return null}),null)},toArray:function(e){var t=[];return H(e,t,null,(function(e){return e})),t},only:function(e){return R(e)||b("143"),e}},createRef:function(){return{current:null}},Component:S,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:v,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return B().useCallback(e,t)},useContext:function(e,t){return B().useContext(e,t)},useEffect:function(e,t){return B().useEffect(e,t)},useImperativeHandle:function(e,t,n){return B().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return B().useLayoutEffect(e,t)},useMemo:function(e,t){return B().useMemo(e,t)},useReducer:function(e,t,n){return B().useReducer(e,t,n)},useRef:function(e){return B().useRef(e)},useState:function(e){return B().useState(e)},Fragment:s,StrictMode:l,Suspense:h,createElement:N,cloneElement:function(e,t,n){null==e&&b("267",e);var i=void 0,a=r({},e.props),s=e.key,l=e.ref,u=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,u=x.current),void 0!==t.key&&(s=""+t.key);var c=void 0;for(i in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)P.call(t,i)&&!C.hasOwnProperty(i)&&(a[i]=void 0===t[i]&&void 0!==c?c[i]:t[i])}if(1===(i=arguments.length-2))a.children=n;else if(1<i){c=Array(i);for(var f=0;f<i;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:s,ref:l,props:a,_owner:u}},createFactory:function(e){var t=N.bind(null,e);return t.type=e,t},isValidElement:R,version:"16.8.6",unstable_ConcurrentMode:d,unstable_Profiler:u,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:k,ReactCurrentOwner:x,assign:r}},G={default:U},z=G&&U||G;e.exports=z.default||z},,function(e,t,n){"use strict";var r=n(189);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-dom-unstable-native-dependencies.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(45),i=n(75);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=null,s=null,l=null;function u(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))throw Error(o(103));return e.currentTarget=t?l(n):null,t=t?t(e):null,e.currentTarget=null,e._dispatchListeners=null,e._dispatchInstances=null,t}function c(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function f(e,t,n){for(var r=[];e;)r.push(e),e=c(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function d(e,t){if(null==t)throw Error(o(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function p(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}function h(e,t){var n=e.stateNode;if(!n)return null;var r=a(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}function v(e,t,n){(t=h(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=d(n._dispatchListeners,t),n._dispatchInstances=d(n._dispatchInstances,e))}function m(e){e&&e.dispatchConfig.phasedRegistrationNames&&f(e._targetInst,v,e)}function y(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;f(t=t?c(t):null,v,e)}}function g(e){if(e&&e.dispatchConfig.registrationName){var t=e._targetInst;if(t&&e&&e.dispatchConfig.registrationName){var n=h(t,e.dispatchConfig.registrationName);n&&(e._dispatchListeners=d(e._dispatchListeners,n),e._dispatchInstances=d(e._dispatchInstances,t))}}}function b(){return!0}function _(){return!1}function w(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?b:_,this.isPropagationStopped=_,this}function S(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function O(e){if(!(e instanceof this))throw Error(o(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function E(e){e.eventPool=[],e.getPooled=S,e.release=O}i(w.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=b)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=b)},persist:function(){this.isPersistent=b},isPersistent:_,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=_,this._dispatchInstances=this._dispatchListeners=null}}),w.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},w.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,E(n),n},E(w);var T=w.extend({touchHistory:function(){return null}});function k(e){return"touchstart"===e||"mousedown"===e}function x(e){return"touchmove"===e||"mousemove"===e}function P(e){return"touchend"===e||"touchcancel"===e||"mouseup"===e}var C=["touchstart","mousedown"],N=["touchmove","mousemove"],R=["touchcancel","touchend","mouseup"],A=[],I={touchBank:A,numberActiveTouches:0,indexOfSingleActiveTouch:-1,mostRecentTimeStamp:0};function j(e){return e.timeStamp||e.timestamp}function M(e){if(null==(e=e.identifier))throw Error(o(138));return e}function D(e){var t=M(e),n=A[t];n?(n.touchActive=!0,n.startPageX=e.pageX,n.startPageY=e.pageY,n.startTimeStamp=j(e),n.currentPageX=e.pageX,n.currentPageY=e.pageY,n.currentTimeStamp=j(e),n.previousPageX=e.pageX,n.previousPageY=e.pageY,n.previousTimeStamp=j(e)):(n={touchActive:!0,startPageX:e.pageX,startPageY:e.pageY,startTimeStamp:j(e),currentPageX:e.pageX,currentPageY:e.pageY,currentTimeStamp:j(e),previousPageX:e.pageX,previousPageY:e.pageY,previousTimeStamp:j(e)},A[t]=n),I.mostRecentTimeStamp=j(e)}function L(e){var t=A[M(e)];t?(t.touchActive=!0,t.previousPageX=t.currentPageX,t.previousPageY=t.currentPageY,t.previousTimeStamp=t.currentTimeStamp,t.currentPageX=e.pageX,t.currentPageY=e.pageY,t.currentTimeStamp=j(e),I.mostRecentTimeStamp=j(e)):console.warn("Cannot record touch move without a touch start.\nTouch Move: %s\n","Touch Bank: %s",V(e),H())}function F(e){var t=A[M(e)];t?(t.touchActive=!1,t.previousPageX=t.currentPageX,t.previousPageY=t.currentPageY,t.previousTimeStamp=t.currentTimeStamp,t.currentPageX=e.pageX,t.currentPageY=e.pageY,t.currentTimeStamp=j(e),I.mostRecentTimeStamp=j(e)):console.warn("Cannot record touch end without a touch start.\nTouch End: %s\n","Touch Bank: %s",V(e),H())}function V(e){return JSON.stringify({identifier:e.identifier,pageX:e.pageX,pageY:e.pageY,timestamp:j(e)})}function H(){var e=JSON.stringify(A.slice(0,20));return 20<A.length&&(e+=" (original size: "+A.length+")"),e}var B={recordTouchTrack:function(e,t){if(x(e))t.changedTouches.forEach(L);else if(k(e))t.changedTouches.forEach(D),I.numberActiveTouches=t.touches.length,1===I.numberActiveTouches&&(I.indexOfSingleActiveTouch=t.touches[0].identifier);else if(P(e)&&(t.changedTouches.forEach(F),I.numberActiveTouches=t.touches.length,1===I.numberActiveTouches))for(e=0;e<A.length;e++)if(null!=(t=A[e])&&t.touchActive){I.indexOfSingleActiveTouch=e;break}},touchHistory:I};function U(e,t){if(null==t)throw Error(o(334));return null==e?t:Array.isArray(e)?e.concat(t):Array.isArray(t)?[e].concat(t):[e,t]}var G=null,z=0;function W(e,t){var n=G;G=e,null!==Y.GlobalResponderHandler&&Y.GlobalResponderHandler.onChange(n,e,t)}var X={startShouldSetResponder:{phasedRegistrationNames:{bubbled:"onStartShouldSetResponder",captured:"onStartShouldSetResponderCapture"},dependencies:C},scrollShouldSetResponder:{phasedRegistrationNames:{bubbled:"onScrollShouldSetResponder",captured:"onScrollShouldSetResponderCapture"},dependencies:["scroll"]},selectionChangeShouldSetResponder:{phasedRegistrationNames:{bubbled:"onSelectionChangeShouldSetResponder",captured:"onSelectionChangeShouldSetResponderCapture"},dependencies:["selectionchange"]},moveShouldSetResponder:{phasedRegistrationNames:{bubbled:"onMoveShouldSetResponder",captured:"onMoveShouldSetResponderCapture"},dependencies:N},responderStart:{registrationName:"onResponderStart",dependencies:C},responderMove:{registrationName:"onResponderMove",dependencies:N},responderEnd:{registrationName:"onResponderEnd",dependencies:R},responderRelease:{registrationName:"onResponderRelease",dependencies:R},responderTerminationRequest:{registrationName:"onResponderTerminationRequest",dependencies:[]},responderGrant:{registrationName:"onResponderGrant",dependencies:[]},responderReject:{registrationName:"onResponderReject",dependencies:[]},responderTerminate:{registrationName:"onResponderTerminate",dependencies:[]}},Y={_getResponder:function(){return G},eventTypes:X,extractEvents:function(e,t,n,r){if(k(e))z+=1;else if(P(e)){if(!(0<=z))return console.warn("Ended a touch event which was not counted in `trackedTouchCount`."),null;--z}if(B.recordTouchTrack(e,n),t&&("scroll"===e&&!n.responderIgnoreScroll||0<z&&"selectionchange"===e||k(e)||x(e))){var i=k(e)?X.startShouldSetResponder:x(e)?X.moveShouldSetResponder:"selectionchange"===e?X.selectionChangeShouldSetResponder:X.scrollShouldSetResponder;if(G)e:{for(var o=G,a=0,l=o;l;l=c(l))a++;l=0;for(var f=t;f;f=c(f))l++;for(;0<a-l;)o=c(o),a--;for(;0<l-a;)t=c(t),l--;for(;a--;){if(o===t||o===t.alternate)break e;o=c(o),t=c(t)}o=null}else o=t;t=o===G,(o=T.getPooled(i,o,n,r)).touchHistory=B.touchHistory,p(o,t?y:m);e:{if(i=o._dispatchListeners,t=o._dispatchInstances,Array.isArray(i)){for(a=0;a<i.length&&!o.isPropagationStopped();a++)if(i[a](o,t[a])){i=t[a];break e}}else if(i&&i(o,t)){i=t;break e}i=null}if(o._dispatchInstances=null,o._dispatchListeners=null,o.isPersistent()||o.constructor.release(o),i&&i!==G)if((o=T.getPooled(X.responderGrant,i,n,r)).touchHistory=B.touchHistory,p(o,g),t=!0===u(o),G)if((a=T.getPooled(X.responderTerminationRequest,G,n,r)).touchHistory=B.touchHistory,p(a,g),l=!a._dispatchListeners||u(a),a.isPersistent()||a.constructor.release(a),l){(a=T.getPooled(X.responderTerminate,G,n,r)).touchHistory=B.touchHistory,p(a,g);var d=U(d,[o,a]);W(i,t)}else(i=T.getPooled(X.responderReject,i,n,r)).touchHistory=B.touchHistory,p(i,g),d=U(d,i);else d=U(d,o),W(i,t);else d=null}else d=null;if(i=G&&k(e),o=G&&x(e),t=G&&P(e),(i=i?X.responderStart:o?X.responderMove:t?X.responderEnd:null)&&((i=T.getPooled(i,G,n,r)).touchHistory=B.touchHistory,p(i,g),d=U(d,i)),i=G&&"touchcancel"===e,e=G&&!i&&P(e))e:{if((e=n.touches)&&0!==e.length)for(o=0;o<e.length;o++)if(null!=(t=e[o].target)&&0!==t){a=s(t);t:{for(t=G;a;){if(t===a||t===a.alternate){t=!0;break t}a=c(a)}t=!1}if(t){e=!1;break e}}e=!0}return(e=i?X.responderTerminate:e?X.responderRelease:null)&&((n=T.getPooled(e,G,n,r)).touchHistory=B.touchHistory,p(n,g),d=U(d,n),W(null)),d},GlobalResponderHandler:null,injection:{injectGlobalResponderHandler:function(e){Y.GlobalResponderHandler=e}}},K=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Events,q=K[3],$=K[0],Q=K[1];a=K[2],s=$,l=Q,e.exports={ResponderEventPlugin:Y,ResponderTouchHistoryStore:B,injectEventPluginsByName:q}},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),i=n(75),o=n(192);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=null,l={};function u(){if(s)for(var e in l){var t=l[e],n=s.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!f[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in f[n]=t,n=t.eventTypes){var i=void 0,o=n[r],u=t,p=r;if(d.hasOwnProperty(p))throw Error(a(99,p));d[p]=o;var h=o.phasedRegistrationNames;if(h){for(i in h)h.hasOwnProperty(i)&&c(h[i],u,p);i=!0}else o.registrationName?(c(o.registrationName,u,p),i=!0):i=!1;if(!i)throw Error(a(98,r,e))}}}}function c(e,t,n){if(p[e])throw Error(a(100,e));p[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],d={},p={},h={};function v(e,t,n,r,i,o,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var m=!1,y=null,g=!1,b=null,_={onError:function(e){m=!0,y=e}};function w(e,t,n,r,i,o,a,s,l){m=!1,y=null,v.apply(_,arguments)}var S=null,O=null,E=null;function T(e,t,n){var r=e.type||"unknown-event";e.currentTarget=E(n),function(e,t,n,r,i,o,s,l,u){if(w.apply(this,arguments),m){if(!m)throw Error(a(198));var c=y;m=!1,y=null,g||(g=!0,b=c)}}(r,t,void 0,e),e.currentTarget=null}function k(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function x(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var P=null;function C(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)T(e,t[r],n[r]);else t&&T(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function N(e){if(null!==e&&(P=k(P,e)),e=P,P=null,e){if(x(e,C),P)throw Error(a(95));if(g)throw e=b,g=!1,b=null,e}}var R={injectEventPluginOrder:function(e){if(s)throw Error(a(101));s=Array.prototype.slice.call(e),u()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!l.hasOwnProperty(t)||l[t]!==r){if(l[t])throw Error(a(102,t));l[t]=r,n=!0}}n&&u()}};function A(e,t){var n=e.stateNode;if(!n)return null;var r=S(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var I=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;I.hasOwnProperty("ReactCurrentDispatcher")||(I.ReactCurrentDispatcher={current:null}),I.hasOwnProperty("ReactCurrentBatchConfig")||(I.ReactCurrentBatchConfig={suspense:null});var j=/^(.*)[\\\/]/,M="function"==typeof Symbol&&Symbol.for,D=M?Symbol.for("react.element"):60103,L=M?Symbol.for("react.portal"):60106,F=M?Symbol.for("react.fragment"):60107,V=M?Symbol.for("react.strict_mode"):60108,H=M?Symbol.for("react.profiler"):60114,B=M?Symbol.for("react.provider"):60109,U=M?Symbol.for("react.context"):60110,G=M?Symbol.for("react.concurrent_mode"):60111,z=M?Symbol.for("react.forward_ref"):60112,W=M?Symbol.for("react.suspense"):60113,X=M?Symbol.for("react.suspense_list"):60120,Y=M?Symbol.for("react.memo"):60115,K=M?Symbol.for("react.lazy"):60116;M&&Symbol.for("react.fundamental"),M&&Symbol.for("react.responder"),M&&Symbol.for("react.scope");var q="function"==typeof Symbol&&Symbol.iterator;function $(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=q&&e[q]||e["@@iterator"])?e:null}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case F:return"Fragment";case L:return"Portal";case H:return"Profiler";case V:return"StrictMode";case W:return"Suspense";case X:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case U:return"Context.Consumer";case B:return"Context.Provider";case z:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case Y:return Q(e.type);case K:if(e=1===e._status?e._result:null)return Q(e)}return null}function J(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=Q(e.type);n=null,r&&(n=Q(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(j,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var Z=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=O(e)){if("function"!=typeof ee)throw Error(a(280));var t=S(e.stateNode);ee(e.stateNode,e.type,t)}}function ie(e){te?ne?ne.push(e):ne=[e]:te=e}function oe(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ae(e,t){return e(t)}function se(e,t,n,r){return e(t,n,r)}function le(){}var ue=ae,ce=!1,fe=!1;function de(){null===te&&null===ne||(le(),oe())}new Map;var pe=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,he=Object.prototype.hasOwnProperty,ve={},me={};function ye(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var ge={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){ge[e]=new ye(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];ge[t]=new ye(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){ge[e]=new ye(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){ge[e]=new ye(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){ge[e]=new ye(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){ge[e]=new ye(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){ge[e]=new ye(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){ge[e]=new ye(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){ge[e]=new ye(e,5,!1,e.toLowerCase(),null,!1)}));var be=/[\-:]([a-z])/g;function _e(e){return e[1].toUpperCase()}function we(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Se(e,t,n,r){var i=ge.hasOwnProperty(t)?ge[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!he.call(me,e)||!he.call(ve,e)&&(pe.test(e)?me[e]=!0:(ve[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Oe(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ee(e){e._valueTracker||(e._valueTracker=function(e){var t=Oe(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Te(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Oe(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ke(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xe(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=we(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Pe(e,t){null!=(t=t.checked)&&Se(e,"checked",t,!1)}function Ce(e,t){Pe(e,t);var n=we(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Re(e,t.type,n):t.hasOwnProperty("defaultValue")&&Re(e,t.type,we(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ne(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Re(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ae(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Ie(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+we(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function je(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Me(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(a(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(a(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:we(n)}}function De(e,t){var n=we(t.value),r=we(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(be,_e);ge[t]=new ye(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(be,_e);ge[t]=new ye(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(be,_e);ge[t]=new ye(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){ge[e]=new ye(e,1,!1,e.toLowerCase(),null,!1)})),ge.xlinkHref=new ye("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){ge[e]=new ye(e,1,!1,e.toLowerCase(),null,!0)}));var Fe="http://www.w3.org/1999/xhtml",Ve="http://www.w3.org/2000/svg";function He(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Be(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?He(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Ue,Ge=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Ve||"innerHTML"in e)e.innerHTML=t;else{for((Ue=Ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ze(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function We(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Xe={animationend:We("Animation","AnimationEnd"),animationiteration:We("Animation","AnimationIteration"),animationstart:We("Animation","AnimationStart"),transitionend:We("Transition","TransitionEnd")},Ye={},Ke={};function qe(e){if(Ye[e])return Ye[e];if(!Xe[e])return e;var t,n=Xe[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ke)return Ye[e]=n[t];return e}Z&&(Ke=document.createElement("div").style,"AnimationEvent"in window||(delete Xe.animationend.animation,delete Xe.animationiteration.animation,delete Xe.animationstart.animation),"TransitionEvent"in window||delete Xe.transitionend.transition);var $e=qe("animationend"),Qe=qe("animationiteration"),Je=qe("animationstart"),Ze=qe("transitionend"),et="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function tt(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function nt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function rt(e){if(tt(e)!==e)throw Error(a(188))}function it(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=tt(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return rt(i),e;if(o===r)return rt(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var ot,at,st,lt=!1,ut=[],ct=null,ft=null,dt=null,pt=new Map,ht=new Map,vt=[],mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),yt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function gt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function bt(e,t){switch(e){case"focus":case"blur":ct=null;break;case"dragenter":case"dragleave":ft=null;break;case"mouseover":case"mouseout":dt=null;break;case"pointerover":case"pointerout":pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ht.delete(t.pointerId)}}function _t(e,t,n,r,i){return null===e||e.nativeEvent!==i?(e=gt(t,n,r,i),null!==t&&(null!==(t=ur(t))&&at(t)),e):(e.eventSystemFlags|=r,e)}function wt(e){var t=lr(e.target);if(null!==t){var n=tt(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=nt(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){st(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function St(e){if(null!==e.blockedOn)return!1;var t=Rn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=ur(t);return null!==n&&at(n),e.blockedOn=t,!1}return!0}function Ot(e,t,n){St(e)&&n.delete(t)}function Et(){for(lt=!1;0<ut.length;){var e=ut[0];if(null!==e.blockedOn){null!==(e=ur(e.blockedOn))&&ot(e);break}var t=Rn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:ut.shift()}null!==ct&&St(ct)&&(ct=null),null!==ft&&St(ft)&&(ft=null),null!==dt&&St(dt)&&(dt=null),pt.forEach(Ot),ht.forEach(Ot)}function Tt(e,t){e.blockedOn===t&&(e.blockedOn=null,lt||(lt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Et)))}function kt(e){function t(t){return Tt(t,e)}if(0<ut.length){Tt(ut[0],e);for(var n=1;n<ut.length;n++){var r=ut[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ct&&Tt(ct,e),null!==ft&&Tt(ft,e),null!==dt&&Tt(dt,e),pt.forEach(t),ht.forEach(t),n=0;n<vt.length;n++)(r=vt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<vt.length&&null===(n=vt[0]).blockedOn;)wt(n),null===n.blockedOn&&vt.shift()}function xt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Pt(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Ct(e,t,n){(t=A(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function Nt(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Pt(t);for(t=n.length;0<t--;)Ct(n[t],"captured",e);for(t=0;t<n.length;t++)Ct(n[t],"bubbled",e)}}function Rt(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=A(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function At(e){e&&e.dispatchConfig.registrationName&&Rt(e._targetInst,null,e)}function It(e){x(e,Nt)}function jt(){return!0}function Mt(){return!1}function Dt(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?jt:Mt,this.isPropagationStopped=Mt,this}function Lt(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function Ft(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Vt(e){e.eventPool=[],e.getPooled=Lt,e.release=Ft}i(Dt.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=jt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=jt)},persist:function(){this.isPersistent=jt},isPersistent:Mt,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Mt,this._dispatchInstances=this._dispatchListeners=null}}),Dt.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Dt.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Vt(n),n},Vt(Dt);var Ht=Dt.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Bt=Dt.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Ut=Dt.extend({view:null,detail:null}),Gt=Ut.extend({relatedTarget:null});function zt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Wt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Xt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Yt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Kt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Yt[e])&&!!t[e]}function qt(){return Kt}for(var $t=Ut.extend({key:function(e){if(e.key){var t=Wt[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=zt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Xt[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:qt,charCode:function(e){return"keypress"===e.type?zt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?zt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Qt=0,Jt=0,Zt=!1,en=!1,tn=Ut.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:qt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Qt;return Qt=e.screenX,Zt?"mousemove"===e.type?e.screenX-t:0:(Zt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Jt;return Jt=e.screenY,en?"mousemove"===e.type?e.screenY-t:0:(en=!0,0)}}),nn=tn.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),rn=tn.extend({dataTransfer:null}),on=Ut.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:qt}),an=Dt.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),sn=tn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ln=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[$e,"animationEnd",2],[Qe,"animationIteration",2],[Je,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Ze,"transitionEnd",2],["waiting","waiting",2]],un={},cn={},fn=0;fn<ln.length;fn++){var dn=ln[fn],pn=dn[0],hn=dn[1],vn=dn[2],mn="on"+(hn[0].toUpperCase()+hn.slice(1)),yn={phasedRegistrationNames:{bubbled:mn,captured:mn+"Capture"},dependencies:[pn],eventPriority:vn};un[hn]=yn,cn[pn]=yn}var gn={eventTypes:un,getEventPriority:function(e){return void 0!==(e=cn[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var i=cn[e];if(!i)return null;switch(e){case"keypress":if(0===zt(n))return null;case"keydown":case"keyup":e=$t;break;case"blur":case"focus":e=Gt;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=on;break;case $e:case Qe:case Je:e=Ht;break;case Ze:e=an;break;case"scroll":e=Ut;break;case"wheel":e=sn;break;case"copy":case"cut":case"paste":e=Bt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=nn;break;default:e=Dt}return It(t=e.getPooled(i,t,n,r)),t}},bn=o.unstable_UserBlockingPriority,_n=o.unstable_runWithPriority,wn=gn.getEventPriority,Sn=[];function On(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=lr(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=xt(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,a=e.eventSystemFlags,s=null,l=0;l<f.length;l++){var u=f[l];u&&(u=u.extractEvents(r,t,o,i,a))&&(s=k(s,u))}N(s)}}var En=!0;function Tn(e,t){kn(t,e,!1)}function kn(e,t,n){switch(wn(t)){case 0:var r=xn.bind(null,t,1);break;case 1:r=Pn.bind(null,t,1);break;default:r=Nn.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function xn(e,t,n){ce||le();var r=Nn,i=ce;ce=!0;try{se(r,e,t,n)}finally{(ce=i)||de()}}function Pn(e,t,n){_n(bn,Nn.bind(null,e,t,n))}function Cn(e,t,n,r){if(Sn.length){var i=Sn.pop();i.topLevelType=e,i.eventSystemFlags=t,i.nativeEvent=n,i.targetInst=r,e=i}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=On,n=e,fe)t(n,void 0);else{fe=!0;try{ue(t,n,void 0)}finally{fe=!1,de()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,Sn.length<10&&Sn.push(e)}}function Nn(e,t,n){if(En)if(0<ut.length&&-1<mt.indexOf(e))e=gt(null,e,t,n),ut.push(e);else{var r=Rn(e,t,n);null===r?bt(e,n):-1<mt.indexOf(e)?(e=gt(r,e,t,n),ut.push(e)):function(e,t,n,r){switch(t){case"focus":return ct=_t(ct,e,t,n,r),!0;case"dragenter":return ft=_t(ft,e,t,n,r),!0;case"mouseover":return dt=_t(dt,e,t,n,r),!0;case"pointerover":var i=r.pointerId;return pt.set(i,_t(pt.get(i)||null,e,t,n,r)),!0;case"gotpointercapture":return i=r.pointerId,ht.set(i,_t(ht.get(i)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(bt(e,n),Cn(e,t,n,null))}}function Rn(e,t,n){var r=xt(n);if(null!==(r=lr(r))){var i=tt(r);if(null===i)r=null;else{var o=i.tag;if(13===o){if(null!==(r=nt(i)))return r;r=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;r=null}else i!==r&&(r=null)}}return Cn(e,t,n,r),null}function An(e){if(!Z)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var In=new("function"==typeof WeakMap?WeakMap:Map);function jn(e){var t=In.get(e);return void 0===t&&(t=new Set,In.set(e,t)),t}function Mn(e,t,n){if(!n.has(e)){switch(e){case"scroll":kn(t,"scroll",!0);break;case"focus":case"blur":kn(t,"focus",!0),kn(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":An(e)&&kn(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===et.indexOf(e)&&Tn(e,t)}n.add(e)}}var Dn={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Ln=["Webkit","ms","Moz","O"];function Fn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Dn.hasOwnProperty(e)&&Dn[e]?(""+t).trim():t+"px"}function Vn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=Fn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Dn).forEach((function(e){Ln.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Dn[t]=Dn[e]}))}));var Hn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Bn(e,t){if(t){if(Hn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function Un(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Gn(e,t){var n=jn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)Mn(t[r],e,n)}function zn(){}function Wn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Xn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Yn(e,t){var n,r=Xn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Xn(r)}}function Kn(){for(var e=window,t=Wn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Wn((e=t.contentWindow).document)}return t}function qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var $n=null,Qn=null;function Jn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Zn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var er="function"==typeof setTimeout?setTimeout:void 0,tr="function"==typeof clearTimeout?clearTimeout:void 0;function nr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function rr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var ir=Math.random().toString(36).slice(2),or="__reactInternalInstance$"+ir,ar="__reactEventHandlers$"+ir,sr="__reactContainere$"+ir;function lr(e){var t=e[or];if(t)return t;for(var n=e.parentNode;n;){if(t=n[sr]||n[or]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=rr(e);null!==e;){if(n=e[or])return n;e=rr(e)}return t}n=(e=n).parentNode}return null}function ur(e){return!(e=e[or]||e[sr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function cr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function fr(e){return e[ar]||null}var dr=null,pr=null,hr=null;function vr(){if(hr)return hr;var e,t,n=pr,r=n.length,i="value"in dr?dr.value:dr.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return hr=i.slice(e,1<t?1-t:void 0)}var mr=Dt.extend({data:null}),yr=Dt.extend({data:null}),gr=[9,13,27,32],br=Z&&"CompositionEvent"in window,_r=null;Z&&"documentMode"in document&&(_r=document.documentMode);var wr=Z&&"TextEvent"in window&&!_r,Sr=Z&&(!br||_r&&8<_r&&11>=_r),Or=String.fromCharCode(32),Er={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Tr=!1;function kr(e,t){switch(e){case"keyup":return-1!==gr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function xr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Pr=!1;var Cr={eventTypes:Er,extractEvents:function(e,t,n,r){var i;if(br)e:{switch(e){case"compositionstart":var o=Er.compositionStart;break e;case"compositionend":o=Er.compositionEnd;break e;case"compositionupdate":o=Er.compositionUpdate;break e}o=void 0}else Pr?kr(e,n)&&(o=Er.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Er.compositionStart);return o?(Sr&&"ko"!==n.locale&&(Pr||o!==Er.compositionStart?o===Er.compositionEnd&&Pr&&(i=vr()):(pr="value"in(dr=r)?dr.value:dr.textContent,Pr=!0)),o=mr.getPooled(o,t,n,r),i?o.data=i:null!==(i=xr(n))&&(o.data=i),It(o),i=o):i=null,(e=wr?function(e,t){switch(e){case"compositionend":return xr(t);case"keypress":return 32!==t.which?null:(Tr=!0,Or);case"textInput":return(e=t.data)===Or&&Tr?null:e;default:return null}}(e,n):function(e,t){if(Pr)return"compositionend"===e||!br&&kr(e,t)?(e=vr(),hr=pr=dr=null,Pr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Sr&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=yr.getPooled(Er.beforeInput,t,n,r)).data=e,It(t)):t=null,null===i?t:null===t?i:[i,t]}},Nr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Rr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Nr[e.type]:"textarea"===t}var Ar={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ir(e,t,n){return(e=Dt.getPooled(Ar.change,e,t,n)).type="change",ie(n),It(e),e}var jr=null,Mr=null;function Dr(e){N(e)}function Lr(e){if(Te(cr(e)))return e}function Fr(e,t){if("change"===e)return t}var Vr=!1;function Hr(){jr&&(jr.detachEvent("onpropertychange",Br),Mr=jr=null)}function Br(e){if("value"===e.propertyName&&Lr(Mr))if(e=Ir(Mr,e,xt(e)),ce)N(e);else{ce=!0;try{ae(Dr,e)}finally{ce=!1,de()}}}function Ur(e,t,n){"focus"===e?(Hr(),Mr=n,(jr=t).attachEvent("onpropertychange",Br)):"blur"===e&&Hr()}function Gr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Lr(Mr)}function zr(e,t){if("click"===e)return Lr(t)}function Wr(e,t){if("input"===e||"change"===e)return Lr(t)}Z&&(Vr=An("input")&&(!document.documentMode||9<document.documentMode));var Xr,Yr={eventTypes:Ar,_isInputEventSupported:Vr,extractEvents:function(e,t,n,r){var i=t?cr(t):window,o=i.nodeName&&i.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===i.type)var a=Fr;else if(Rr(i))if(Vr)a=Wr;else{a=Gr;var s=Ur}else(o=i.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(a=zr);if(a&&(a=a(e,t)))return Ir(a,n,r);s&&s(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Re(i,"number",i.value)}},Kr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},qr={eventTypes:Kr,extractEvents:function(e,t,n,r,i){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?lr(t):null)&&(t!==(o=tt(t))||5!==t.tag&&6!==t.tag)&&(t=null)):a=null,a===t)return null;if("mouseout"===e||"mouseover"===e)var s=tn,l=Kr.mouseLeave,u=Kr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(s=nn,l=Kr.pointerLeave,u=Kr.pointerEnter,c="pointer");if(e=null==a?i:cr(a),i=null==t?i:cr(t),(l=s.getPooled(l,a,n,r)).type=c+"leave",l.target=e,l.relatedTarget=i,(r=s.getPooled(u,t,n,r)).type=c+"enter",r.target=i,r.relatedTarget=e,c=t,(s=a)&&c)e:{for(e=c,a=0,t=u=s;t;t=Pt(t))a++;for(t=0,i=e;i;i=Pt(i))t++;for(;0<a-t;)u=Pt(u),a--;for(;0<t-a;)e=Pt(e),t--;for(;a--;){if(u===e||u===e.alternate)break e;u=Pt(u),e=Pt(e)}u=null}else u=null;for(e=u,u=[];s&&s!==e&&(null===(a=s.alternate)||a!==e);)u.push(s),s=Pt(s);for(s=[];c&&c!==e&&(null===(a=c.alternate)||a!==e);)s.push(c),c=Pt(c);for(c=0;c<u.length;c++)Rt(u[c],"bubbled",l);for(c=s.length;0<c--;)Rt(s[c],"captured",r);return n===Xr?(Xr=null,[l]):(Xr=n,[l,r])}};var $r="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Qr=Object.prototype.hasOwnProperty;function Jr(e,t){if($r(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Qr.call(t,n[r])||!$r(e[n[r]],t[n[r]]))return!1;return!0}var Zr=Z&&"documentMode"in document&&11>=document.documentMode,ei={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ti=null,ni=null,ri=null,ii=!1;function oi(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return ii||null==ti||ti!==Wn(n)?null:("selectionStart"in(n=ti)&&qn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},ri&&Jr(ri,n)?null:(ri=n,(e=Dt.getPooled(ei.select,ni,e,t)).type="select",e.target=ti,It(e),e))}var ai={eventTypes:ei,extractEvents:function(e,t,n,r){var i,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(i=!o)){e:{o=jn(o),i=h.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?cr(t):window,e){case"focus":(Rr(o)||"true"===o.contentEditable)&&(ti=o,ni=t,ri=null);break;case"blur":ri=ni=ti=null;break;case"mousedown":ii=!0;break;case"contextmenu":case"mouseup":case"dragend":return ii=!1,oi(n,r);case"selectionchange":if(Zr)break;case"keydown":case"keyup":return oi(n,r)}return null}};R.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),S=fr,O=ur,E=cr,R.injectEventPluginsByName({SimpleEventPlugin:gn,EnterLeaveEventPlugin:qr,ChangeEventPlugin:Yr,SelectEventPlugin:ai,BeforeInputEventPlugin:Cr}),new Set;var si=[],li=-1;function ui(e){0>li||(e.current=si[li],si[li]=null,li--)}function ci(e,t){li++,si[li]=e.current,e.current=t}var fi={},di={current:fi},pi={current:!1},hi=fi;function vi(e,t){var n=e.type.contextTypes;if(!n)return fi;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function mi(e){return null!=(e=e.childContextTypes)}function yi(e){ui(pi),ui(di)}function gi(e){ui(pi),ui(di)}function bi(e,t,n){if(di.current!==fi)throw Error(a(168));ci(di,t),ci(pi,n)}function _i(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,Q(t)||"Unknown",o));return i({},n,{},r)}function wi(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||fi,hi=di.current,ci(di,t),ci(pi,pi.current),!0}function Si(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(t=_i(e,t,hi),r.__reactInternalMemoizedMergedChildContext=t,ui(pi),ui(di),ci(di,t)):ui(pi),ci(pi,n)}var Oi=o.unstable_runWithPriority,Ei=o.unstable_scheduleCallback,Ti=o.unstable_cancelCallback,ki=o.unstable_shouldYield,xi=o.unstable_requestPaint,Pi=o.unstable_now,Ci=o.unstable_getCurrentPriorityLevel,Ni=o.unstable_ImmediatePriority,Ri=o.unstable_UserBlockingPriority,Ai=o.unstable_NormalPriority,Ii=o.unstable_LowPriority,ji=o.unstable_IdlePriority,Mi={},Di=void 0!==xi?xi:function(){},Li=null,Fi=null,Vi=!1,Hi=Pi(),Bi=1e4>Hi?Pi:function(){return Pi()-Hi};function Ui(){switch(Ci()){case Ni:return 99;case Ri:return 98;case Ai:return 97;case Ii:return 96;case ji:return 95;default:throw Error(a(332))}}function Gi(e){switch(e){case 99:return Ni;case 98:return Ri;case 97:return Ai;case 96:return Ii;case 95:return ji;default:throw Error(a(332))}}function zi(e,t){return e=Gi(e),Oi(e,t)}function Wi(e,t,n){return e=Gi(e),Ei(e,t,n)}function Xi(e){return null===Li?(Li=[e],Fi=Ei(Ni,Ki)):Li.push(e),Mi}function Yi(){if(null!==Fi){var e=Fi;Fi=null,Ti(e)}Ki()}function Ki(){if(!Vi&&null!==Li){Vi=!0;var e=0;try{var t=Li;zi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Li=null}catch(t){throw null!==Li&&(Li=Li.slice(e+1)),Ei(Ni,Yi),t}finally{Vi=!1}}}var qi=3;function $i(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Qi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ji={current:null},Zi=null,eo=null,to=null;function no(){to=eo=Zi=null}function ro(e,t){var n=e.type._context;ci(Ji,n._currentValue),n._currentValue=t}function io(e){var t=Ji.current;ui(Ji),e.type._context._currentValue=t}function oo(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ao(e,t){Zi=e,to=eo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ba=!0),e.firstContext=null)}function so(e,t){if(to!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(to=e,t=1073741823),t={context:e,observedBits:t,next:null},null===eo){if(null===Zi)throw Error(a(308));eo=t,Zi.dependencies={expirationTime:0,firstContext:t,responders:null}}else eo=eo.next=t;return e._currentValue}var lo=!1;function uo(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function co(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function fo(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function po(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function ho(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,i=null;null===r&&(r=e.updateQueue=uo(e.memoizedState))}else r=e.updateQueue,i=n.updateQueue,null===r?null===i?(r=e.updateQueue=uo(e.memoizedState),i=n.updateQueue=uo(n.memoizedState)):r=e.updateQueue=co(i):null===i&&(i=n.updateQueue=co(r));null===i||r===i?po(r,t):null===r.lastUpdate||null===i.lastUpdate?(po(r,t),po(i,t)):(po(r,t),i.lastUpdate=t)}function vo(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=uo(e.memoizedState):mo(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function mo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=co(t)),t}function yo(e,t,n,r,o,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,o):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(o="function"==typeof(e=n.payload)?e.call(a,r,o):e))break;return i({},r,o);case 2:lo=!0}return r}function go(e,t,n,r,i){lo=!1;for(var o=(t=mo(e,t)).baseState,a=null,s=0,l=t.firstUpdate,u=o;null!==l;){var c=l.expirationTime;c<i?(null===a&&(a=l,o=u),s<c&&(s=c)):(fl(c,l.suspenseConfig),u=yo(e,0,l,u,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(c=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<i?(null===c&&(c=l,null===a&&(o=u)),s<f&&(s=f)):(u=yo(e,0,l,u,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(o=u),t.baseState=o,t.firstUpdate=a,t.firstCapturedUpdate=c,dl(s),e.expirationTime=s,e.memoizedState=u}function bo(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),_o(t.firstEffect,n),t.firstEffect=t.lastEffect=null,_o(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function _o(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw Error(a(191,n));n.call(r)}e=e.nextEffect}}var wo=I.ReactCurrentBatchConfig,So=(new r.Component).refs;function Oo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Eo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&tt(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Js(),i=wo.suspense;(i=fo(r=Zs(r,e,i),i)).payload=t,null!=n&&(i.callback=n),ho(e,i),el(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Js(),i=wo.suspense;(i=fo(r=Zs(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),ho(e,i),el(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Js(),r=wo.suspense;(r=fo(n=Zs(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ho(e,r),el(e,n)}};function To(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!Jr(n,r)||!Jr(i,o))}function ko(e,t,n){var r=!1,i=fi,o=t.contextType;return"object"==typeof o&&null!==o?o=so(o):(i=mi(t)?hi:di.current,o=(r=null!=(r=t.contextTypes))?vi(e,i):fi),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Eo,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function xo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Eo.enqueueReplaceState(t,t.state,null)}function Po(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=So;var o=t.contextType;"object"==typeof o&&null!==o?i.context=so(o):(o=mi(t)?hi:di.current,i.context=vi(e,o)),null!==(o=e.updateQueue)&&(go(e,o,n,i,r),i.state=e.memoizedState),"function"==typeof(o=t.getDerivedStateFromProps)&&(Oo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&Eo.enqueueReplaceState(i,i.state,null),null!==(o=e.updateQueue)&&(go(e,o,n,i,r),i.state=e.memoizedState)),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var Co=Array.isArray;function No(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===So&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ro(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ao(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=Al(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Ml(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=No(e,t,n),r.return=e,r):((r=Il(n.type,n.key,n.props,null,e.mode,r)).ref=No(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Dl(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=jl(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ml(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case D:return(n=Il(t.type,t.key,t.props,null,e.mode,n)).ref=No(e,null,t),n.return=e,n;case L:return(t=Dl(t,e.mode,n)).return=e,t}if(Co(t)||$(t))return(t=jl(t,e.mode,n,null)).return=e,t;Ro(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case D:return n.key===i?n.type===F?f(e,t,n.props.children,r,i):u(e,t,n,r):null;case L:return n.key===i?c(e,t,n,r):null}if(Co(n)||$(n))return null!==i?null:f(e,t,n,r,null);Ro(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case D:return e=e.get(null===r.key?n:r.key)||null,r.type===F?f(t,e,r.props.children,i,r.key):u(t,e,r,i);case L:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(Co(r)||$(r))return f(t,e=e.get(n)||null,r,i,null);Ro(t,r)}return null}function v(i,a,s,l){for(var u=null,c=null,f=a,v=a=0,m=null;null!==f&&v<s.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var y=p(i,f,s[v],l);if(null===y){null===f&&(f=m);break}e&&f&&null===y.alternate&&t(i,f),a=o(y,a,v),null===c?u=y:c.sibling=y,c=y,f=m}if(v===s.length)return n(i,f),u;if(null===f){for(;v<s.length;v++)null!==(f=d(i,s[v],l))&&(a=o(f,a,v),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(i,f);v<s.length;v++)null!==(m=h(f,i,v,s[v],l))&&(e&&null!==m.alternate&&f.delete(null===m.key?v:m.key),a=o(m,a,v),null===c?u=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return t(i,e)})),u}function m(i,s,l,u){var c=$(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var f=c=null,v=s,m=s=0,y=null,g=l.next();null!==v&&!g.done;m++,g=l.next()){v.index>m?(y=v,v=null):y=v.sibling;var b=p(i,v,g.value,u);if(null===b){null===v&&(v=y);break}e&&v&&null===b.alternate&&t(i,v),s=o(b,s,m),null===f?c=b:f.sibling=b,f=b,v=y}if(g.done)return n(i,v),c;if(null===v){for(;!g.done;m++,g=l.next())null!==(g=d(i,g.value,u))&&(s=o(g,s,m),null===f?c=g:f.sibling=g,f=g);return c}for(v=r(i,v);!g.done;m++,g=l.next())null!==(g=h(v,i,m,g.value,u))&&(e&&null!==g.alternate&&v.delete(null===g.key?m:g.key),s=o(g,s,m),null===f?c=g:f.sibling=g,f=g);return e&&v.forEach((function(e){return t(i,e)})),c}return function(e,r,o,l){var u="object"==typeof o&&null!==o&&o.type===F&&null===o.key;u&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case D:e:{for(c=o.key,u=r;null!==u;){if(u.key===c){if(7===u.tag?o.type===F:u.elementType===o.type){n(e,u.sibling),(r=i(u,o.type===F?o.props.children:o.props)).ref=No(e,u,o),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}o.type===F?((r=jl(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Il(o.type,o.key,o.props,null,e.mode,l)).ref=No(e,r,o),l.return=e,e=l)}return s(e);case L:e:{for(u=o.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Dl(o,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Ml(o,e.mode,l)).return=e,e=r),s(e);if(Co(o))return v(e,r,o,l);if($(o))return m(e,r,o,l);if(c&&Ro(e,o),void 0===o&&!u)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Io=Ao(!0),jo=Ao(!1),Mo={},Do={current:Mo},Lo={current:Mo},Fo={current:Mo};function Vo(e){if(e===Mo)throw Error(a(174));return e}function Ho(e,t){ci(Fo,t),ci(Lo,e),ci(Do,Mo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Be(null,"");break;default:t=Be(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}ui(Do),ci(Do,t)}function Bo(e){ui(Do),ui(Lo),ui(Fo)}function Uo(e){Vo(Fo.current);var t=Vo(Do.current),n=Be(t,e.type);t!==n&&(ci(Lo,e),ci(Do,n))}function Go(e){Lo.current===e&&(ui(Do),ui(Lo))}var zo={current:0};function Wo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Xo(e,t){return{responder:e,props:t}}var Yo=I.ReactCurrentDispatcher,Ko=I.ReactCurrentBatchConfig,qo=0,$o=null,Qo=null,Jo=null,Zo=null,ea=null,ta=null,na=0,ra=null,ia=0,oa=!1,aa=null,sa=0;function la(){throw Error(a(321))}function ua(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!$r(e[n],t[n]))return!1;return!0}function ca(e,t,n,r,i,o){if(qo=o,$o=t,Jo=null!==e?e.memoizedState:null,Yo.current=null===Jo?Ca:Na,t=n(r,i),oa){do{oa=!1,sa+=1,Jo=null!==e?e.memoizedState:null,ta=Zo,ra=ea=Qo=null,Yo.current=Na,t=n(r,i)}while(oa);aa=null,sa=0}if(Yo.current=Pa,(e=$o).memoizedState=Zo,e.expirationTime=na,e.updateQueue=ra,e.effectTag|=ia,e=null!==Qo&&null!==Qo.next,qo=0,ta=ea=Zo=Jo=Qo=$o=null,na=0,ra=null,ia=0,e)throw Error(a(300));return t}function fa(){Yo.current=Pa,qo=0,ta=ea=Zo=Jo=Qo=$o=null,na=0,ra=null,ia=0,oa=!1,aa=null,sa=0}function da(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===ea?Zo=ea=e:ea=ea.next=e,ea}function pa(){if(null!==ta)ta=(ea=ta).next,Jo=null!==(Qo=Jo)?Qo.next:null;else{if(null===Jo)throw Error(a(310));var e={memoizedState:(Qo=Jo).memoizedState,baseState:Qo.baseState,queue:Qo.queue,baseUpdate:Qo.baseUpdate,next:null};ea=null===ea?Zo=e:ea.next=e,Jo=Qo.next}return ea}function ha(e,t){return"function"==typeof t?t(e):t}function va(e){var t=pa(),n=t.queue;if(null===n)throw Error(a(311));if(n.lastRenderedReducer=e,0<sa){var r=n.dispatch;if(null!==aa){var i=aa.get(n);if(void 0!==i){aa.delete(n);var o=t.memoizedState;do{o=e(o,i.action),i=i.next}while(null!==i);return $r(o,t.memoizedState)||(Ba=!0),t.memoizedState=o,t.baseUpdate===n.last&&(t.baseState=o),n.lastRenderedState=o,[o,r]}}return[t.memoizedState,r]}r=n.last;var s=t.baseUpdate;if(o=t.baseState,null!==s?(null!==r&&(r.next=null),r=s.next):r=null!==r?r.next:null,null!==r){var l=i=null,u=r,c=!1;do{var f=u.expirationTime;f<qo?(c||(c=!0,l=s,i=o),f>na&&dl(na=f)):(fl(f,u.suspenseConfig),o=u.eagerReducer===e?u.eagerState:e(o,u.action)),s=u,u=u.next}while(null!==u&&u!==r);c||(l=s,i=o),$r(o,t.memoizedState)||(Ba=!0),t.memoizedState=o,t.baseUpdate=l,t.baseState=i,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function ma(e){var t=da();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ha,lastRenderedState:e}).dispatch=xa.bind(null,$o,e),[t.memoizedState,e]}function ya(e){return va(ha)}function ga(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===ra?(ra={lastEffect:null}).lastEffect=e.next=e:null===(t=ra.lastEffect)?ra.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,ra.lastEffect=e),e}function ba(e,t,n,r){var i=da();ia|=e,i.memoizedState=ga(t,n,void 0,void 0===r?null:r)}function _a(e,t,n,r){var i=pa();r=void 0===r?null:r;var o=void 0;if(null!==Qo){var a=Qo.memoizedState;if(o=a.destroy,null!==r&&ua(r,a.deps))return void ga(0,n,o,r)}ia|=e,i.memoizedState=ga(t,n,o,r)}function wa(e,t){return ba(516,192,e,t)}function Sa(e,t){return _a(516,192,e,t)}function Oa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ea(){}function Ta(e,t){return da().memoizedState=[e,void 0===t?null:t],e}function ka(e,t){var n=pa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ua(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function xa(e,t,n){if(!(25>sa))throw Error(a(301));var r=e.alternate;if(e===$o||null!==r&&r===$o)if(oa=!0,e={expirationTime:qo,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===aa&&(aa=new Map),void 0===(n=aa.get(t)))aa.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var i=Js(),o=wo.suspense;o={expirationTime:i=Zs(i,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var s=t.last;if(null===s)o.next=o;else{var l=s.next;null!==l&&(o.next=l),s.next=o}if(t.last=o,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var u=t.lastRenderedState,c=r(u,n);if(o.eagerReducer=r,o.eagerState=c,$r(c,u))return}catch(e){}el(e,i)}}var Pa={readContext:so,useCallback:la,useContext:la,useEffect:la,useImperativeHandle:la,useLayoutEffect:la,useMemo:la,useReducer:la,useRef:la,useState:la,useDebugValue:la,useResponder:la,useDeferredValue:la,useTransition:la},Ca={readContext:so,useCallback:Ta,useContext:so,useEffect:wa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ba(4,36,Oa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ba(4,36,e,t)},useMemo:function(e,t){var n=da();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=da();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=xa.bind(null,$o,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},da().memoizedState=e},useState:ma,useDebugValue:Ea,useResponder:Xo,useDeferredValue:function(e,t){var n=ma(e),r=n[0],i=n[1];return wa((function(){o.unstable_next((function(){var n=Ko.suspense;Ko.suspense=void 0===t?null:t;try{i(e)}finally{Ko.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=ma(!1),n=t[0],r=t[1];return[Ta((function(t){r(!0),o.unstable_next((function(){var n=Ko.suspense;Ko.suspense=void 0===e?null:e;try{r(!1),t()}finally{Ko.suspense=n}}))}),[e,n]),n]}},Na={readContext:so,useCallback:ka,useContext:so,useEffect:Sa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,_a(4,36,Oa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return _a(4,36,e,t)},useMemo:function(e,t){var n=pa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ua(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:va,useRef:function(){return pa().memoizedState},useState:ya,useDebugValue:Ea,useResponder:Xo,useDeferredValue:function(e,t){var n=ya(),r=n[0],i=n[1];return Sa((function(){o.unstable_next((function(){var n=Ko.suspense;Ko.suspense=void 0===t?null:t;try{i(e)}finally{Ko.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=ya(),n=t[0],r=t[1];return[ka((function(t){r(!0),o.unstable_next((function(){var n=Ko.suspense;Ko.suspense=void 0===e?null:e;try{r(!1),t()}finally{Ko.suspense=n}}))}),[e,n]),n]}},Ra=null,Aa=null,Ia=!1;function ja(e,t){var n=Nl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ma(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Da(e){if(Ia){var t=Aa;if(t){var n=t;if(!Ma(e,t)){if(!(t=nr(n.nextSibling))||!Ma(e,t))return e.effectTag=-1025&e.effectTag|2,Ia=!1,void(Ra=e);ja(Ra,n)}Ra=e,Aa=nr(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ia=!1,Ra=e}}function La(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ra=e}function Fa(e){if(e!==Ra)return!1;if(!Ia)return La(e),Ia=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Zn(t,e.memoizedProps))for(t=Aa;t;)ja(e,t),t=nr(t.nextSibling);if(La(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Aa=nr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Aa=null}}else Aa=Ra?nr(e.stateNode.nextSibling):null;return!0}function Va(){Aa=Ra=null,Ia=!1}var Ha=I.ReactCurrentOwner,Ba=!1;function Ua(e,t,n,r){t.child=null===e?jo(t,null,n,r):Io(t,e.child,n,r)}function Ga(e,t,n,r,i){n=n.render;var o=t.ref;return ao(t,i),r=ca(e,t,n,r,o,i),null===e||Ba?(t.effectTag|=1,Ua(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),os(e,t,i))}function za(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Rl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Il(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Wa(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:Jr)(i,r)&&e.ref===t.ref)?os(e,t,o):(t.effectTag|=1,(e=Al(a,r)).ref=t.ref,e.return=t,t.child=e)}function Wa(e,t,n,r,i,o){return null!==e&&Jr(e.memoizedProps,r)&&e.ref===t.ref&&(Ba=!1,i<o)?os(e,t,o):Ya(e,t,n,r,o)}function Xa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ya(e,t,n,r,i){var o=mi(n)?hi:di.current;return o=vi(t,o),ao(t,i),n=ca(e,t,n,r,o,i),null===e||Ba?(t.effectTag|=1,Ua(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),os(e,t,i))}function Ka(e,t,n,r,i){if(mi(n)){var o=!0;wi(t)}else o=!1;if(ao(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),ko(t,n,r),Po(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;"object"==typeof u&&null!==u?u=so(u):u=vi(t,u=mi(n)?hi:di.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==u)&&xo(t,a,r,u),lo=!1;var d=t.memoizedState;l=a.state=d;var p=t.updateQueue;null!==p&&(go(t,p,r,a,i),l=t.memoizedState),s!==r||d!==l||pi.current||lo?("function"==typeof c&&(Oo(t,n,c,r),l=t.memoizedState),(s=lo||To(t,n,s,r,d,l,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=u,r=s):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,s=t.memoizedProps,a.props=t.type===t.elementType?s:Qi(t.type,s),l=a.context,"object"==typeof(u=n.contextType)&&null!==u?u=so(u):u=vi(t,u=mi(n)?hi:di.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==u)&&xo(t,a,r,u),lo=!1,l=t.memoizedState,d=a.state=l,null!==(p=t.updateQueue)&&(go(t,p,r,a,i),d=t.memoizedState),s!==r||l!==d||pi.current||lo?("function"==typeof c&&(Oo(t,n,c,r),d=t.memoizedState),(c=lo||To(t,n,s,r,l,d,u))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,u)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return qa(e,t,n,r,o,i)}function qa(e,t,n,r,i,o){Xa(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&Si(t,n,!1),os(e,t,o);r=t.stateNode,Ha.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Io(t,e.child,null,o),t.child=Io(t,null,s,o)):Ua(e,t,s,o),t.memoizedState=r.state,i&&Si(t,n,!0),t.child}function $a(e){var t=e.stateNode;t.pendingContext?bi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bi(0,t.context,!1),Ho(e,t.containerInfo)}var Qa,Ja,Za,es={dehydrated:null,retryTime:0};function ts(e,t,n){var r,i=t.mode,o=t.pendingProps,a=zo.current,s=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(s=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),ci(zo,1&a),null===e){if(void 0!==o.fallback&&Da(t),s){if(s=o.fallback,(o=jl(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=jl(s,i,n,null)).return=t,o.sibling=n,t.memoizedState=es,t.child=o,n}return i=o.children,t.memoizedState=null,t.child=jo(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,s){if(o=o.fallback,(n=Al(e,e.pendingProps)).return=t,0==(2&t.mode)&&(s=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=s;null!==s;)s.return=n,s=s.sibling;return(i=Al(i,o,i.expirationTime)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=es,t.child=n,i}return n=Io(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,s){if(s=o.fallback,(o=jl(null,i,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=jl(s,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=es,t.child=o,n}return t.memoizedState=null,t.child=Io(t,e,o.children,n)}function ns(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),oo(e.return,t)}function rs(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=i,a.lastEffect=o)}function is(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(Ua(e,t,r.children,n),0!=(2&(r=zo.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ns(e,n);else if(19===e.tag)ns(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ci(zo,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Wo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),rs(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Wo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}rs(t,!0,n,null,o,t.lastEffect);break;case"together":rs(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function os(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&dl(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Al(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Al(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function as(e){e.effectTag|=4}function ss(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ls(e){switch(e.tag){case 1:mi(e.type)&&yi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Bo(),gi(),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Go(e),null;case 13:return ui(zo),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ui(zo),null;case 4:return Bo(),null;case 10:return io(e),null;default:return null}}function us(e,t){return{value:e,source:t,stack:J(t)}}Qa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ja=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var s,l,u=t.stateNode;switch(Vo(Do.current),e=null,n){case"input":a=ke(u,a),r=ke(u,r),e=[];break;case"option":a=Ae(u,a),r=Ae(u,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=je(u,a),r=je(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=zn)}for(s in Bn(n,r),n=null,a)if(!r.hasOwnProperty(s)&&a.hasOwnProperty(s)&&null!=a[s])if("style"===s)for(l in u=a[s])u.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(p.hasOwnProperty(s)?e||(e=[]):(e=e||[]).push(s,null));for(s in r){var c=r[s];if(u=null!=a?a[s]:void 0,r.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(l in u)!u.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in c)c.hasOwnProperty(l)&&u[l]!==c[l]&&(n||(n={}),n[l]=c[l])}else n||(e||(e=[]),e.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(e=e||[]).push(s,""+c)):"children"===s?u===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(p.hasOwnProperty(s)?(null!=c&&Gn(o,s),e||u===c||(e=[])):(e=e||[]).push(s,c))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&as(t)}},Za=function(e,t,n,r){n!==r&&as(t)};var cs="function"==typeof WeakSet?WeakSet:Set;function fs(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=J(n)),null!==n&&Q(n.type),t=t.value,null!==e&&1===e.tag&&Q(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ds(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){El(e,t)}else t.current=null}function ps(e,t){switch(t.tag){case 0:case 11:case 15:hs(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(a(163))}}function hs(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var i=r.destroy;r.destroy=void 0,void 0!==i&&i()}0!=(r.tag&t)&&(i=r.create,r.destroy=i()),r=r.next}while(r!==n)}}function vs(e,t,n){switch("function"==typeof Pl&&Pl(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;zi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){El(i,e)}}e=e.next}while(e!==r)}))}break;case 1:ds(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){El(e,t)}}(t,n);break;case 5:ds(t);break;case 4:bs(e,t,n)}}function ms(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&ms(t)}function ys(e){return 5===e.tag||3===e.tag||4===e.tag}function gs(e){e:{for(var t=e.return;null!==t;){if(ys(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(ze(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ys(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var i=e;;){var o=5===i.tag||6===i.tag;if(o){var s=o?i.stateNode:i.stateNode.instance;if(n)if(r){var l=s;s=n,8===(o=t).nodeType?o.parentNode.insertBefore(l,s):o.insertBefore(l,s)}else t.insertBefore(s,n);else r?(8===(l=t).nodeType?(o=l.parentNode).insertBefore(s,l):(o=l).appendChild(s),null!=(l=l._reactRootContainer)||null!==o.onclick||(o.onclick=zn)):t.appendChild(s)}else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function bs(e,t,n){for(var r,i,o=t,s=!1;;){if(!s){s=o.return;e:for(;;){if(null===s)throw Error(a(160));switch(r=s.stateNode,s.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}s=s.return}s=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,c=n,f=u;;)if(vs(l,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===u)break;for(;null===f.sibling;){if(null===f.return||f.return===u)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(l=r,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(vs(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(s=!1)}o.sibling.return=o.return,o=o.sibling}}function _s(e,t){switch(t.tag){case 0:case 11:case 14:case 15:hs(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[ar]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Pe(n,r),Un(e,i),t=Un(e,r),i=0;i<o.length;i+=2){var s=o[i],l=o[i+1];"style"===s?Vn(n,l):"dangerouslySetInnerHTML"===s?Ge(n,l):"children"===s?ze(n,l):Se(n,s,l,t)}switch(e){case"input":Ce(n,r);break;case"textarea":De(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Ie(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Ie(n,!!r.multiple,r.defaultValue,!0):Ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(a(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,kt(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Hs=Bi()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=Fn("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}ws(t);break;case 19:ws(t);break;case 17:case 20:case 21:break;default:throw Error(a(163))}}function ws(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new cs),t.forEach((function(t){var r=kl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var Ss="function"==typeof WeakMap?WeakMap:Map;function Os(e,t,n){(n=fo(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Us||(Us=!0,Gs=r),fs(e,t)},n}function Es(e,t,n){(n=fo(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return fs(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===zs?zs=new Set([this]):zs.add(this),fs(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Ts,ks=Math.ceil,xs=I.ReactCurrentDispatcher,Ps=I.ReactCurrentOwner,Cs=0,Ns=null,Rs=null,As=0,Is=0,js=null,Ms=1073741823,Ds=1073741823,Ls=null,Fs=0,Vs=!1,Hs=0,Bs=null,Us=!1,Gs=null,zs=null,Ws=!1,Xs=null,Ys=90,Ks=null,qs=0,$s=null,Qs=0;function Js(){return 0!=(48&Cs)?1073741821-(Bi()/10|0):0!==Qs?Qs:Qs=1073741821-(Bi()/10|0)}function Zs(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Ui();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Cs))return As;if(null!==n)e=$i(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=$i(e,150,100);break;case 97:case 96:e=$i(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Ns&&e===As&&--e,e}function el(e,t){if(50<qs)throw qs=0,$s=null,Error(a(185));if(null!==(e=tl(e,t))){var n=Ui();1073741823===t?0!=(8&Cs)&&0==(48&Cs)?ol(e):(rl(e),0===Cs&&Yi()):rl(e),0==(4&Cs)||98!==n&&99!==n||(null===Ks?Ks=new Map([[e,t]]):(void 0===(n=Ks.get(e))||n>t)&&Ks.set(e,t))}}function tl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(Ns===i&&(dl(t),4===Is&&Vl(i,As)),Hl(i,t)),i}function nl(e){var t=e.lastExpiredTime;return 0!==t?t:Fl(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function rl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Xi(ol.bind(null,e));else{var t=nl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Js();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Mi&&Ti(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Xi(ol.bind(null,e)):Wi(r,il.bind(null,e),{timeout:10*(1073741821-t)-Bi()}),e.callbackNode=t}}}function il(e,t){if(Qs=0,t)return Bl(e,t=Js()),rl(e),null;var n=nl(e);if(0!==n){if(t=e.callbackNode,0!=(48&Cs))throw Error(a(327));if(wl(),e===Ns&&n===As||ll(e,n),null!==Rs){var r=Cs;Cs|=16;for(var i=cl();;)try{hl();break}catch(t){ul(e,t)}if(no(),Cs=r,xs.current=i,1===Is)throw t=js,ll(e,n),Vl(e,n),rl(e),t;if(null===Rs)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Is,Ns=null,r){case 0:case 1:throw Error(a(345));case 2:Bl(e,2<n?2:n);break;case 3:if(Vl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=yl(i)),1073741823===Ms&&10<(i=Hs+500-Bi())){if(Vs){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,ll(e,n);break}}if(0!==(o=nl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=er(gl.bind(null,e),i);break}gl(e);break;case 4:if(Vl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=yl(i)),Vs&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,ll(e,n);break}if(0!==(i=nl(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Ds?r=10*(1073741821-Ds)-Bi():1073741823===Ms?r=0:(r=10*(1073741821-Ms)-5e3,0>(r=(i=Bi())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ks(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=er(gl.bind(null,e),r);break}gl(e);break;case 5:if(1073741823!==Ms&&null!==Ls){o=Ms;var s=Ls;if(0>=(r=0|s.busyMinDurationMs)?r=0:(i=0|s.busyDelayMs,r=(o=Bi()-(10*(1073741821-o)-(0|s.timeoutMs||5e3)))<=i?0:i+r-o),10<r){Vl(e,n),e.timeoutHandle=er(gl.bind(null,e),r);break}}gl(e);break;default:throw Error(a(329))}if(rl(e),e.callbackNode===t)return il.bind(null,e)}}return null}function ol(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)gl(e);else{if(0!=(48&Cs))throw Error(a(327));if(wl(),e===Ns&&t===As||ll(e,t),null!==Rs){var n=Cs;Cs|=16;for(var r=cl();;)try{pl();break}catch(t){ul(e,t)}if(no(),Cs=n,xs.current=r,1===Is)throw n=js,ll(e,t),Vl(e,t),rl(e),n;if(null!==Rs)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Ns=null,gl(e),rl(e)}}return null}function al(e,t){var n=Cs;Cs|=1;try{return e(t)}finally{0===(Cs=n)&&Yi()}}function sl(e,t){var n=Cs;Cs&=-2,Cs|=8;try{return e(t)}finally{0===(Cs=n)&&Yi()}}function ll(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,tr(n)),null!==Rs)for(n=Rs.return;null!==n;){var r=n;switch(r.tag){case 1:var i=r.type.childContextTypes;null!=i&&yi();break;case 3:Bo(),gi();break;case 5:Go(r);break;case 4:Bo();break;case 13:case 19:ui(zo);break;case 10:io(r)}n=n.return}Ns=e,Rs=Al(e.current,null),As=t,Is=0,js=null,Ds=Ms=1073741823,Ls=null,Fs=0,Vs=!1}function ul(e,t){for(;;){try{if(no(),fa(),null===Rs||null===Rs.return)return Is=1,js=t,null;e:{var n=e,r=Rs.return,i=Rs,o=t;if(t=As,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==o&&"object"==typeof o&&"function"==typeof o.then){var a=o,s=0!=(1&zo.current),l=r;do{var u;if(u=13===l.tag){var c=l.memoizedState;if(null!==c)u=null!==c.dehydrated;else{var f=l.memoizedProps;u=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!s)}}if(u){var d=l.updateQueue;if(null===d){var p=new Set;p.add(a),l.updateQueue=p}else d.add(a);if(0==(2&l.mode)){if(l.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var h=fo(1073741823,null);h.tag=2,ho(i,h)}i.expirationTime=1073741823;break e}o=void 0,i=t;var v=n.pingCache;if(null===v?(v=n.pingCache=new Ss,o=new Set,v.set(a,o)):void 0===(o=v.get(a))&&(o=new Set,v.set(a,o)),!o.has(i)){o.add(i);var m=Tl.bind(null,n,a,i);a.then(m,m)}l.effectTag|=4096,l.expirationTime=t;break e}l=l.return}while(null!==l);o=Error((Q(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+J(i))}5!==Is&&(Is=2),o=us(o,i),l=r;do{switch(l.tag){case 3:a=o,l.effectTag|=4096,l.expirationTime=t,vo(l,Os(l,a,t));break e;case 1:a=o;var y=l.type,g=l.stateNode;if(0==(64&l.effectTag)&&("function"==typeof y.getDerivedStateFromError||null!==g&&"function"==typeof g.componentDidCatch&&(null===zs||!zs.has(g)))){l.effectTag|=4096,l.expirationTime=t,vo(l,Es(l,a,t));break e}}l=l.return}while(null!==l)}Rs=ml(Rs)}catch(e){t=e;continue}break}}function cl(){var e=xs.current;return xs.current=Pa,null===e?Pa:e}function fl(e,t){e<Ms&&2<e&&(Ms=e),null!==t&&e<Ds&&2<e&&(Ds=e,Ls=t)}function dl(e){e>Fs&&(Fs=e)}function pl(){for(;null!==Rs;)Rs=vl(Rs)}function hl(){for(;null!==Rs&&!ki();)Rs=vl(Rs)}function vl(e){var t=Ts(e.alternate,e,As);return e.memoizedProps=e.pendingProps,null===t&&(t=ml(e)),Ps.current=null,t}function ml(e){Rs=e;do{var t=Rs.alternate;if(e=Rs.return,0==(2048&Rs.effectTag)){e:{var n=t,r=As,o=(t=Rs).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:mi(t.type)&&yi();break;case 3:Bo(),gi(),(o=t.stateNode).pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),(null===n||null===n.child)&&Fa(t)&&as(t);break;case 5:Go(t),r=Vo(Fo.current);var s=t.type;if(null!==n&&null!=t.stateNode)Ja(n,t,s,o,r),n.ref!==t.ref&&(t.effectTag|=128);else if(o){var l=Vo(Do.current);if(Fa(t)){var u=(o=t).stateNode;n=o.type;var c=o.memoizedProps,f=r;switch(u[or]=o,u[ar]=c,s=void 0,r=u,n){case"iframe":case"object":case"embed":Tn("load",r);break;case"video":case"audio":for(u=0;u<et.length;u++)Tn(et[u],r);break;case"source":Tn("error",r);break;case"img":case"image":case"link":Tn("error",r),Tn("load",r);break;case"form":Tn("reset",r),Tn("submit",r);break;case"details":Tn("toggle",r);break;case"input":xe(r,c),Tn("invalid",r),Gn(f,"onChange");break;case"select":r._wrapperState={wasMultiple:!!c.multiple},Tn("invalid",r),Gn(f,"onChange");break;case"textarea":Me(r,c),Tn("invalid",r),Gn(f,"onChange")}for(s in Bn(n,c),u=null,c)c.hasOwnProperty(s)&&(l=c[s],"children"===s?"string"==typeof l?r.textContent!==l&&(u=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(u=["children",""+l]):p.hasOwnProperty(s)&&null!=l&&Gn(f,s));switch(n){case"input":Ee(r),Ne(r,c,!0);break;case"textarea":Ee(r),Le(r);break;case"select":case"option":break;default:"function"==typeof c.onClick&&(r.onclick=zn)}s=u,o.updateQueue=s,(o=null!==s)&&as(t)}else{n=t,f=s,c=o,u=9===r.nodeType?r:r.ownerDocument,l===Fe&&(l=He(f)),l===Fe?"script"===f?((c=u.createElement("div")).innerHTML="<script><\/script>",u=c.removeChild(c.firstChild)):"string"==typeof c.is?u=u.createElement(f,{is:c.is}):(u=u.createElement(f),"select"===f&&(f=u,c.multiple?f.multiple=!0:c.size&&(f.size=c.size))):u=u.createElementNS(l,f),(c=u)[or]=n,c[ar]=o,Qa(c,t),t.stateNode=c;var d=r,h=Un(f=s,n=o);switch(f){case"iframe":case"object":case"embed":Tn("load",c),r=n;break;case"video":case"audio":for(r=0;r<et.length;r++)Tn(et[r],c);r=n;break;case"source":Tn("error",c),r=n;break;case"img":case"image":case"link":Tn("error",c),Tn("load",c),r=n;break;case"form":Tn("reset",c),Tn("submit",c),r=n;break;case"details":Tn("toggle",c),r=n;break;case"input":xe(c,n),r=ke(c,n),Tn("invalid",c),Gn(d,"onChange");break;case"option":r=Ae(c,n);break;case"select":c._wrapperState={wasMultiple:!!n.multiple},r=i({},n,{value:void 0}),Tn("invalid",c),Gn(d,"onChange");break;case"textarea":Me(c,n),r=je(c,n),Tn("invalid",c),Gn(d,"onChange");break;default:r=n}Bn(f,r),u=void 0,l=f;var v=c,m=r;for(u in m)if(m.hasOwnProperty(u)){var y=m[u];"style"===u?Vn(v,y):"dangerouslySetInnerHTML"===u?null!=(y=y?y.__html:void 0)&&Ge(v,y):"children"===u?"string"==typeof y?("textarea"!==l||""!==y)&&ze(v,y):"number"==typeof y&&ze(v,""+y):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(p.hasOwnProperty(u)?null!=y&&Gn(d,u):null!=y&&Se(v,u,y,h))}switch(f){case"input":Ee(c),Ne(c,n,!1);break;case"textarea":Ee(c),Le(c);break;case"option":null!=n.value&&c.setAttribute("value",""+we(n.value));break;case"select":(r=c).multiple=!!n.multiple,null!=(c=n.value)?Ie(r,!!n.multiple,c,!1):null!=n.defaultValue&&Ie(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(c.onclick=zn)}(o=Jn(s,o))&&as(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(a(166));break;case 6:if(n&&null!=t.stateNode)Za(0,t,n.memoizedProps,o);else{if("string"!=typeof o&&null===t.stateNode)throw Error(a(166));r=Vo(Fo.current),Vo(Do.current),Fa(t)?(s=(o=t).stateNode,r=o.memoizedProps,s[or]=o,(o=s.nodeValue!==r)&&as(t)):(s=t,(o=(9===r.nodeType?r:r.ownerDocument).createTextNode(o))[or]=s,t.stateNode=o)}break;case 11:break;case 13:if(ui(zo),o=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}o=null!==o,s=!1,null===n?void 0!==t.memoizedProps.fallback&&Fa(t):(s=null!==(r=n.memoizedState),o||null===r||null!==(r=n.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=r,r.nextEffect=c):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),o&&!s&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&zo.current)?0===Is&&(Is=3):(0!==Is&&3!==Is||(Is=4),0!==Fs&&null!==Ns&&(Vl(Ns,As),Hl(Ns,Fs)))),(o||s)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Bo();break;case 10:io(t);break;case 9:case 14:break;case 17:mi(t.type)&&yi();break;case 19:if(ui(zo),null===(o=t.memoizedState))break;if(s=0!=(64&t.effectTag),null===(c=o.rendering)){if(s)ss(o,!1);else if(0!==Is||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(c=Wo(n))){for(t.effectTag|=64,ss(o,!1),null!==(s=c.updateQueue)&&(t.updateQueue=s,t.effectTag|=4),null===o.lastEffect&&(t.firstEffect=null),t.lastEffect=o.lastEffect,o=r,s=t.child;null!==s;)n=o,(r=s).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(c=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=c.childExpirationTime,r.expirationTime=c.expirationTime,r.child=c.child,r.memoizedProps=c.memoizedProps,r.memoizedState=c.memoizedState,r.updateQueue=c.updateQueue,n=c.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),s=s.sibling;ci(zo,1&zo.current|2),t=t.child;break e}n=n.sibling}}else{if(!s)if(null!==(n=Wo(c))){if(t.effectTag|=64,s=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),ss(o,!0),null===o.tail&&"hidden"===o.tailMode&&!c.alternate){null!==(t=t.lastEffect=o.lastEffect)&&(t.nextEffect=null);break}}else Bi()>o.tailExpiration&&1<r&&(t.effectTag|=64,s=!0,ss(o,!1),t.expirationTime=t.childExpirationTime=r-1);o.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=o.last)?r.sibling=c:t.child=c,o.last=c)}if(null!==o.tail){0===o.tailExpiration&&(o.tailExpiration=Bi()+500),r=o.tail,o.rendering=r,o.tail=r.sibling,o.lastEffect=t.lastEffect,r.sibling=null,o=zo.current,ci(zo,o=s?1&o|2:1&o),t=r;break e}break;case 20:case 21:break;default:throw Error(a(156,t.tag))}t=null}if(o=Rs,1===As||1!==o.childExpirationTime){for(s=0,r=o.child;null!==r;)(n=r.expirationTime)>s&&(s=n),(c=r.childExpirationTime)>s&&(s=c),r=r.sibling;o.childExpirationTime=s}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Rs.firstEffect),null!==Rs.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Rs.firstEffect),e.lastEffect=Rs.lastEffect),1<Rs.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Rs:e.firstEffect=Rs,e.lastEffect=Rs))}else{if(null!==(t=ls(Rs)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Rs.sibling))return t;Rs=e}while(null!==Rs);return 0===Is&&(Is=5),null}function yl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function gl(e){var t=Ui();return zi(99,bl.bind(null,e,t)),null}function bl(e,t){do{wl()}while(null!==Xs);if(0!=(48&Cs))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=yl(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Ns&&(Rs=Ns=null,As=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=Cs;Cs|=32,Ps.current=null,$n=En;var s=Kn();if(qn(s)){if("selectionStart"in s)var l={start:s.selectionStart,end:s.selectionEnd};else e:{var u=(l=(l=s.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(u&&0!==u.rangeCount){l=u.anchorNode;var c=u.anchorOffset,f=u.focusNode;u=u.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var d=0,p=-1,h=-1,v=0,m=0,y=s,g=null;t:for(;;){for(var b;y!==l||0!==c&&3!==y.nodeType||(p=d+c),y!==f||0!==u&&3!==y.nodeType||(h=d+u),3===y.nodeType&&(d+=y.nodeValue.length),null!==(b=y.firstChild);)g=y,y=b;for(;;){if(y===s)break t;if(g===l&&++v===c&&(p=d),g===f&&++m===u&&(h=d),null!==(b=y.nextSibling))break;g=(y=g).parentNode}y=b}l=-1===p||-1===h?null:{start:p,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;Qn={focusedElem:s,selectionRange:l},En=!1,Bs=i;do{try{_l()}catch(e){if(null===Bs)throw Error(a(330));El(Bs,e),Bs=Bs.nextEffect}}while(null!==Bs);Bs=i;do{try{for(s=e,l=t;null!==Bs;){var _=Bs.effectTag;if(16&_&&ze(Bs.stateNode,""),128&_){var w=Bs.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&_){case 2:gs(Bs),Bs.effectTag&=-3;break;case 6:gs(Bs),Bs.effectTag&=-3,_s(Bs.alternate,Bs);break;case 1024:Bs.effectTag&=-1025;break;case 1028:Bs.effectTag&=-1025,_s(Bs.alternate,Bs);break;case 4:_s(Bs.alternate,Bs);break;case 8:bs(s,c=Bs,l),ms(c)}Bs=Bs.nextEffect}}catch(e){if(null===Bs)throw Error(a(330));El(Bs,e),Bs=Bs.nextEffect}}while(null!==Bs);if(S=Qn,w=Kn(),_=S.focusedElem,l=S.selectionRange,w!==_&&_&&_.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(_.ownerDocument.documentElement,_)){null!==l&&qn(_)&&(w=l.start,void 0===(S=l.end)&&(S=w),"selectionStart"in _?(_.selectionStart=w,_.selectionEnd=Math.min(S,_.value.length)):(S=(w=_.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),c=_.textContent.length,s=Math.min(l.start,c),l=void 0===l.end?s:Math.min(l.end,c),!S.extend&&s>l&&(c=l,l=s,s=c),c=Yn(_,s),f=Yn(_,l),c&&f&&(1!==S.rangeCount||S.anchorNode!==c.node||S.anchorOffset!==c.offset||S.focusNode!==f.node||S.focusOffset!==f.offset)&&((w=w.createRange()).setStart(c.node,c.offset),S.removeAllRanges(),s>l?(S.addRange(w),S.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),S.addRange(w))))),w=[];for(S=_;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof _.focus&&_.focus(),_=0;_<w.length;_++)(S=w[_]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Qn=null,En=!!$n,$n=null,e.current=n,Bs=i;do{try{for(_=r;null!==Bs;){var O=Bs.effectTag;if(36&O){var E=Bs.alternate;switch(S=_,(w=Bs).tag){case 0:case 11:case 15:hs(16,32,w);break;case 1:var T=w.stateNode;if(4&w.effectTag)if(null===E)T.componentDidMount();else{var k=w.elementType===w.type?E.memoizedProps:Qi(w.type,E.memoizedProps);T.componentDidUpdate(k,E.memoizedState,T.__reactInternalSnapshotBeforeUpdate)}var x=w.updateQueue;null!==x&&bo(0,x,T);break;case 3:var P=w.updateQueue;if(null!==P){if(s=null,null!==w.child)switch(w.child.tag){case 5:s=w.child.stateNode;break;case 1:s=w.child.stateNode}bo(0,P,s)}break;case 5:var C=w.stateNode;null===E&&4&w.effectTag&&Jn(w.type,w.memoizedProps)&&C.focus();break;case 6:case 4:case 12:break;case 13:if(null===w.memoizedState){var N=w.alternate;if(null!==N){var R=N.memoizedState;if(null!==R){var A=R.dehydrated;null!==A&&kt(A)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(a(163))}}if(128&O){w=void 0;var I=Bs.ref;if(null!==I){var j=Bs.stateNode;switch(Bs.tag){case 5:w=j;break;default:w=j}"function"==typeof I?I(w):I.current=w}}Bs=Bs.nextEffect}}catch(e){if(null===Bs)throw Error(a(330));El(Bs,e),Bs=Bs.nextEffect}}while(null!==Bs);Bs=null,Di(),Cs=o}else e.current=n;if(Ws)Ws=!1,Xs=e,Ys=t;else for(Bs=i;null!==Bs;)t=Bs.nextEffect,Bs.nextEffect=null,Bs=t;if(0===(t=e.firstPendingTime)&&(zs=null),1073741823===t?e===$s?qs++:(qs=0,$s=e):qs=0,"function"==typeof xl&&xl(n.stateNode,r),rl(e),Us)throw Us=!1,e=Gs,Gs=null,e;return 0!=(8&Cs)?null:(Yi(),null)}function _l(){for(;null!==Bs;){var e=Bs.effectTag;0!=(256&e)&&ps(Bs.alternate,Bs),0==(512&e)||Ws||(Ws=!0,Wi(97,(function(){return wl(),null}))),Bs=Bs.nextEffect}}function wl(){if(90!==Ys){var e=97<Ys?97:Ys;return Ys=90,zi(e,Sl)}}function Sl(){if(null===Xs)return!1;var e=Xs;if(Xs=null,0!=(48&Cs))throw Error(a(331));var t=Cs;for(Cs|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:hs(128,0,n),hs(0,64,n)}}catch(t){if(null===e)throw Error(a(330));El(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Cs=t,Yi(),!0}function Ol(e,t,n){ho(e,t=Os(e,t=us(n,t),1073741823)),null!==(e=tl(e,1073741823))&&rl(e)}function El(e,t){if(3===e.tag)Ol(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ol(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===zs||!zs.has(r))){ho(n,e=Es(n,e=us(t,e),1073741823)),null!==(n=tl(n,1073741823))&&rl(n);break}}n=n.return}}function Tl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Ns===e&&As===n?4===Is||3===Is&&1073741823===Ms&&Bi()-Hs<500?ll(e,As):Vs=!0:Fl(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),rl(e)))}function kl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Zs(t=Js(),e,null)),null!==(e=tl(e,t))&&rl(e)}Ts=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||pi.current)Ba=!0;else{if(r<n){switch(Ba=!1,t.tag){case 3:$a(t),Va();break;case 5:if(Uo(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:mi(t.type)&&wi(t);break;case 4:Ho(t,t.stateNode.containerInfo);break;case 10:ro(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?ts(e,t,n):(ci(zo,1&zo.current),null!==(t=os(e,t,n))?t.sibling:null);ci(zo,1&zo.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return is(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),ci(zo,zo.current),!r)return null}return os(e,t,n)}Ba=!1}}else Ba=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=vi(t,di.current),ao(t,n),i=ca(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,fa(),mi(r)){var o=!0;wi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var s=r.getDerivedStateFromProps;"function"==typeof s&&Oo(t,r,s,e),i.updater=Eo,t.stateNode=i,i._reactInternalFiber=t,Po(t,r,e,n),t=qa(null,t,r,!0,o,n)}else t.tag=0,Ua(null,t,i,n),t=t.child;return t;case 16:if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,o=t.tag=function(e){if("function"==typeof e)return Rl(e)?1:0;if(null!=e){if((e=e.$$typeof)===z)return 11;if(e===Y)return 14}return 2}(i),e=Qi(i,e),o){case 0:t=Ya(null,t,i,e,n);break;case 1:t=Ka(null,t,i,e,n);break;case 11:t=Ga(null,t,i,e,n);break;case 14:t=za(null,t,i,Qi(i.type,e),r,n);break;default:throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Ya(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 1:return r=t.type,i=t.pendingProps,Ka(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 3:if($a(t),null===(r=t.updateQueue))throw Error(a(282));if(i=null!==(i=t.memoizedState)?i.element:null,go(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===i)Va(),t=os(e,t,n);else{if((i=t.stateNode.hydrate)&&(Aa=nr(t.stateNode.containerInfo.firstChild),Ra=t,i=Ia=!0),i)for(n=jo(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ua(e,t,r,n),Va();t=t.child}return t;case 5:return Uo(t),null===e&&Da(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,s=i.children,Zn(r,i)?s=null:null!==o&&Zn(r,o)&&(t.effectTag|=16),Xa(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ua(e,t,s,n),t=t.child),t;case 6:return null===e&&Da(t),null;case 13:return ts(e,t,n);case 4:return Ho(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Io(t,null,r,n):Ua(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Ga(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 7:return Ua(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ua(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,s=t.memoizedProps,ro(t,o=i.value),null!==s){var l=s.value;if(0===(o=$r(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(s.children===i.children&&!pi.current){t=os(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===l.tag&&((c=fo(n,null)).tag=2,ho(l,c)),l.expirationTime<n&&(l.expirationTime=n),null!==(c=l.alternate)&&c.expirationTime<n&&(c.expirationTime=n),oo(l.return,n),u.expirationTime<n&&(u.expirationTime=n);break}c=c.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}}Ua(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,ao(t,n),r=r(i=so(i,o.unstable_observedBits)),t.effectTag|=1,Ua(e,t,r,n),t.child;case 14:return o=Qi(i=t.type,t.pendingProps),za(e,t,i,o=Qi(i.type,o),r,n);case 15:return Wa(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Qi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,mi(r)?(e=!0,wi(t)):e=!1,ao(t,n),ko(t,r,i),Po(t,r,i,n),qa(null,t,r,!0,e,n);case 19:return is(e,t,n)}throw Error(a(156,t.tag))};var xl=null,Pl=null;function Cl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Nl(e,t,n,r){return new Cl(e,t,n,r)}function Rl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Al(e,t){var n=e.alternate;return null===n?((n=Nl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Il(e,t,n,r,i,o){var s=2;if(r=e,"function"==typeof e)Rl(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case F:return jl(n.children,i,o,t);case G:s=8,i|=7;break;case V:s=8,i|=1;break;case H:return(e=Nl(12,n,t,8|i)).elementType=H,e.type=H,e.expirationTime=o,e;case W:return(e=Nl(13,n,t,i)).type=W,e.elementType=W,e.expirationTime=o,e;case X:return(e=Nl(19,n,t,i)).elementType=X,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case B:s=10;break e;case U:s=9;break e;case z:s=11;break e;case Y:s=14;break e;case K:s=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Nl(s,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function jl(e,t,n,r){return(e=Nl(7,e,r,t)).expirationTime=n,e}function Ml(e,t,n){return(e=Nl(6,e,null,t)).expirationTime=n,e}function Dl(e,t,n){return(t=Nl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ll(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Fl(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Vl(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Hl(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Bl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Ul(e,t,n,r){var i=t.current,o=Js(),s=wo.suspense;o=Zs(o,i,s);e:if(n){t:{if(tt(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(mi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var u=n.type;if(mi(u)){n=_i(n,u,l);break e}}n=l}else n=fi;return null===t.context?t.context=n:t.pendingContext=n,(t=fo(o,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ho(i,t),el(i,o),o}function Gl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function zl(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Wl(e,t){zl(e,t),(e=e.alternate)&&zl(e,t)}function Xl(e,t,n){var r=new Ll(e,t,n=null!=n&&!0===n.hydrate),i=Nl(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,e[sr]=r.current,n&&0!==t&&function(e){var t=jn(e);mt.forEach((function(n){Mn(n,e,t)})),yt.forEach((function(n){Mn(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Yl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Kl(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var s=i;i=function(){var e=Gl(a);s.call(e)}}Ul(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Xl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=Gl(a);l.call(e)}}sl((function(){Ul(t,a,e,i)}))}return Gl(a)}function ql(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:L,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function $l(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Yl(t))throw Error(a(200));return ql(e,t,null,n)}Xl.prototype.render=function(e,t){Ul(e,this._internalRoot,null,void 0===t?null:t)},Xl.prototype.unmount=function(e){var t=this._internalRoot,n=void 0===e?null:e,r=t.containerInfo;Ul(null,t,null,(function(){r[sr]=null,null!==n&&n()}))},ot=function(e){if(13===e.tag){var t=$i(Js(),150,100);el(e,t),Wl(e,t)}},at=function(e){if(13===e.tag){Js();var t=qi++;el(e,t),Wl(e,t)}},st=function(e){if(13===e.tag){var t=Js();el(e,t=Zs(t,e,null)),Wl(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Ce(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=fr(r);if(!i)throw Error(a(90));Te(r),Ce(r,i)}}}break;case"textarea":De(e,n);break;case"select":null!=(t=n.value)&&Ie(e,!!n.multiple,t,!1)}},ae=al,se=function(e,t,n,r){var i=Cs;Cs|=4;try{return zi(98,e.bind(null,t,n,r))}finally{0===(Cs=i)&&Yi()}},le=function(){0==(49&Cs)&&(function(){if(null!==Ks){var e=Ks;Ks=null,e.forEach((function(e,t){Bl(t,e),rl(t)})),Yi()}}(),wl())},ue=function(e,t){var n=Cs;Cs|=2;try{return e(t)}finally{0===(Cs=n)&&Yi()}};var Ql,Jl,Zl={createPortal:$l,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=it(t))?null:e.stateNode},hydrate:function(e,t,n){if(!Yl(t))throw Error(a(200));return Kl(null,e,t,!0,n)},render:function(e,t,n){if(!Yl(t))throw Error(a(200));return Kl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!Yl(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Kl(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!Yl(e))throw Error(a(40));return!!e._reactRootContainer&&(sl((function(){Kl(null,null,e,!1,(function(){e._reactRootContainer=null,e[sr]=null}))})),!0)},unstable_createPortal:function(){return $l.apply(void 0,arguments)},unstable_batchedUpdates:al,flushSync:function(e,t){if(0!=(48&Cs))throw Error(a(187));var n=Cs;Cs|=1;try{return zi(99,e.bind(null,t))}finally{Cs=n,Yi()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[ur,cr,fr,R.injectEventPluginsByName,d,It,function(e){x(e,At)},ie,oe,Nn,N,wl,{current:!1}]}};Jl=(Ql={findFiberByHostInstance:lr,bundleType:0,version:"16.12.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);xl=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Pl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},Ql,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:I.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=it(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Jl?Jl(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var eu={default:Zl},tu=eu&&Zl||eu;e.exports=tu.default||tu},function(e,t,n){"use strict";e.exports=n(193)},function(e,t,n){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,o,a,s;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,u=null,c=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(c,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(c,0))},i=function(e,t){u=setTimeout(e,t)},o=function(){clearTimeout(u)},a=function(){return!1},s=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,v=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var g=!1,b=null,_=-1,w=5,S=0;a=function(){return t.unstable_now()>=S},s=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):w=0<e?Math.floor(1e3/e):5};var O=new MessageChannel,E=O.port2;O.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();S=e+w;try{b(!0,e)?E.postMessage(null):(g=!1,b=null)}catch(e){throw E.postMessage(null),e}}else g=!1},r=function(e){b=e,g||(g=!0,E.postMessage(null))},i=function(e,n){_=h((function(){e(t.unstable_now())}),n)},o=function(){v(_),_=-1}}function T(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),i=e[r];if(!(void 0!==i&&0<P(i,t)))break e;e[r]=t,e[n]=i,n=r}}function k(e){return void 0===(e=e[0])?null:e}function x(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],s=o+1,l=e[s];if(void 0!==a&&0>P(a,n))void 0!==l&&0>P(l,a)?(e[r]=l,e[s]=n,r=s):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>P(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function P(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],N=[],R=1,A=null,I=3,j=!1,M=!1,D=!1;function L(e){for(var t=k(N);null!==t;){if(null===t.callback)x(N);else{if(!(t.startTime<=e))break;x(N),t.sortIndex=t.expirationTime,T(C,t)}t=k(N)}}function F(e){if(D=!1,L(e),!M)if(null!==k(C))M=!0,r(V);else{var t=k(N);null!==t&&i(F,t.startTime-e)}}function V(e,n){M=!1,D&&(D=!1,o()),j=!0;var r=I;try{for(L(n),A=k(C);null!==A&&(!(A.expirationTime>n)||e&&!a());){var s=A.callback;if(null!==s){A.callback=null,I=A.priorityLevel;var l=s(A.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?A.callback=l:A===k(C)&&x(C),L(n)}else x(C);A=k(C)}if(null!==A)var u=!0;else{var c=k(N);null!==c&&i(F,c.startTime-n),u=!1}return u}finally{A=null,I=r,j=!1}}function H(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=s;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=I;I=e;try{return t()}finally{I=n}},t.unstable_next=function(e){switch(I){case 1:case 2:case 3:var t=3;break;default:t=I}var n=I;I=t;try{return e()}finally{I=n}},t.unstable_scheduleCallback=function(e,n,a){var s=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?s+l:s,a="number"==typeof a.timeout?a.timeout:H(e)}else a=H(e),l=s;return e={id:R++,callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>s?(e.sortIndex=l,T(N,e),null===k(C)&&e===k(N)&&(D?o():D=!0,i(F,l-s))):(e.sortIndex=a,T(C,e),M||j||(M=!0,r(V))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=I;return function(){var n=I;I=t;try{return e.apply(this,arguments)}finally{I=n}}},t.unstable_getCurrentPriorityLevel=function(){return I},t.unstable_shouldYield=function(){var e=t.unstable_now();L(e);var n=k(C);return n!==A&&null!==A&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<A.expirationTime||a()},t.unstable_requestPaint=B,t.unstable_continueExecution=function(){M||j||(M=!0,r(V))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return k(C)},t.unstable_Profiling=null},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(e.hasOwnProperty(t)){for(var r={},i=e[t],a=(0,o.default)(t),s=Object.keys(n),l=0;l<s.length;l++){var u=s[l];if(u===t)for(var c=0;c<i.length;c++)r[i[c]+a]=n[t];r[u]=n[u]}return r}return n};var r,i=n(115),o=(r=i)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,i){for(var o=0,a=e.length;o<a;++o){var s=e[o](t,n,r,i);if(s)return s}}},function(e,t,n){"use strict";function r(e,t){-1===e.indexOf(t)&&e.push(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(Array.isArray(t))for(var n=0,i=t.length;n<i;++n)r(e,t[n]);else r(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e instanceof Object&&!Array.isArray(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,o.default)(e)};var r,i=n(65),o=(r=i)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";var r=n(75),i=n(200),o=n(201);e.exports=function(e,t,n){var a=[],s={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",UNSAFE_componentWillMount:"DEFINE_MANY",UNSAFE_componentWillReceiveProps:"DEFINE_MANY",UNSAFE_componentWillUpdate:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},l={getDerivedStateFromProps:"DEFINE_MANY_MERGED"},u={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)f(e,t[n])},childContextTypes:function(e,t){e.childContextTypes=r({},e.childContextTypes,t)},contextTypes:function(e,t){e.contextTypes=r({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=p(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,t){e.propTypes=r({},e.propTypes,t)},statics:function(e,t){!function(e,t){if(!t)return;for(var n in t){var r=t[n];if(t.hasOwnProperty(n)){if(o(!(n in u),'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',n),n in e){var i=l.hasOwnProperty(n)?l[n]:null;return o("DEFINE_MANY_MERGED"===i,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n),void(e[n]=p(e[n],r))}e[n]=r}}}(e,t)},autobind:function(){}};function c(e,t){var n=s.hasOwnProperty(t)?s[t]:null;g.hasOwnProperty(t)&&o("OVERRIDE_BASE"===n,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",t),e&&o("DEFINE_MANY"===n||"DEFINE_MANY_MERGED"===n,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",t)}function f(e,n){if(n){o("function"!=typeof n,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),o(!t(n),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var r=e.prototype,i=r.__reactAutoBindPairs;for(var a in n.hasOwnProperty("mixins")&&u.mixins(e,n.mixins),n)if(n.hasOwnProperty(a)&&"mixins"!==a){var l=n[a],f=r.hasOwnProperty(a);if(c(f,a),u.hasOwnProperty(a))u[a](e,l);else{var d=s.hasOwnProperty(a);if("function"==typeof l&&!d&&!f&&!1!==n.autobind)i.push(a,l),r[a]=l;else if(f){var v=s[a];o(d&&("DEFINE_MANY_MERGED"===v||"DEFINE_MANY"===v),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",v,a),"DEFINE_MANY_MERGED"===v?r[a]=p(r[a],l):"DEFINE_MANY"===v&&(r[a]=h(r[a],l))}else r[a]=l}}}else;}function d(e,t){for(var n in o(e&&t&&"object"==typeof e&&"object"==typeof t,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."),t)t.hasOwnProperty(n)&&(o(void 0===e[n],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",n),e[n]=t[n]);return e}function p(e,t){return function(){var n=e.apply(this,arguments),r=t.apply(this,arguments);if(null==n)return r;if(null==r)return n;var i={};return d(i,n),d(i,r),i}}function h(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function v(e,t){return t.bind(e)}var m={componentDidMount:function(){this.__isMounted=!0}},y={componentWillUnmount:function(){this.__isMounted=!1}},g={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e,t)},isMounted:function(){return!!this.__isMounted}},b=function(){};return r(b.prototype,e.prototype,g),function(e){var t=function(e,r,a){this.__reactAutoBindPairs.length&&function(e){for(var t=e.__reactAutoBindPairs,n=0;n<t.length;n+=2){var r=t[n],i=t[n+1];e[r]=v(e,i)}}(this),this.props=e,this.context=r,this.refs=i,this.updater=a||n,this.state=null;var s=this.getInitialState?this.getInitialState():null;o("object"==typeof s&&!Array.isArray(s),"%s.getInitialState(): must return an object or null",t.displayName||"ReactCompositeComponent"),this.state=s};for(var r in t.prototype=new b,t.prototype.constructor=t,t.prototype.__reactAutoBindPairs=[],a.forEach(f.bind(null,t)),f(t,m),f(t,e),f(t,y),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),o(t.prototype.render,"createClass(...): Class specification must implement a `render` method."),s)t.prototype[r]||(t.prototype[r]=null);return t}}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i,o,a,s){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,i,o,a,s],c=0;(l=new Error(t.replace(/%s/g,(function(){return u[c++]})))).name="Invariant Violation"}throw l.framesToPop=1,l}}},,function(e,t,n){"use strict";var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/react-native-rxsegment/src/Segment.js",o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),s=p(a),l=p(n(4)),u=p(n(3)),c=p(n(118)),f=p(n(119)),d=p(n(0));function p(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.changeSelect=function(e){c.default.dismiss();var t=r.state,n=t.contents,i=t.selectIndex,o=n.length||0;if(!(e>=o)){if(e!=i){var a=n[i];s.default.isValidElement(a)&&(a=r.changeViewToHidden(a,i,i),n[i]=a)}var l=n[e];if(l&&s.default.isValidElement(l)||(l=r.childrenViews[e]),s.default.isValidElement(l)){l=r.changeViewToShow(l,e,o+e);var u=r.contentsCache[e];u&&u.key||(r.contentsCache[e]=l)}n[e]=l,r.setState({contents:n,selectIndex:e})}},r.renderTabBarView=function(){var e=r.props,t=e.renderTabBar,n=e.tabBarLabels,o=e.tabBarStyle,a=r.state.selectIndex;if(t&&"function"==typeof t){var l=t();return s.default.cloneElement(l,{selectIndex:a,onPress:function(e){return r.changeSelect(e)}})}return s.default.createElement(f.default,{style:[{backgroundColor:"blue"},o],tabBarLabels:n,selectIndex:a,underlineStyle:{width:25,height:2},onPress:function(e){r.changeSelect(e)},__source:{fileName:i,lineNumber:158}})},r.renderChilder=function(){var e=r.state.contents;return s.default.createElement(u.default,{style:{flex:1},__source:{fileName:i,lineNumber:172}},e)},r.state={selectIndex:0,contents:[]},r.contentsCache=[],r.childrenViews=[],r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentDidMount",value:function(){this.configDefaultContent(this.props)}},{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=e.children;(t=t||[])!=(this.childrenViews||{})&&this.configDefaultContent(e)}},{key:"configDefaultContent",value:function(e){this.childrenViews=this.buildChildren(e);var t=this.childrenViews.length,n=[],r=this.state.selectIndex,i=this.contentsCache,o=i.length;r>=t&&(r=0);for(var a=0;a<t;a++){var s=i[a];if(a!==r){var l=null;s&&a<=o&&s.key&&(l=this.changeViewToHidden(this.childrenViews[a],a,t)),n.push(l)}else{var u=this.changeViewToShow(this.childrenViews[a],a,t);n.push(u)}}this.setState({contents:n,selectIndex:r})}},{key:"buildChildren",value:function(e){var t=e.children;return t?t instanceof Array||(t=[t]):t=[],t}},{key:"changeViewToHidden",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments[2];return s.default.cloneElement(e,{key:"rx-segment-item-"+t,style:[v.viewHidden,{zIndex:n}]})}},{key:"changeViewToShow",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1e3;return s.default.cloneElement(e,{key:"rx-segment-item-"+t,style:[v.viewShow,{zIndex:n}]})}},{key:"render",value:function(){var e=this.props,t=e.style;e.renderTabBar,e.children,function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}(e,["style","renderTabBar","children"]);return s.default.createElement(u.default,{style:[v.container,t],__source:{fileName:i,lineNumber:181}},this.renderTabBarView(),this.renderChilder())}}]),t}(a.Component);h.propTypes=r({},u.default.propTypes,{renderTabBar:d.default.func,tabBarLabels:d.default.arrayOf(d.default.oneOfType([d.default.element,d.default.string,d.default.number])),tabBarStyle:d.default.any}),h.defaultProps=r({},u.default.defaultProps,{renderTabBar:null,tabBarLabels:[],tabBarStyle:{}}),e.exports=h;var v=l.default.create({container:{padding:0,margin:0},viewShow:{flex:1},viewHidden:{position:"absolute",width:0,height:0,overflow:"hidden"}})},,,,,,function(e,t,n){"use strict";var r;n(9).canUseDOM&&(r=window.performance||window.msPerformance||window.webkitPerformance),e.exports=r||{}},,function(e,t,n){"use strict";n.r(t);var r=n(26),i=n(4),o=n(3),a=(n(0),n(1)),s=n.n(a);function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var u=function(e){return s.a.createElement("circle",{cx:"16",cy:"16",fill:"none",r:"14",strokeWidth:"4",style:e})},c=function(e){var t,n;function r(){return e.apply(this,arguments)||this}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,r.prototype.render=function(){var e=this.props,t=e.animating,n=e.color,r=e.hidesWhenStopped,i=e.size,a=e.style,c=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["animating","color","hidesWhenStopped","size","style"]),p=s.a.createElement("svg",{height:"100%",viewBox:"0 0 32 32",width:"100%"},u({stroke:n,opacity:.2}),u({stroke:n,strokeDasharray:80,strokeDashoffset:60}));return s.a.createElement(o.default,l({},c,{accessibilityRole:"progressbar","aria-valuemax":"1","aria-valuemin":"0",style:[f.container,a]}),s.a.createElement(o.default,{children:p,style:["number"==typeof i?{height:i,width:i}:d[i],f.animation,!t&&f.animationPause,!t&&r&&f.hidesWhenStopped]}))},r}(a.Component);c.displayName="ActivityIndicator",c.defaultProps={animating:!0,color:"#1976D2",hidesWhenStopped:!0,size:"small"},c.propTypes={};var f=i.default.create({container:{alignItems:"center",justifyContent:"center"},hidesWhenStopped:{visibility:"hidden"},animation:{animationDuration:"0.75s",animationKeyframes:[{"0%":{transform:[{rotate:"0deg"}]},"100%":{transform:[{rotate:"360deg"}]}}],animationTimingFunction:"linear",animationIterationCount:"infinite"},animationPause:{animationPlayState:"paused"}}),d=i.default.create({small:{width:20,height:20},large:{width:36,height:36}});t.default=Object(r.a)(c)},,function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,s,l,u){var c=e.getActionCreators(t,null),f={actions:c,router:e,state:t,dispatch:n,getScreenProps:l,getChildNavigation:function(e){return(0,o.default)(f,e,u)},isFocused:function(e){var t=u().state,n=t.routes,r=t.index;return null==e||n[r].key===e},addListener:function(e,t){return"action"!==e?{remove:function(){}}:(s.add(t),{remove:function(){s.delete(t)}})},dangerouslyGetParent:function(){return null},isFirstRouteInParent:function(){return!0},_childrenNavigation:(0,a.default)(u())},d=(0,r.default)({},(0,i.default)(f.state),c);return Object.keys(d).forEach((function(e){f[e]=function(){return f.dispatch(d[e].apply(d,arguments))}})),f};var r=s(n(13)),i=s(n(124)),o=s(n(214)),a=s(n(125));function s(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(13)),i=l(n(215)),o=l(n(216)),a=l(n(124)),s=l(n(125));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){return function(t,n){var r=e.params;return r&&t in r?r[t]:n}};t.default=function e(t,n,l){var c=(0,s.default)(t),f=t.state.routes.find((function(e){return e.key===n}));if(!f)return null;if(c[n]&&c[n].state===f)return c[n];var d=(0,o.default)(t.router,f.routeName),p=f.routes&&"number"==typeof f.index?f.routes[f.index]:null,h=(0,r.default)({},t.actions,t.router.getActionCreators(f,t.state.key),d?d.getActionCreators(p,f.key):{},(0,a.default)(f)),v={};Object.keys(h).forEach((function(e){v[e]=function(){var n=h[e],r=n.apply(void 0,arguments);return t.dispatch(r)}}));var m=!0,y=l();if(y&&(m=0===y.state.routes.indexOf(f)),c[n]&&c[n].isFirstRouteInParent()===m)return c[n]=(0,r.default)({},c[n],v,{state:f,router:d,actions:h,getParam:u(f)}),c[n];var g=(0,i.default)(t.addListener,n);return c[n]=(0,r.default)({},v,{state:f,router:d,actions:h,getParam:u(f),getChildNavigation:function(t){return e(c[n],t,(function(){var e=l();return e&&e.getChildNavigation(n)}))},isFocused:function(){var e=l();if(!e)return!1;var t=e.state,r=t.routes,i=t.index;return!!e.isFocused()&&r[i].key===n},isFirstRouteInParent:function(){return m},dispatch:t.dispatch,getScreenProps:t.getScreenProps,dangerouslyGetParent:l,addListener:g.addListener,emit:g.emit}),c[n]}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"didBlur",r=new Set,i=new Set,a=new Set,s=new Set,l=new Set,u=new Set,c=function(){[r,i,a,s,l,u].forEach((function(e){return e.clear()})),v.forEach((function(e){return e&&e.remove()}))},f=function(e){switch(e){case"action":return r;case"willFocus":return i;case"didFocus":return a;case"willBlur":return s;case"didBlur":return l;case"refocus":return u;default:return null}},d=function(e,t){var n=(0,o.default)({},t,{type:e}),r=f(e);r&&r.forEach((function(e){e(n)}))},p=n,h=["willFocus","didFocus","willBlur","didBlur","refocus","action"],v=h.map((function(n){return e(n,(function(e){if("refocus"!==n){var r=e.state,i=e.lastState,o=e.action,a=i&&i.routes,s=r&&r.routes,l=(s&&s[r.index].key)===t,u=a&&a.find((function(e){return e.key===t})),f=s&&s.find((function(e){return e.key===t})),h={context:t+":"+o.type+"_"+(e.context||"Root"),state:f,lastState:u,action:o,type:n},v=!!r&&r.isTransitioning,m=p;"didBlur"===p&&("willFocus"===n&&l?d(p="willFocus",h):"action"===n&&l&&d(p="willFocus",h)),"willFocus"===p&&("didFocus"===n&&l&&!v?d(p="didFocus",h):"action"===n&&l&&!v&&d(p="didFocus",h)),"didFocus"===p&&(l?"willBlur"===n?d(p="willBlur",h):"action"===n&&"didFocus"===m&&d("action",h):d(p="willBlur",h)),"willBlur"===p&&("action"!==n||l||v?"didBlur"===n?d(p="didBlur",h):"action"===n&&l&&!v?d(p="didFocus",h):"action"===n&&l&&v&&d(p="willFocus",h):d(p="didBlur",h)),"didBlur"!==p||f||c()}else d(n,e)}))}));return{addListener:function(e,t){var n=f(e);if(!n)throw new Error('Invalid event name "'+e+'"');n.add(t);return{remove:function(){n.delete(t)}}},emit:function(e,t){"refocus"===e?d(e,t):console.error("navigation.emit only supports the 'refocus' event currently.")}}};var r,i=n(13),o=(r=i)&&r.__esModule?r:{default:r}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(e.childRouters&&e.childRouters[t])return e.childRouters[t];return e.getComponentForRouteName(t).router}},function(e,t){function n(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=n=function(e){return typeof e}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(t)}e.exports=n},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(126)),i=a(n(89)),o=a(n(128));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=(0,i.default)(e,t),a=(0,r.default)(o.default,n,t);return a}},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.suspense_list"):60120,m=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,_=r?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case f:case d:case a:case l:case s:case h:return e;default:switch(e=e&&e.$$typeof){case c:case p:case y:case m:case u:return e;default:return t}}case o:return t}}}function S(e){return w(e)===d}t.typeOf=w,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=u,t.Element=i,t.ForwardRef=p,t.Fragment=a,t.Lazy=y,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=s,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===s||e===h||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===u||e.$$typeof===c||e.$$typeof===p||e.$$typeof===g||e.$$typeof===b||e.$$typeof===_)},t.isAsyncMode=function(e){return S(e)||w(e)===f},t.isConcurrentMode=S,t.isContextConsumer=function(e){return w(e)===c},t.isContextProvider=function(e){return w(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===a},t.isLazy=function(e){return w(e)===y},t.isMemo=function(e){return w(e)===m},t.isPortal=function(e){return w(e)===o},t.isProfiler=function(e){return w(e)===l},t.isStrictMode=function(e){return w(e)===s},t.isSuspense=function(e){return w(e)===h}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(90),o=(r=i)&&r.__esModule?r:{default:r};var a=["tabBar"];t.default=function(e,t){var n=Object.keys(e).find((function(e){return a.includes(e)}));if("function"==typeof e.title)throw new Error(["`title` cannot be defined as a function in navigation options for `"+t.routeName+"` screen. \n","Try replacing the following:","{","    title: ({ state }) => state...","}","","with:","({ navigation }) => ({","    title: navigation.state...","})"].join("\n"));if(n&&"function"==typeof e[n])throw new Error(["`"+n+"` cannot be defined as a function in navigation options for `"+t.routeName+"` screen. \n","Try replacing the following:","{","    "+n+": ({ state }) => ({","         key: state...","    })","}","","with:","({ navigation }) => ({","    "+n+"Key: navigation.state...","})"].join("\n"));if(n&&"object"==typeof e[n])throw new Error(["Invalid key `"+n+"` defined in navigation options for `"+t.routeName+"` screen.","\n","Try replacing the following navigation options:","{","    "+n+": {"].concat((0,o.default)(Object.keys(e[n]).map((function(e){return"        "+e+": ...,"}))),["    },","}","\n","with:","{"],(0,o.default)(Object.keys(e[n]).map((function(e){return"    "+(n+e[0].toUpperCase()+e.slice(1))+": ...,"}))),["}"]).join("\n"))}},function(e,t,n){var r=n(227),i=n(228),o=n(229);e.exports=function(e,t){return r(e)||i(e,t)||o()}},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(e,t,n){var r=n(231);e.exports=p,e.exports.parse=o,e.exports.compile=function(e,t){return s(o(e,t),t)},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=d;var i=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,a=0,s="",c=t&&t.delimiter||"/";null!=(n=i.exec(e));){var f=n[0],d=n[1],p=n.index;if(s+=e.slice(a,p),a=p+f.length,d)s+=d[1];else{var h=e[a],v=n[2],m=n[3],y=n[4],g=n[5],b=n[6],_=n[7];s&&(r.push(s),s="");var w=null!=v&&null!=h&&h!==v,S="+"===b||"*"===b,O="?"===b||"*"===b,E=n[2]||c,T=y||g;r.push({name:m||o++,prefix:v||"",delimiter:E,optional:O,repeat:S,partial:w,asterisk:!!_,pattern:T?u(T):_?".*":"[^"+l(E)+"]+?"})}}return a<e.length&&(s+=e.substr(a)),s&&r.push(s),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e,t){for(var n=new Array(e.length),i=0;i<e.length;i++)"object"==typeof e[i]&&(n[i]=new RegExp("^(?:"+e[i].pattern+")$",f(t)));return function(t,i){for(var o="",s=t||{},l=(i||{}).pretty?a:encodeURIComponent,u=0;u<e.length;u++){var c=e[u];if("string"!=typeof c){var f,d=s[c.name];if(null==d){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!n[u].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");o+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(d),!n[u].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');o+=c.prefix+f}}else o+=c}return o}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var i=(n=n||{}).strict,o=!1!==n.end,a="",s=0;s<e.length;s++){var u=e[s];if("string"==typeof u)a+=l(u);else{var d=l(u.prefix),p="(?:"+u.pattern+")";t.push(u),u.repeat&&(p+="(?:"+d+p+")*"),a+=p=u.optional?u.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=l(n.delimiter||"/"),v=a.slice(-h.length)===h;return i||(a=(v?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=o?"$":i&&v?"":"(?="+h+"|$)",c(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(p(e[i],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(o(e,n),t,n)}(e,t,n)}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";const r=n(233),i=n(234),o=n(235);function a(e,t){return t.encode?t.strict?r(e):encodeURIComponent(e):e}function s(e,t){return t.decode?i(e):e}function l(e){const t=e.indexOf("#");return-1!==t&&(e=e.slice(0,t)),e}function u(e){const t=(e=l(e)).indexOf("?");return-1===t?"":e.slice(t+1)}function c(e,t){return t.parseNumbers&&!Number.isNaN(Number(e))&&"string"==typeof e&&""!==e.trim()?e=Number(e):!t.parseBooleans||null===e||"true"!==e.toLowerCase()&&"false"!==e.toLowerCase()||(e="true"===e.toLowerCase()),e}function f(e,t){const n=function(e){let t;switch(e.arrayFormat){case"index":return(e,n,r)=>{t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===r[e]&&(r[e]={}),r[e][t[1]]=n):r[e]=n};case"bracket":return(e,n,r)=>{t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==r[e]?r[e]=[].concat(r[e],n):r[e]=[n]:r[e]=n};case"comma":return(e,t,n)=>{const r="string"==typeof t&&t.split("").indexOf(",")>-1?t.split(","):t;n[e]=r};default:return(e,t,n)=>{void 0!==n[e]?n[e]=[].concat(n[e],t):n[e]=t}}}(t=Object.assign({decode:!0,sort:!0,arrayFormat:"none",parseNumbers:!1,parseBooleans:!1},t)),r=Object.create(null);if("string"!=typeof e)return r;if(!(e=e.trim().replace(/^[?#&]/,"")))return r;for(const i of e.split("&")){let[e,a]=o(t.decode?i.replace(/\+/g," "):i,"=");a=void 0===a?null:s(a,t),n(s(e,t),a,r)}for(const e of Object.keys(r)){const n=r[e];if("object"==typeof n&&null!==n)for(const e of Object.keys(n))n[e]=c(n[e],t);else r[e]=c(n,t)}return!1===t.sort?r:(!0===t.sort?Object.keys(r).sort():Object.keys(r).sort(t.sort)).reduce((e,t)=>{const n=r[t];return Boolean(n)&&"object"==typeof n&&!Array.isArray(n)?e[t]=function e(t){return Array.isArray(t)?t.sort():"object"==typeof t?e(Object.keys(t)).sort((e,t)=>Number(e)-Number(t)).map(e=>t[e]):t}(n):e[t]=n,e},Object.create(null))}t.extract=u,t.parse=f,t.stringify=(e,t)=>{if(!e)return"";const n=function(e){switch(e.arrayFormat){case"index":return t=>(n,r)=>{const i=n.length;return void 0===r||e.skipNull&&null===r?n:null===r?[...n,[a(t,e),"[",i,"]"].join("")]:[...n,[a(t,e),"[",a(i,e),"]=",a(r,e)].join("")]};case"bracket":return t=>(n,r)=>void 0===r||e.skipNull&&null===r?n:null===r?[...n,[a(t,e),"[]"].join("")]:[...n,[a(t,e),"[]=",a(r,e)].join("")];case"comma":return t=>(n,r)=>null==r||0===r.length?n:0===n.length?[[a(t,e),"=",a(r,e)].join("")]:[[n,a(r,e)].join(",")];default:return t=>(n,r)=>void 0===r||e.skipNull&&null===r?n:null===r?[...n,a(t,e)]:[...n,[a(t,e),"=",a(r,e)].join("")]}}(t=Object.assign({encode:!0,strict:!0,arrayFormat:"none"},t)),r=Object.assign({},e);if(t.skipNull)for(const e of Object.keys(r))void 0!==r[e]&&null!==r[e]||delete r[e];const i=Object.keys(r);return!1!==t.sort&&i.sort(t.sort),i.map(r=>{const i=e[r];return void 0===i?"":null===i?a(r,t):Array.isArray(i)?i.reduce(n(r),[]).join("&"):a(r,t)+"="+a(i,t)}).filter(e=>e.length>0).join("&")},t.parseUrl=(e,t)=>({url:l(e).split("?")[0]||"",query:f(u(e),t)})},function(e,t,n){"use strict";e.exports=e=>encodeURIComponent(e).replace(/[!'()*]/g,e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`)},function(e,t,n){"use strict";var r=new RegExp("%[a-f0-9]{2}","gi"),i=new RegExp("(%[a-f0-9]{2})+","gi");function o(e,t){try{return decodeURIComponent(e.join(""))}catch(e){}if(1===e.length)return e;t=t||1;var n=e.slice(0,t),r=e.slice(t);return Array.prototype.concat.call([],o(n),o(r))}function a(e){try{return decodeURIComponent(e)}catch(i){for(var t=e.match(r),n=1;n<t.length;n++)t=(e=o(t,n).join("")).match(r);return e}}e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof e+"`");try{return e=e.replace(/\+/g," "),decodeURIComponent(e)}catch(t){return function(e){for(var t={"%FE%FF":"��","%FF%FE":"��"},n=i.exec(e);n;){try{t[n[0]]=decodeURIComponent(n[0])}catch(e){var r=a(n[0]);r!==n[0]&&(t[n[0]]=r)}n=i.exec(e)}t["%C2"]="�";for(var o=Object.keys(t),s=0;s<o.length;s++){var l=o[s];e=e.replace(new RegExp(l,"g"),t[l])}return e}(e)}}},function(e,t,n){"use strict";e.exports=(e,t)=>{if("string"!=typeof e||"string"!=typeof t)throw new TypeError("Expected the arguments to be of type `string`");if(""===t)return[e];const n=e.indexOf(t);return-1===n?[e]:[e.slice(0,n),e.slice(n+t.length)]}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default={light:{header:"#fff",headerBorder:"#a7a7aa",body:"#fff",bodyBorder:"#a7a7aa",bodyContent:"#fff",label:"rgba(0, 0, 0, 0.9)"},dark:{header:"#2a2a2a",headerBorder:"#3a3a3a",body:"#000",bodyBorder:"#343434",bodyContent:"#2a2a2a",label:"#fff"}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(1),o=n(60),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){return(0,i.useContext)(a.default)}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=v(n(90)),i=v(n(13)),o=h(n(59)),a=h(n(130)),s=v(n(91)),l=v(n(76)),u=v(n(122)),c=v(n(92)),f=v(n(33)),d=n(239),p=n(93);function h(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function v(e){return e&&e.__esModule?e:{default:e}}function m(e){return e.type===o.NAVIGATE||e.type===a.PUSH}var y=function(){return{}};function g(e){return e.type===a.RESET&&null===e.key}t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,c.default)(e);var n={},h=Object.keys(e);h.forEach((function(t){var r=e[t],i=r&&r.screen?r.screen:r;i&&i.router?n[t]=i.router:n[t]=null}));var v=t.initialRouteParams,b=t.getCustomActionCreators||y,_=t.initialRouteName||h[0],w=n[_];function S(r){var a={},s=n[r.routeName];if(m(r)&&void 0!==s){var l={};if(null!==s){var u=r.action||o.init({params:r.params});l=s.getStateForAction(u)}return{key:"StackRouterRoot",isTransitioning:!1,index:0,routes:[(0,i.default)({params:r.params},l,{key:r.key||(0,d.generateKey)(),routeName:r.routeName})]}}w&&(a=w.getStateForAction(o.navigate({routeName:_,params:v})));var c=(e[_].params||a.params||r.params||v)&&(0,i.default)({},e[_].params||{},a.params||{},r.params||{},v||{}),f=t.initialRouteKey;return{key:"StackRouterRoot",isTransitioning:!1,index:0,routes:[a=(0,i.default)({},a,c?{params:c}:{},{routeName:_,key:r.key||f||(0,d.generateKey)()})]}}function O(t,n){var r=e[t];return r&&r.params?(0,i.default)({},r.params,n.params):n.params}var E=(0,p.createPathParser)(n,e,t),T=E.getPathAndParamsForRoute,k=E.getActionForPathAndParams;return{childRouters:n,getComponentForState:function(t){var r=t.routes[t.index],i=r.routeName;return n[i]?n[i].getComponentForState(r):(0,l.default)(e,i)},getComponentForRouteName:function(t){return(0,l.default)(e,t)},getActionCreators:function(e,t){return(0,i.default)({},b(e,t),{pop:function(e,t){return a.pop((0,i.default)({n:e},t))},popToTop:function(e){return a.popToTop(e)},push:function(e,t,n){return a.push({routeName:e,params:t,action:n})},replace:function(t,n,r,i){return"string"==typeof t?a.replace({routeName:t,params:n,action:r,key:e.key,newKey:i}):((0,f.default)("object"==typeof t,"Must replaceWith an object or a string"),(0,f.default)(null==n,"Params must not be provided to .replace() when specifying an object"),(0,f.default)(null==r,"Child action must not be provided to .replace() when specifying an object"),(0,f.default)(null==i,"Child action must not be provided to .replace() when specifying an object"),a.replace(t))},reset:function(e,n){return a.reset({actions:e,index:null==n?e.length-1:n,key:t})},dismiss:function(){return o.back({key:t})}})},getStateForAction:function(e,t){if(!t)return S(e);var s,l=t.routes[t.index];if(g(e)||e.type===o.NAVIGATE){if(e.type===o.NAVIGATE){var c=t.routes.slice().reverse(),p=Array.isArray(c),h=0;for(c=p?c:c["function"==typeof Symbol&&"function"==typeof Symbol?Symbol.iterator:"@@iterator"]();;){var v;if(p){if(h>=c.length)break;v=c[h++]}else{if((h=c.next()).done)break;v=h.value}var y=v,b=n[y.routeName],_=e.routeName===y.routeName&&e.action?e.action:e;if(b){var w=b.getStateForAction(_,y);if(null===w||w!==y){var E=u.default.replaceAndPrune(t,w?w.key:y.key,w||y);return(0,i.default)({},E,{isTransitioning:t.index!==E.index?!0!==e.immediate:t.isTransitioning})}}}}}else{var T=n[l.routeName];if(T){var k=T.getStateForAction(e,l);if(null!==k&&k!==l)return u.default.replaceAt(t,l.key,k,e.type===o.SET_PARAMS)}}if(m(e)&&void 0!==n[e.routeName]){var x,P=n[e.routeName];(0,f.default)(e.type!==a.PUSH||null==e.key,"StackRouter does not support key on the push action");var C=t.routes.findIndex((function(t){return e.key?t.key===e.key:t.routeName===e.routeName}));if(e.type!==a.PUSH&&-1!==C){if(t.index===C&&!e.params)return null;var N=t.routes.slice(0,C+1);if(e.params){var R=t.routes[C];N[C]=(0,i.default)({},R,{params:(0,i.default)({},R.params,e.params)})}return(0,i.default)({},t,{isTransitioning:t.index!==C?!0!==e.immediate:t.isTransitioning,index:C,routes:N})}if(P){var A=e.action||o.init({params:O(e.routeName,e)});x=(0,i.default)({params:O(e.routeName,e)},P.getStateForAction(A),{routeName:e.routeName,key:e.key||(0,d.generateKey)()})}else x={params:O(e.routeName,e),routeName:e.routeName,key:e.key||(0,d.generateKey)()};return(0,i.default)({},u.default.push(t,x),{isTransitioning:!0!==e.immediate})}if(e.type===a.PUSH&&void 0===n[e.routeName])return t;if(m(e))for(var I=Object.keys(n),j=0;j<I.length;j++){var M=I[j],D=n[M];if(D){var L=D.getStateForAction(o.init()),F=D.getStateForAction(e,L),V=null;if(null===F?V=L:F!==L&&(V=F),V){var H=(0,i.default)({},V,{routeName:M,key:e.key||(0,d.generateKey)()});return(0,i.default)({},u.default.push(t,H),{isTransitioning:!0!==e.immediate})}}}if(e.type===a.POP_TO_TOP)return e.key&&t.key!==e.key?t:t.index>0?(0,i.default)({},t,{isTransitioning:!0!==e.immediate,index:0,routes:[t.routes[0]]}):t;if(e.type===a.REPLACE&&-1!==(s=void 0===e.key&&t.routes.length?t.routes.length-1:t.routes.findIndex((function(t){return t.key===e.key})))){var B=n[e.routeName],U={};if(B){var G=e.action||o.init({params:O(e.routeName,e)});U=B.getStateForAction(G)}var z=(0,r.default)(t.routes);return z[s]=(0,i.default)({params:O(e.routeName,e)},U,{routeName:e.routeName,key:e.newKey||(0,d.generateKey)()}),(0,i.default)({},t,{routes:z})}if(e.type===a.COMPLETE_TRANSITION&&(null==e.key||e.key===t.key)&&e.toChildKey===t.routes[t.index].key&&t.isTransitioning)return(0,i.default)({},t,{isTransitioning:!1});if(e.type===o.SET_PARAMS){var W=e.key,X=t.routes.find((function(e){return e.key===W}));if(X){var Y=(0,i.default)({},X.params,e.params),K=(0,r.default)(t.routes);return K[t.routes.indexOf(X)]=(0,i.default)({},X,{params:Y}),(0,i.default)({},t,{routes:K})}}if(e.type===a.RESET){if(null!=e.key&&e.key!=t.key)return t;var q=e.actions;return(0,i.default)({},t,{routes:q.map((function(e){var t=n[e.routeName],r={};if(t){var a=e.action||o.init({params:O(e.routeName,e)});r=t.getStateForAction(a)}return(0,i.default)({params:O(e.routeName,e)},r,{routeName:e.routeName,key:e.key||(0,d.generateKey)()})})),index:e.index})}if(e.type===o.BACK||e.type===a.POP){var $=e.key,Q=e.n,J=e.immediate,Z=t.index;if(e.type===a.POP&&null!=Q)Z=Math.max(1,t.index-Q+1);else if($){var ee=t.routes.find((function(e){return e.key===$}));Z=t.routes.indexOf(ee)}if(Z>0)return(0,i.default)({},t,{routes:t.routes.slice(0,Z),index:Z-1,isTransitioning:!0!==J})}var te=e.key?u.default.indexOf(t,e.key):-1,ne=t.routes.slice().reverse(),re=Array.isArray(ne),ie=0;for(ne=re?ne:ne["function"==typeof Symbol&&"function"==typeof Symbol?Symbol.iterator:"@@iterator"]();;){var oe;if(re){if(ie>=ne.length)break;oe=ne[ie++]}else{if((ie=ne.next()).done)break;oe=ie.value}var ae=oe;if(ae.key!==l.key&&!(te>=0&&ae.key!==e.key)){var se=n[ae.routeName];if(se){var le=se.getStateForAction(e,ae);if(null===le)return t;if(le&&le!==ae)return u.default.replaceAt(t,ae.key,le,e.preserveFocus||e.type.includes("DRAWER"))}}}return t},getPathAndParamsForState:function(e){var t=e.routes[e.index];return T(t)},getActionForPathAndParams:function(e,t){return k(e,t)},getScreenOptions:(0,s.default)(e,t.defaultNavigationOptions)}}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t._TESTING_ONLY_normalize_keys=function(){n="id",r=0},t.generateKey=function(){return n+"-"+r++};var n="id-"+Date.now(),r=0},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(13)),i=a(n(89)),o=a(n(241));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};t=(0,r.default)({},t),t=(0,o.default)(t,"resetOnBlur",!1),t=(0,o.default)(t,"backBehavior","initialRoute");var n=(0,i.default)(e,t);return n}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){return e.hasOwnProperty(t)&&void 0!==e[t]?e:(e[t]=n,e)}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"light",r=e.state,i=e.router,o=e.getChildNavigation,a=r.routes[r.index],s=o(a.key),l=i.getScreenOptions(s,t,n);return l}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(15)),i=c(n(16)),o=c(n(17)),a=c(n(18)),s=c(n(19)),l=c(n(1)),u=c(n(94));function c(e){return e&&e.__esModule?e:{default:e}}var f={willFocus:"onWillFocus",didFocus:"onDidFocus",willBlur:"onWillBlur",didBlur:"onDidBlur"},d=Object.keys(f),p=function(e){function t(){var e,n;(0,r.default)(this,t);for(var i=arguments.length,s=new Array(i),l=0;l<i;l++)s[l]=arguments[l];return(n=(0,o.default)(this,(e=(0,a.default)(t)).call.apply(e,[this].concat(s)))).getPropListener=function(e){return n.props[f[e]]},n}return(0,s.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){var e=this;this.subscriptions={},d.forEach((function(t){e.subscriptions[t]=e.props.navigation.addListener(t,(function(){var n=e.getPropListener(t);return n&&n.apply(void 0,arguments)}))}))}},{key:"componentWillUnmount",value:function(){var e=this;d.forEach((function(t){e.subscriptions[t].remove()}))}},{key:"render",value:function(){return null}}]),t}(l.default.Component);t.default=(0,u.default)(p)},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=function(t){function n(e){var t;return(0,i.default)(this,n),(t=(0,a.default)(this,(0,s.default)(n).call(this,e))).subscriptions=[e.navigation.addListener("didFocus",(function(){return t.setState({isFocused:!0})})),e.navigation.addListener("willBlur",(function(){return t.setState({isFocused:!1})}))],t.state={isFocused:!!e.navigation&&e.navigation.isFocused()},t}return(0,l.default)(n,t),(0,o.default)(n,[{key:"componentWillUnmount",value:function(){this.subscriptions.forEach((function(e){return e.remove()}))}},{key:"render",value:function(){return u.default.createElement(e,(0,r.default)({},this.props,{isFocused:this.state.isFocused,ref:this.props.onRef,__source:{fileName:"/Users/satya/Workspace/Callstack/react-navigation-core/src/views/withNavigationFocus.js",lineNumber:33}}))}}]),n}(u.default.Component);return t.displayName="withNavigationFocus("+(e.displayName||e.name)+")",(0,c.default)((0,f.default)(t,{forwardRef:!1}),e)};var r=d(n(31)),i=d(n(15)),o=d(n(16)),a=d(n(17)),s=d(n(18)),l=d(n(19)),u=d(n(1)),c=d(n(131)),f=d(n(94));function d(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/@react-navigation/native/dist/createAppContainer.js",o=function(e,t){if(Array.isArray(e))return e;if(("function"==typeof Symbol?Symbol.iterator:"@@iterator")in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e["function"==typeof Symbol?Symbol.iterator:"@@iterator"]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t._TESTING_ONLY_reset_container_count=function(){g=0},t.default=function(t){var n=function(n){function h(e){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(h.__proto__||Object.getPrototypeOf(h)).call(this,e));return r.subs=null,r._actionEventSubscribers=new Set,r._handleOpenURL=function(e){var n=e.url,i=r.props,o=i.enableURLHandling,a=i.uriPrefix;if(!1!==o){var s=v(n,a);if(s){var l=s.path,u=s.params,c=t.router.getActionForPathAndParams(l,u);c&&r.dispatch(c)}}},r._persistNavigationState=function(e){var t;return regeneratorRuntime.async((function(n){for(;;)switch(n.prev=n.next){case 0:if(!(t=r.props.persistNavigationState)){n.next=10;break}return n.prev=2,n.next=5,regeneratorRuntime.awrap(t(e));case 5:n.next=10;break;case 7:n.prev=7,n.t0=n.catch(2),console.warn("Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.");case 10:case"end":return n.stop()}}),null,n,[[2,7]])},r.dispatch=function(e){if(r.props.navigation)return r.props.navigation.dispatch(e);r._navState=r._navState||r.state.nav;var n=r._navState;(0,d.default)(n,"should be set in constructor if stateful");var i=t.router.getStateForAction(e,n),o=null===i?n:i,a=function(){r._actionEventSubscribers.forEach((function(t){return t({type:"action",action:e,state:o,lastState:n})}))};return null===i?(a(),!0):o!==n?(r._navState=o,r.setState({nav:o},(function(){r._onNavigationStateChange(n,o,e),a(),r._persistNavigationState(o)})),!0):(a(),!1)},r._getScreenProps=function(){return r.props.screenProps},r._getTheme=function(){return"light"===r.props.theme||"dark"===r.props.theme?r.props.theme:"no-preference"===r.props.theme?"light":(console.warn("Invalid theme provided: "+r.props.theme+". Only 'light' and 'dark' are supported. Falling back to 'light'"),"light")},y(e),r._initialAction=f.NavigationActions.init(),r._isStateful()&&c.default&&"function"==typeof c.default.addEventListener&&(r.subs=c.default.addEventListener("hardwareBackPress",(function(){if(r._isMounted)return r.dispatch(f.NavigationActions.back());r.subs&&r.subs.remove()}))),r.state={nav:r._isStateful()&&!e.loadNavigationState?t.router.getStateForAction(r._initialAction):null},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(h,n),a(h,null,[{key:"getDerivedStateFromProps",value:function(e){return y(e),null}}]),a(h,[{key:"_renderLoading",value:function(){return this.props.renderLoadingExperimental?this.props.renderLoadingExperimental():null}},{key:"_isStateful",value:function(){return m(this.props)}},{key:"_onNavigationStateChange",value:function(t,n,r){void 0===this.props.onNavigationStateChange&&this._isStateful()&&e.env.REACT_NAV_LOGGING?console.group?(console.group("Navigation Dispatch: "),console.log("Action: ",r),console.log("New State: ",n),console.log("Last State: ",t),console.groupEnd()):console.log("Navigation Dispatch: ",{action:r,newState:n,lastState:t}):"function"==typeof this.props.onNavigationStateChange&&this.props.onNavigationStateChange(t,n,r)}},{key:"componentDidUpdate",value:function(){this._navState===this.state.nav&&(this._navState=null)}},{key:"componentDidMount",value:function(){var n,r,i,o,a,s,c,f,d,h,v=this;return regeneratorRuntime.async((function(m){for(;;)switch(m.prev=m.next){case 0:if(this._isMounted=!0,this._isStateful()){m.next=3;break}return m.abrupt("return");case 3:if(this.props.detached||g>0&&"ios"===u.default.OS&&console.warn("You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: "+(0,p.default)("common-mistakes.html#explicitly-rendering-more-than-one-navigator")),g++,l.default.addEventListener("url",this._handleOpenURL),n=null,r=null,!1===this.props.enableURLHandling){m.next=14;break}return m.next=11,regeneratorRuntime.awrap(this.getStartupParams());case 11:i=m.sent,n=i.parsedUrl,r=i.userProvidedStartupState;case 14:if(o=this._initialAction,(a=this.state.nav)||r||(e.env.REACT_NAV_LOGGING&&console.log("Init new Navigation State"),a=t.router.getStateForAction(o)),r&&(a=r,b=!0),n&&(c=(s=n).path,f=s.params,(d=t.router.getActionForPathAndParams(c,f))&&(e.env.REACT_NAV_LOGGING&&console.log("Applying Navigation Action for Initial URL:",n),o=d,a=t.router.getStateForAction(d,a))),h=function(){return v._actionEventSubscribers.forEach((function(e){return e({type:"action",action:o,state:v.state.nav,lastState:null})}))},a!==this.state.nav){m.next=23;break}return h(),m.abrupt("return");case 23:this.setState({nav:a},(function(){b=!1,h()}));case 24:case"end":return m.stop()}}),null,this)}},{key:"getStartupParams",value:function(){var e,t,n,r,i,a,s;return regeneratorRuntime.async((function(u){for(;;)switch(u.prev=u.next){case 0:return e=this.props,t=e.uriPrefix,n=e.loadNavigationState,r=void 0,i=void 0,u.prev=2,u.next=5,regeneratorRuntime.awrap(Promise.all([l.default.getInitialURL(),n&&n()]));case 5:a=u.sent,s=o(a,2),r=s[0],i=s[1],u.next=13;break;case 11:u.prev=11,u.t0=u.catch(2);case 13:return u.abrupt("return",{parsedUrl:r&&v(r,t),userProvidedStartupState:i});case 14:case"end":return u.stop()}}),null,this,[[2,11]])}},{key:"componentDidCatch",value:function(e){if(!b)throw e;b=!1,console.warn("Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state..."),this.dispatch(f.NavigationActions.init())}},{key:"componentWillUnmount",value:function(){this._isMounted=!1,l.default.removeEventListener("url",this._handleOpenURL),this.subs&&this.subs.remove(),this._isStateful()&&g--}},{key:"render",value:function(){var e=this,n=this.props.navigation;if(this._isStateful()){var o=this.state.nav;if(!o)return this._renderLoading();this._navigation&&this._navigation.state===o||(this._navigation=(0,f.getNavigation)(t.router,o,this.dispatch,this._actionEventSubscribers,this._getScreenProps,(function(){return e._navigation}))),n=this._navigation}return(0,d.default)(n,"failed to get navigation"),s.default.createElement(f.ThemeProvider,{value:this._getTheme(),__source:{fileName:i,lineNumber:349}},s.default.createElement(f.NavigationProvider,{value:n,__source:{fileName:i,lineNumber:350}},s.default.createElement(t,r({},this.props,{navigation:n,__source:{fileName:i,lineNumber:351}}))))}}]),h}(s.default.Component);return n.router=t.router,n.navigationOptions=null,n.defaultProps={theme:"light"},n};var s=h(n(1)),l=h(n(246)),u=h(n(8)),c=h(n(117)),f=n(49),d=h(n(133)),p=h(n(247));function h(e){return e&&e.__esModule?e:{default:e}}var v=f.pathUtils.urlToPathAndParams;function m(e){return!e.navigation}function y(e){if(e.persistenceKey&&console.warn("You passed persistenceKey prop to a navigator. The persistenceKey prop was replaced by a more flexible persistence mechanism, please see the navigation state persistence docs for more information. Passing the persistenceKey prop is a no-op."),!m(e)){e.navigation,e.screenProps;var t=e.persistNavigationState,n=e.loadNavigationState,r=(e.theme,function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["navigation","screenProps","persistNavigationState","loadNavigationState","theme"])),i=Object.keys(r);if(0!==i.length)throw new Error('This navigator has both navigation and container props, so it is unclear if it should own its own state. Remove props: "'+i.join(", ")+'" if the navigator should get its state from the navigation prop. If the navigator should maintain its own state, do not pass a navigation prop.');(0,d.default)(void 0===t&&void 0===n||"function"==typeof t&&"function"==typeof n,"both persistNavigationState and loadNavigationState must either be undefined, or be functions")}}var g=0;var b=!1}).call(this,n(88))},function(e,t,n){"use strict";n.r(t);var r=n(9),i=n(2),o=n.n(i),a=r.canUseDOM?window.location.href:"",s={addEventListener:function(){},removeEventListener:function(){},canOpenURL:function(){return Promise.resolve(!0)},getInitialURL:function(){return Promise.resolve(a)},openURL:function(e){try{return l(e),Promise.resolve()}catch(e){return Promise.reject(e)}},_validateURL:function(e){o()("string"==typeof e,"Invalid URL: should be a string. Was: "+e),o()(e,"Invalid URL: cannot be empty")}},l=function(e){r.canUseDOM&&(window.location=new URL(e,window.location).toString())};t.default=s},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"https://reactnavigation.org/docs/"+e}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(1)),a=s(n(95));function s(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}t.default=function(e,t){var n,s;return s=n=function(n){function s(){var e,n,r;l(this,s);for(var i=arguments.length,o=Array(i),c=0;c<i;c++)o[c]=arguments[c];return n=r=u(this,(e=s.__proto__||Object.getPrototypeOf(s)).call.apply(e,[this].concat(o))),r._previouslyFocusedTextInput=null,r._handleGestureBegin=function(){r._previouslyFocusedTextInput=a.default.State.currentlyFocusedField(),r._previouslyFocusedTextInput&&a.default.State.blurTextInput(r._previouslyFocusedTextInput),r.props.onGestureBegin&&r.props.onGestureBegin()},r._handleGestureCanceled=function(){r._previouslyFocusedTextInput&&a.default.State.focusTextInput(r._previouslyFocusedTextInput),r.props.onGestureCanceled&&r.props.onGestureCanceled()},r._handleGestureEnd=function(){r._previouslyFocusedTextInput=null,r.props.onGestureFinish&&r.props.onGestureFinish()},r._handleTransitionStart=function(e,n){if(e.index!==n.index){var i=a.default.State.currentlyFocusedField();i&&a.default.State.blurTextInput(i)}var o=r.props.onTransitionStart||t.onTransitionStart;o&&o(e,n)},u(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,n),i(s,[{key:"render",value:function(){return o.default.createElement(e,r({},this.props,{onGestureBegin:this._handleGestureBegin,onGestureCanceled:this._handleGestureCanceled,onGestureEnd:this._handleGestureEnd,onTransitionStart:this._handleTransitionStart,__source:{fileName:"/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/@react-navigation/native/dist/createKeyboardAwareNavigator.js",lineNumber:10}}))}}]),s}(o.default.Component),n.router=e.router,n.navigationOptions=e.navigationOptions,s}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.isOrientationLandscape=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.default=function(e){var t=function(t){function s(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(s.__proto__||Object.getPrototypeOf(s)).call(this));n.call(e);var t=u(a.default.get("window"));return e.state={isLandscape:t},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,t),i(s,[{key:"componentDidMount",value:function(){a.default.addEventListener("change",this.handleOrientationChange)}},{key:"componentWillUnmount",value:function(){a.default.removeEventListener("change",this.handleOrientationChange)}},{key:"render",value:function(){return o.default.createElement(e,r({},this.props,this.state,{__source:{fileName:"/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/@react-navigation/native/dist/withOrientation.js",lineNumber:30}}))}}]),s}(o.default.Component),n=function(){var e=this;this.handleOrientationChange=function(t){var n=t.window,r=u(n);e.setState({isLandscape:r})}};return(0,s.default)(t,e)};var o=l(n(1)),a=l(n(62)),s=l(n(135));function l(e){return e&&e.__esModule?e:{default:e}}var u=t.isOrientationLandscape=function(e){return e.width>e.height}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/@react-navigation/native/dist/ResourceSavingSceneView.js",o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=f(n(1)),s=f(n(8)),l=f(n(4)),u=f(n(3)),c=n(49);function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n._mustAlwaysBeVisible=function(){return n.props.animationEnabled||n.props.swipeEnabled},n.state={awake:!e.lazy||e.isFocused},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,null,[{key:"getDerivedStateFromProps",value:function(e,t){return e.isFocused&&!t.awake?{awake:!0}:null}}]),o(t,[{key:"render",value:function(){var e=this.state.awake,t=this.props,n=t.isFocused,o=t.childNavigation,l=t.removeClippedSubviews,f=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["isFocused","childNavigation","removeClippedSubviews"]);return a.default.createElement(u.default,{style:p.container,collapsable:!1,removeClippedSubviews:"android"===s.default.OS?l:!n&&l,__source:{fileName:i,lineNumber:33}},a.default.createElement(u.default,{style:this._mustAlwaysBeVisible()||n?p.innerAttached:p.innerDetached,__source:{fileName:i,lineNumber:34}},e?a.default.createElement(c.SceneView,r({},f,{navigation:o,__source:{fileName:i,lineNumber:35}})):null))}}]),t}(a.default.PureComponent),p=l.default.create({container:{flex:1,overflow:"hidden"},innerAttached:{flex:1},innerDetached:{flex:1,top:3e3}});t.default=d},function(e,t,n){"use strict";n.r(t);n(1);var r=n(3);t.default=r.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/react-native-gesture-handler/Swipeable.js",o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),s=p(a),l=p(n(28)),u=p(n(4)),c=p(n(3)),f=p(n(21)),d=n(78);function p(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));v.call(n);var r=new l.default.Value(0);return n.state={dragX:r,rowTranslation:new l.default.Value(0),rowState:0,leftWidth:void 0,rightOffset:void 0,rowWidth:void 0},n._updateAnimatedEvent(e,n.state),n._onGestureEvent=l.default.event([{nativeEvent:{translationX:r}}],{useNativeDriver:e.useNativeAnimations}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"UNSAFE_componentWillUpdate",value:function(e,t){this.props.friction===e.friction&&this.props.overshootLeft===e.overshootLeft&&this.props.overshootRight===e.overshootRight&&this.props.overshootFriction===e.overshootFriction&&this.state.leftWidth===t.leftWidth&&this.state.rightOffset===t.rightOffset&&this.state.rowWidth===t.rowWidth||this._updateAnimatedEvent(e,t)}},{key:"render",value:function(){var e=this,t=this.state.rowState,n=this.props,o=n.children,a=n.renderLeftActions,u=n.renderRightActions,f=a&&s.default.createElement(l.default.View,{style:[m.leftActions,{transform:[{translateX:this._leftActionTranslate}]}],__source:{fileName:i,lineNumber:283}},a(this._showLeftAction,this._transX),s.default.createElement(c.default,{onLayout:function(t){var n=t.nativeEvent;return e.setState({leftWidth:n.layout.x})},__source:{fileName:i,lineNumber:289}})),p=u&&s.default.createElement(l.default.View,{style:[m.rightActions,{transform:[{translateX:this._rightActionTranslate}]}],__source:{fileName:i,lineNumber:298}},u(this._showRightAction,this._transX),s.default.createElement(c.default,{onLayout:function(t){var n=t.nativeEvent;return e.setState({rightOffset:n.layout.x})},__source:{fileName:i,lineNumber:304}}));return s.default.createElement(d.PanGestureHandler,r({activeOffsetX:[-10,10]},this.props,{onGestureEvent:this._onGestureEvent,onHandlerStateChange:this._onHandlerStateChange,__source:{fileName:i,lineNumber:313}}),s.default.createElement(l.default.View,{onLayout:this._onRowLayout,style:[m.container,this.props.containerStyle],__source:{fileName:i,lineNumber:318}},f,p,s.default.createElement(d.TapGestureHandler,{enabled:0!==t,onHandlerStateChange:this._onTapHandlerStateChange,__source:{fileName:i,lineNumber:323}},s.default.createElement(l.default.View,{pointerEvents:0===t?"auto":"box-only",style:[{transform:[{translateX:this._transX}]},this.props.childrenContainerStyle],__source:{fileName:i,lineNumber:326}},o))))}}]),t}(a.Component);h.defaultProps={friction:1,overshootFriction:1,useNativeAnimations:!0};var v=function(){var e=this;this._updateAnimatedEvent=function(t,n){var r=t.friction,i=t.overshootFriction,o=(t.useNativeAnimations,n.dragX),a=n.rowTranslation,s=n.leftWidth,u=void 0===s?0:s,c=n.rowWidth,f=void 0===c?0:c,d=n.rightOffset,p=void 0===d?f:d,h=Math.max(0,f-p),v=t.overshootLeft,m=void 0===v?u>0:v,y=t.overshootRight,g=void 0===y?h>0:y,b=l.default.add(a,o.interpolate({inputRange:[0,r],outputRange:[0,1]})).interpolate({inputRange:[-h-(g?1:i),-h,u,u+(m?1:i)],outputRange:[-h-(g||i>1?1:0),-h,u,u+(m||i>1?1:0)]});e._transX=b,e._showLeftAction=u>0?b.interpolate({inputRange:[-1,0,u],outputRange:[0,0,1]}):new l.default.Value(0),e._leftActionTranslate=e._showLeftAction.interpolate({inputRange:[0,Number.MIN_VALUE],outputRange:[-1e4,0],extrapolate:"clamp"}),e._showRightAction=h>0?b.interpolate({inputRange:[-h,0,1],outputRange:[1,0,0]}):new l.default.Value(0),e._rightActionTranslate=e._showRightAction.interpolate({inputRange:[0,Number.MIN_VALUE],outputRange:[-1e4,0],extrapolate:"clamp"})},this._onTapHandlerStateChange=function(t){t.nativeEvent.oldState===d.State.ACTIVE&&e.close()},this._onHandlerStateChange=function(t){var n=t.nativeEvent;n.oldState===d.State.ACTIVE&&e._handleRelease(n)},this._handleRelease=function(t){var n=t.velocityX,r=t.translationX,i=e.state,o=i.leftWidth,a=void 0===o?0:o,s=i.rowWidth,l=void 0===s?0:s,u=i.rowState,c=e.state.rightOffset,f=l-(void 0===c?l:c),d=e.props,p=d.friction,h=d.leftThreshold,v=void 0===h?a/2:h,m=d.rightThreshold,y=void 0===m?f/2:m,g=e._currentOffset()+r/p,b=(r+.05*n)/p,_=0;0===u?b>v?_=a:b<-y&&(_=-f):1===u?b>-v&&(_=a):b<y&&(_=-f),e._animateRow(g,_,n/p)},this._animateRow=function(t,n,i){var o=e.state,a=o.dragX,s=o.rowTranslation;a.setValue(0),s.setValue(t),e.setState({rowState:Math.sign(n)}),l.default.spring(s,r({restSpeedThreshold:1.7,restDisplacementThreshold:.4,velocity:i,bounciness:0,toValue:n,useNativeDriver:e.props.useNativeAnimations},e.props.animationOptions)).start((function(t){t.finished&&(n>0&&e.props.onSwipeableLeftOpen?e.props.onSwipeableLeftOpen():n<0&&e.props.onSwipeableRightOpen&&e.props.onSwipeableRightOpen(),0===n?e.props.onSwipeableClose&&e.props.onSwipeableClose():e.props.onSwipeableOpen&&e.props.onSwipeableOpen())})),n>0&&e.props.onSwipeableLeftWillOpen?e.props.onSwipeableLeftWillOpen():n<0&&e.props.onSwipeableRightWillOpen&&e.props.onSwipeableRightWillOpen(),0===n?e.props.onSwipeableWillClose&&e.props.onSwipeableWillClose():e.props.onSwipeableWillOpen&&e.props.onSwipeableWillOpen()},this._onRowLayout=function(t){var n=t.nativeEvent;e.setState({rowWidth:n.layout.width})},this._currentOffset=function(){var t=e.state,n=t.leftWidth,r=void 0===n?0:n,i=t.rowWidth,o=void 0===i?0:i,a=t.rowState,s=e.state.rightOffset;return 1===a?r:-1===a?-(o-(void 0===s?o:s)):0},this.close=function(){e._animateRow(e._currentOffset(),0)},this.openLeft=function(){var t=e.state.leftWidth,n=void 0===t?0:t;e._animateRow(e._currentOffset(),n)},this.openRight=function(){var t=e.state.rowWidth,n=void 0===t?0:t,r=e.state.rightOffset,i=n-(void 0===r?n:r);e._animateRow(e._currentOffset(),-i)}};t.default=h;var m=u.default.create({container:{overflow:"hidden"},leftActions:r({},u.default.absoluteFillObject,{flexDirection:f.default.isRTL?"row-reverse":"row"}),rightActions:r({},u.default.absoluteFillObject,{flexDirection:f.default.isRTL?"row":"row-reverse"})})},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,i,o,a,s,l=1,u={},c=!1,f=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick((function(){h(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){h(e.data)},r=function(e){o.port2.postMessage(e)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,r=function(e){var t=f.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):r=function(e){setTimeout(h,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&h(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),r=function(t){e.postMessage(a+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return u[l]=i,r(l),l++},d.clearImmediate=p}function p(e){delete u[e]}function h(e){if(c)setTimeout(h,0,e);else{var t=u[e];if(t){c=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{p(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(48),n(88))},function(e,t,n){"use strict";var r=[],i=[];e.exports=
/**
 * Checks if two values are equal. Values may be primitives, arrays, or objects.
 * Returns true if both arguments have the same keys and values.
 *
 * @see http://underscorejs.org
 * @copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
 * @license MIT
 */
function(e,t){var n=r.length?r.pop():[],o=i.length?i.pop():[],a=function e(t,n,r,i){if(t===n)return 0!==t||1/t==1/n;if(null==t||null==n)return!1;if("object"!=typeof t||"object"!=typeof n)return!1;var o=Object.prototype.toString,a=o.call(t);if(a!=o.call(n))return!1;switch(a){case"[object String]":return t==String(n);case"[object Number]":return!isNaN(t)&&!isNaN(n)&&t==Number(n);case"[object Date]":case"[object Boolean]":return+t==+n;case"[object RegExp]":return t.source==n.source&&t.global==n.global&&t.multiline==n.multiline&&t.ignoreCase==n.ignoreCase}var s=r.length;for(;s--;)if(r[s]==t)return i[s]==n;r.push(t),i.push(n);var l=0;if("[object Array]"===a){if((l=t.length)!==n.length)return!1;for(;l--;)if(!e(t[l],n[l],r,i))return!1}else{if(t.constructor!==n.constructor)return!1;if(t.hasOwnProperty("valueOf")&&n.hasOwnProperty("valueOf"))return t.valueOf()==n.valueOf();var u=Object.keys(t);if(u.length!=Object.keys(n).length)return!1;for(var c=0;c<u.length;c++)if(!e(t[u[c]],n[u[c]],r,i))return!1}return r.pop(),i.pop(),!0}(e,t,n,o);return n.length=0,o.length=0,r.push(n),i.push(o),a}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},a=f(n(37)),s=n(50),l=n(256),u=f(n(140)),c=n(44);function f(e){return e&&e.__esModule?e:{default:e}}function d(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=function(e){function t(){return p(this,t),h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"onGestureActivated",value:function(e){this.sendEvent(r({},e,{eventType:a.default.INPUT_MOVE,isFinal:!1,isFirst:!0})),this.isGestureRunning=!1,this.hasGestureFailed=!1,this.sendEvent(r({},e,{eventType:a.default.INPUT_END,isFinal:!0}))}},{key:"onRawEvent",value:function(e){var n=this;if(o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"onRawEvent",this).call(this,e),!this.hasGestureFailed)if(e.isFinal)setTimeout((function(){n.isGestureRunning&&n.cancelEvent(e)}));else if(!this.hasGestureFailed&&!this.isGestureRunning){var r=this.hammer.get(this.name);r.options.enable(r,e)&&(this.onStart(e),this.sendEvent(e))}}},{key:"getHammerConfig",value:function(){return{pointers:this.config.numberOfPointers,direction:this.getDirection()}}},{key:"getTargetDirections",value:function(e){var t=[];return e&s.Direction.RIGHT&&t.push(a.default.DIRECTION_RIGHT),e&s.Direction.LEFT&&t.push(a.default.DIRECTION_LEFT),e&s.Direction.UP&&t.push(a.default.DIRECTION_UP),e&s.Direction.DOWN&&t.push(a.default.DIRECTION_DOWN),t}},{key:"getDirection",value:function(){var e=this.getConfig().direction,t=[];return e&s.Direction.RIGHT&&t.push(a.default.DIRECTION_HORIZONTAL),e&s.Direction.LEFT&&t.push(a.default.DIRECTION_HORIZONTAL),e&s.Direction.UP&&t.push(a.default.DIRECTION_VERTICAL),e&s.Direction.DOWN&&t.push(a.default.DIRECTION_VERTICAL),0===(t=[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(new Set(t)))).length?a.default.DIRECTION_NONE:1===t.length?t[0]:a.default.DIRECTION_ALL}},{key:"isGestureEnabledForEvent",value:function(e,t,n){e.minPointers,e.maxPointers;var r=e.numberOfPointers,i=(e.maxDist,e.maxDeltaX,e.maxDeltaY,e.maxDistSq,e.shouldCancelWhenOutside,n.maxPointers),o=(n.deltaX,n.deltaY,d(n,["maxPointers","deltaX","deltaY"]),i===r);return!o&&this.isGestureRunning?{failed:!0}:{success:o}}},{key:"updateGestureConfig",value:function(e){var n=e.numberOfPointers,i=void 0===n?1:n,a=e.direction,s=d(e,["numberOfPointers","direction"]);if((0,c.isnan)(a)||"number"!=typeof a)throw new l.GesturePropError("direction",a,"number");return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"updateGestureConfig",this).call(this,r({numberOfPointers:i,direction:a},s))}},{key:"name",get:function(){return"swipe"}},{key:"NativeGestureClass",get:function(){return a.default.Swipe}}]),t}(u.default);t.default=v},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.GesturePropError=function(e){function t(e,n,r){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"Invalid property `"+e+": "+n+"` expected `"+r+"`"))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,Error),t}()},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(37)),a=u(n(43)),s=u(n(141)),l=n(44);function u(e){return e&&e.__esModule?e:{default:e}}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var p=function(e){function t(){return f(this,t),d(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"updateHasCustomActivationCriteria",value:function(e){var t=e.maxDistSq;return!(0,l.isValidNumber)(t)}},{key:"getConfig",value:function(){return this._hasCustomActivationCriteria?this.config:{shouldCancelWhenOutside:!0,maxDistSq:10}}},{key:"getHammerConfig",value:function(){return r({},function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getHammerConfig",this).call(this),{time:this.minDurationMs})}},{key:"getState",value:function(e){var t;return(t={},c(t,o.default.INPUT_START,a.default.ACTIVE),c(t,o.default.INPUT_MOVE,a.default.ACTIVE),c(t,o.default.INPUT_END,a.default.END),c(t,o.default.INPUT_CANCEL,a.default.FAILED),t)[e]}},{key:"minDurationMs",get:function(){return(0,l.isnan)(this.config.minDurationMs)?251:this.config.minDurationMs}},{key:"maxDist",get:function(){return(0,l.isnan)(this.config.maxDist)?9:this.config.maxDist}}]),t}(s.default);t.default=p},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=l(n(101)),o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(100)),a=l(n(141)),s=n(44);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=function(e){function t(){return u(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"onRawEvent",value:function(e){var n=this;if(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"onRawEvent",this).call(this,e),!e.isFinal&&(0,s.TEST_MIN_IF_NOT_NAN)((0,s.VEC_LEN_SQ)({x:e.deltaX,y:e.deltaY}),10)&&this.config.disallowInterruption){var r=Object.values(o.getNodes()).filter((function(e){var t=e.handlerTag,r=e.view,o=e.isGestureRunning;return t!==n.handlerTag&&o&&e instanceof i.default&&r&&n.view.contains(r)})),a=Array.isArray(r),l=0;for(r=a?r:r["function"==typeof Symbol?Symbol.iterator:"@@iterator"]();;){var u;if(a){if(l>=r.length)break;u=r[l++]}else{if((l=r.next()).done)break;u=l.value}u.forceInvalidate(e)}}}}]),t}(a.default);t.default=f},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(37)),a=n(50),s=u(n(140)),l=n(44);function u(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return c(this,t),f(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"getHammerConfig",value:function(){return r({},function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getHammerConfig",this).call(this),{direction:this.getDirection()})}},{key:"getDirection",value:function(){var e=this.getConfig(),t=e.activeOffsetXStart,n=e.activeOffsetXEnd,r=e.activeOffsetYStart,i=e.activeOffsetYEnd,a=e.minDist,s=[],u=[];if(!(0,l.isnan)(a))return o.default.DIRECTION_ALL;(0,l.isnan)(t)||u.push(o.default.DIRECTION_LEFT),(0,l.isnan)(n)||u.push(o.default.DIRECTION_RIGHT),2===u.length&&(u=[o.default.DIRECTION_HORIZONTAL]),s=s.concat(u);var c=[];return(0,l.isnan)(r)||c.push(o.default.DIRECTION_UP),(0,l.isnan)(i)||c.push(o.default.DIRECTION_DOWN),2===c.length&&(c=[o.default.DIRECTION_VERTICAL]),(s=s.concat(c)).length?s[0]===o.default.DIRECTION_HORIZONTAL&&s[1]===o.default.DIRECTION_VERTICAL?o.default.DIRECTION_ALL:u.length&&c.length?o.default.DIRECTION_ALL:s[0]:o.default.DIRECTION_NONE}},{key:"getConfig",value:function(){return this._hasCustomActivationCriteria?this.config:{minDistSq:10}}},{key:"shouldFailUnderCustomCriteria",value:function(e,t){var n=e.deltaX,r=e.deltaY;return!(0,l.isnan)(t.failOffsetXStart)&&n<t.failOffsetXStart||!(0,l.isnan)(t.failOffsetXEnd)&&n>t.failOffsetXEnd||!(0,l.isnan)(t.failOffsetYStart)&&r<t.failOffsetYStart||!(0,l.isnan)(t.failOffsetYEnd)&&r>t.failOffsetYEnd}},{key:"shouldActivateUnderCustomCriteria",value:function(e,t){var n=e.deltaX,r=e.deltaY,i=e.velocity;return!(0,l.isnan)(t.activeOffsetXStart)&&n<t.activeOffsetXStart||!(0,l.isnan)(t.activeOffsetXEnd)&&n>t.activeOffsetXEnd||!(0,l.isnan)(t.activeOffsetYStart)&&r<t.activeOffsetYStart||!(0,l.isnan)(t.activeOffsetYEnd)&&r>t.activeOffsetYEnd||(0,l.TEST_MIN_IF_NOT_NAN)((0,l.VEC_LEN_SQ)({x:n,y:r}),t.minDistSq)||(0,l.TEST_MIN_IF_NOT_NAN)(i.x,t.minVelocityX)||(0,l.TEST_MIN_IF_NOT_NAN)(i.y,t.minVelocityY)||(0,l.TEST_MIN_IF_NOT_NAN)((0,l.VEC_LEN_SQ)(i),t.minVelocitySq)}},{key:"shouldMultiFingerPanFail",value:function(e){var t=e.pointerLength,n=e.scale,r=e.deltaRotation;if(t<=1)return!1;var i=Math.abs(n-1),o=Math.abs(r);return i>a.MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD||o>a.MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD}},{key:"updateHasCustomActivationCriteria",value:function(e){return(0,l.isValidNumber)(e.minDistSq)||(0,l.isValidNumber)(e.minVelocityX)||(0,l.isValidNumber)(e.minVelocityY)||(0,l.isValidNumber)(e.minVelocitySq)||(0,l.isValidNumber)(e.activeOffsetXStart)||(0,l.isValidNumber)(e.activeOffsetXEnd)||(0,l.isValidNumber)(e.activeOffsetYStart)||(0,l.isValidNumber)(e.activeOffsetYEnd)}},{key:"isGestureEnabledForEvent",value:function(e,t,n){if(this.shouldFailUnderCustomCriteria(n,e))return{failed:!0};var r={x:n.velocityX,y:n.velocityY};return this._hasCustomActivationCriteria&&this.shouldActivateUnderCustomCriteria({deltaX:n.deltaX,deltaY:n.deltaY,velocity:r},e)?this.shouldMultiFingerPanFail({pointerLength:n.maxPointers,scale:n.scale,deltaRotation:n.deltaRotation})?{failed:!0}:{success:!0}:{success:!1}}},{key:"name",get:function(){return"pan"}},{key:"NativeGestureClass",get:function(){return o.default.Pan}}]),t}(s.default);t.default=d},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=o(n(37));function o(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(){return a(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"transformNativeEvent",value:function(e){var t=e.scale,n=e.velocity,r=e.center;return{focalX:r.x,focalY:r.y,velocity:n,scale:t}}},{key:"name",get:function(){return"pinch"}},{key:"NativeGestureClass",get:function(){return i.default.Pinch}}]),t}(o(n(142)).default);t.default=l},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=a(n(37)),o=n(50);function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){return s(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"transformNativeEvent",value:function(e){var t=e.rotation,n=e.velocity,r=e.center;return{rotation:(t-this.initialRotation)*o.DEG_RAD,anchorX:r.x,anchorY:r.y,velocity:n}}},{key:"name",get:function(){return"rotate"}},{key:"NativeGestureClass",get:function(){return i.default.Rotate}}]),t}(a(n(142)).default);t.default=u},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},a=u(n(37)),s=u(n(101)),l=n(44);function u(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){var e,n,i;c(this,t);for(var o=arguments.length,s=Array(o),l=0;l<o;l++)s[l]=arguments[l];return n=i=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),i.onSuccessfulTap=function(e){i._getPendingGestures().length?i._shouldFireEndEvent=e:(e.eventType===a.default.INPUT_END&&i.sendEvent(r({},e,{eventType:a.default.INPUT_MOVE})),i.sendEvent(r({},e,{isFinal:!0})),i.onGestureEnded(e))},f(i,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"simulateCancelEvent",value:function(e){this.isGestureRunning&&this.cancelEvent(e)}},{key:"onGestureActivated",value:function(e){this.isGestureRunning&&this.onSuccessfulTap(e)}},{key:"onRawEvent",value:function(e){var n=this;if(o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"onRawEvent",this).call(this,e),!this.hasGestureFailed&&!this.isGestureRunning&&!e.isFinal){var r=this.hammer.get(this.name);r.options.enable(r,e)&&(clearTimeout(this._multiTapTimer),this.onStart(e),this.sendEvent(e))}if(e.isFinal&&e.maxPointers>1&&setTimeout((function(){n.isGestureRunning&&n.cancelEvent(e)})),!this.hasGestureFailed)if(e.isFinal)e.maxPointers>1&&setTimeout((function(){n.isGestureRunning&&n.cancelEvent(e)})),clearTimeout(this._timer),this._timer=setTimeout((function(){n.hasGestureFailed=!0,n.cancelEvent(e)}),this.maxDelayMs);else if(!this.hasGestureFailed&&!this.isGestureRunning){var i=this.hammer.get(this.name);i.options.enable(i,e)&&(clearTimeout(this._multiTapTimer),this.onStart(e),this.sendEvent(e))}}},{key:"getHammerConfig",value:function(){return r({},o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getHammerConfig",this).call(this),{event:this.name,taps:(0,l.isnan)(this.config.numberOfTaps)?1:this.config.numberOfTaps,interval:this.maxDelayMs,time:(0,l.isnan)(this.config.maxDurationMs)||null==this.config.maxDurationMs?250:this.config.maxDurationMs})}},{key:"updateGestureConfig",value:function(e){var n=e.shouldCancelWhenOutside,i=void 0===n||n,a=e.maxDeltaX,s=void 0===a?Number.NaN:a,l=e.maxDeltaY,u=void 0===l?Number.NaN:l,c=e.numberOfTaps,f=void 0===c?1:c,d=e.minDurationMs,p=void 0===d?525:d,h=e.maxDelayMs,v=void 0===h?Number.NaN:h,m=e.maxDurationMs,y=(void 0===m&&Number.NaN,e.maxDist),g=void 0===y?2:y,b=e.minPointers,_=void 0===b?1:b,w=e.maxPointers,S=void 0===w?1:w,O=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["shouldCancelWhenOutside","maxDeltaX","maxDeltaY","numberOfTaps","minDurationMs","maxDelayMs","maxDurationMs","maxDist","minPointers","maxPointers"]);return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"updateGestureConfig",this).call(this,r({shouldCancelWhenOutside:i,numberOfTaps:f,maxDeltaX:s,maxDeltaY:u,minDurationMs:p,maxDelayMs:v,maxDist:g,minPointers:_,maxPointers:S},O))}},{key:"onGestureEnded",value:function(){var e;clearTimeout(this._timer);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];(e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"onGestureEnded",this)).call.apply(e,[this].concat(r))}},{key:"onWaitingEnded",value:function(e){this._shouldFireEndEvent&&(this.onSuccessfulTap(this._shouldFireEndEvent),this._shouldFireEndEvent=null)}},{key:"name",get:function(){return"tap"}},{key:"NativeGestureClass",get:function(){return a.default.Tap}},{key:"maxDelayMs",get:function(){return(0,l.isnan)(this.config.maxDelayMs)?300:this.config.maxDelayMs}}]),t}(s.default);t.default=d},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(139),o=(r=i)&&r.__esModule?r:{default:r};t.default=o.default.Direction},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.PureNativeButton=t.BorderlessButton=t.RectButton=t.BaseButton=t.RawButton=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/react-native-gesture-handler/GestureButtons.js",o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(266);Object.defineProperty(t,"PureNativeButton",{enumerable:!0,get:function(){return m(a).default}});var s=m(n(0)),l=m(n(1)),u=m(n(28)),c=m(n(8)),f=m(n(107)),d=m(n(4)),p=m(n(98)),h=m(a),v=m(n(43));function m(e){return e&&e.__esModule?e:{default:e}}function y(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var w=t.RawButton=(0,p.default)(h.default,{shouldCancelWhenOutside:!1,shouldActivateOnStart:!1}),S=t.BaseButton=function(e){function t(e){g(this,t);var n=b(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._handleEvent=function(e){var t=e.nativeEvent,r=t.state,i=t.oldState,o=t.pointerInside&&r===v.default.ACTIVE;o!==n._lastActive&&n.props.onActiveStateChange&&n.props.onActiveStateChange(o),i===v.default.ACTIVE&&r!==v.default.CANCELLED&&n._lastActive&&n.props.onPress&&n.props.onPress(o),n._lastActive=o},n._onHandlerStateChange=function(e){n.props.onHandlerStateChange&&n.props.onHandlerStateChange(e),n._handleEvent(e)},n._onGestureEvent=function(e){n.props.onGestureEvent&&n.props.onGestureEvent(e),n._handleEvent(e)},n._lastActive=!1,n}return _(t,e),o(t,[{key:"render",value:function(){var e=this.props,t=e.style,n=e.rippleColor,o=y(e,["style","rippleColor"]);return l.default.createElement(w,r({style:[{overflow:"hidden"},t],rippleColor:(0,f.default)(n)},o,{onGestureEvent:this._onGestureEvent,onHandlerStateChange:this._onHandlerStateChange,__source:{fileName:i,lineNumber:66}}))}}]),t}(l.default.Component);S.propTypes=r({},w.propTypes,{onPress:s.default.func,onActiveStateChange:s.default.func});var O=u.default.createAnimatedComponent(S),E=d.default.create({underlay:{position:"absolute",left:0,right:0,bottom:0,top:0}}),T=t.RectButton=function(e){function t(e){g(this,t);var n=b(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._onActiveStateChange=function(e){"android"!==c.default.OS&&n._opacity.setValue(e?n.props.activeOpacity:0),n.props.onActiveStateChange&&n.props.onActiveStateChange(e)},n._opacity=new u.default.Value(0),n}return _(t,e),o(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=y(e,["children"]);return l.default.createElement(S,r({},n,{onActiveStateChange:this._onActiveStateChange,__source:{fileName:i,lineNumber:114}}),l.default.createElement(u.default.View,{style:[E.underlay,{opacity:this._opacity},{backgroundColor:this.props.underlayColor}],__source:{fileName:i,lineNumber:115}}),t)}}]),t}(l.default.Component);T.propTypes=S.propTypes,T.defaultProps={activeOpacity:.105,underlayColor:"black"};var k=t.BorderlessButton=function(e){function t(e){g(this,t);var n=b(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._onActiveStateChange=function(e){"android"!==c.default.OS&&n._opacity.setValue(e?n.props.activeOpacity:1),n.props.onActiveStateChange&&n.props.onActiveStateChange(e)},n._opacity=new u.default.Value(1),n}return _(t,e),o(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.style,o=y(e,["children","style"]);return l.default.createElement(O,r({},o,{onActiveStateChange:this._onActiveStateChange,style:[n,"ios"===c.default.OS&&{opacity:this._opacity}],__source:{fileName:i,lineNumber:156}}),t)}}]),t}(l.default.Component);k.propTypes=r({},S.propTypes,{borderless:s.default.bool}),k.defaultProps={activeOpacity:.3,borderless:!0}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=a(n(1)),o=a(n(3));function a(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.forwardRef((function(e,t){return i.default.createElement(o.default,r({ref:t,accessibilityRole:"button"},e,{__source:{fileName:"/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/react-native-gesture-handler/GestureHandlerButton.web.js",lineNumber:5}}))}))},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.FlatList=t.DrawerLayoutAndroid=t.ToolbarAndroid=t.TextInput=t.Switch=t.ScrollView=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/react-native-gesture-handler/GestureComponents.web.js",o=p(n(1)),a=p(n(268)),s=p(n(105)),l=p(n(269)),u=p(n(95)),c=p(n(270)),f=p(n(38)),d=p(n(98));function p(e){return e&&e.__esModule?e:{default:e}}var h=t.ScrollView=(0,d.default)(f.default,{disallowInterruption:!0});t.Switch=(0,d.default)(l.default,{shouldCancelWhenOutside:!1,shouldActivateOnStart:!0,disallowInterruption:!0}),t.TextInput=(0,d.default)(u.default),t.ToolbarAndroid=(0,d.default)(c.default);(t.DrawerLayoutAndroid=(0,d.default)(a.default,{disallowInterruption:!0})).positions=a.default.positions;t.FlatList=o.default.forwardRef((function(e,t){return o.default.createElement(s.default,r({ref:t},e,{renderScrollComponent:function(e){return o.default.createElement(h,r({},e,{__source:{fileName:i,lineNumber:33}}))},__source:{fileName:i,lineNumber:30}}))}))},function(e,t,n){"use strict";n.r(t);var r=n(29);t.default=r.a},function(e,t,n){"use strict";n.r(t);var r=n(26),i=n(32),o=n(56),a=n(4),s=n(12),l=n(3),u=n(1),c=n.n(u);n(0);function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){d(e,t,n[t])}))}return e}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var h=function(e){var t,n;function r(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this)._handleChange=function(e){var n=t.props.onValueChange;n&&n(e.nativeEvent.target.checked)},t._handleFocusState=function(e){var n="focus"===e.nativeEvent.type?"0px 1px 3px rgba(0,0,0,0.5), 0 0 0 10px rgba(0,0,0,0.1)":"0px 1px 3px rgba(0,0,0,0.5)";t._thumbElement&&t._thumbElement.setNativeProps({style:{boxShadow:n}})},t._setCheckboxRef=function(e){t._checkboxElement=e},t._setThumbRef=function(e){t._thumbElement=e},t}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var u=r.prototype;return u.blur=function(){s.a.blur(this._checkboxElement)},u.focus=function(){s.a.focus(this._checkboxElement)},u.render=function(){var e=this.props,t=e.accessibilityLabel,n=e.activeThumbColor,r=e.activeTrackColor,s=e.disabled,u=(e.onValueChange,e.style),f=e.thumbColor,d=e.trackColor,h=e.value,m=e.onTintColor,y=e.thumbTintColor,g=e.tintColor,b=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["accessibilityLabel","activeThumbColor","activeTrackColor","disabled","onValueChange","style","thumbColor","trackColor","value","onTintColor","thumbTintColor","tintColor"]),_=a.default.flatten(u),w=_.height,S=_.width,O=w||20,E=Object(o.a)(O,2),T=S>E?S:E,k=Object(o.a)(O,.5),x=h?m||r:g||d,P=h?n:y||f,C=O,N=C,R=[v.root,u,{height:O,width:T},s&&v.cursorDefault],A=[v.track,{backgroundColor:x,borderRadius:k},s&&v.disabledTrack],I=[v.thumb,{backgroundColor:P,height:C,width:N},s&&v.disabledThumb],j=Object(i.a)("input",{accessibilityLabel:t,checked:h,disabled:s,onBlur:this._handleFocusState,onChange:this._handleChange,onFocus:this._handleFocusState,ref:this._setCheckboxRef,style:[v.nativeControl,v.cursorInherit],type:"checkbox"});return c.a.createElement(l.default,p({},b,{style:R}),c.a.createElement(l.default,{style:A}),c.a.createElement(l.default,{ref:this._setThumbRef,style:[I,h&&v.thumbOn,{marginStart:h?Object(o.a)(N,-1):0}]}),j)},r}(u.Component);h.displayName="Switch",h.defaultProps={activeThumbColor:"#009688",activeTrackColor:"#A3D3CF",disabled:!1,style:{},thumbColor:"#FAFAFA",trackColor:"#939393",value:!1},h.propTypes={};var v=a.default.create({root:{cursor:"pointer",userSelect:"none"},cursorDefault:{cursor:"default"},cursorInherit:{cursor:"inherit"},track:f({},a.default.absoluteFillObject,{height:"70%",margin:"auto",transitionDuration:"0.1s",width:"100%"}),disabledTrack:{backgroundColor:"#D5D5D5"},thumb:{alignSelf:"flex-start",borderRadius:"100%",boxShadow:"0px 1px 3px rgba(0,0,0,0.5)",start:"0%",transform:[{translateZ:0}],transitionDuration:"0.1s"},thumbOn:{start:"100%"},disabledThumb:{backgroundColor:"#BDBDBD"},nativeControl:f({},a.default.absoluteFillObject,{height:"100%",margin:0,opacity:0,padding:0,width:"100%"})});t.default=Object(r.a)(h)},function(e,t,n){"use strict";n.r(t);var r=n(29);t.default=r.a},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.RotationGestureHandler=t.PinchGestureHandler=t.PanGestureHandler=t.LongPressGestureHandler=t.ForceTouchGestureHandler=t.FlingGestureHandler=t.TapGestureHandler=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=c(n(0)),a=c(n(1)),s=c(n(137)),l=c(n(143)),u=c(n(272));function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}t.TapGestureHandler=(0,s.default)("TapGestureHandler",i({},l.default,{maxDurationMs:o.default.number,maxDelayMs:o.default.number,numberOfTaps:o.default.number,maxDeltaX:o.default.number,maxDeltaY:o.default.number,maxDist:o.default.number,minPointers:o.default.number}),{}),t.FlingGestureHandler=(0,s.default)("FlingGestureHandler",i({},l.default,{numberOfPointers:o.default.number,direction:o.default.number}),{});var p=function(e){function t(){return f(this,t),d(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"componentDidMount",value:function(){console.warn("ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase")}},{key:"render",value:function(){return this.props.children}}]),t}(a.default.Component);(t.ForceTouchGestureHandler=u.default&&u.default.forceTouchAvailable?(0,s.default)("ForceTouchGestureHandler",i({},l.default,{minForce:o.default.number,maxForce:o.default.number,feedbackOnActivation:o.default.bool}),{}):p).forceTouchAvailable=u.default&&u.default.forceTouchAvailable||!1;t.LongPressGestureHandler=(0,s.default)("LongPressGestureHandler",i({},l.default,{minDurationMs:o.default.number,maxDist:o.default.number}),{});t.PanGestureHandler=(0,s.default)("PanGestureHandler",i({},l.default,{activeOffsetY:o.default.oneOfType([o.default.number,o.default.arrayOf(o.default.number)]),activeOffsetX:o.default.oneOfType([o.default.number,o.default.arrayOf(o.default.number)]),failOffsetY:o.default.oneOfType([o.default.number,o.default.arrayOf(o.default.number)]),failOffsetX:o.default.oneOfType([o.default.number,o.default.arrayOf(o.default.number)]),minDist:o.default.number,minVelocity:o.default.number,minVelocityX:o.default.number,minVelocityY:o.default.number,minPointers:o.default.number,maxPointers:o.default.number,avgTouches:o.default.bool}),{},(function(e){return function(e){if(e.minDeltaX&&e.activeOffsetX)throw new Error("It's not supported use minDeltaX with activeOffsetXStart or activeOffsetXEnd");if(e.maxDeltaX&&e.failOffsetX)throw new Error("It's not supported use minDeltaX with activeOffsetXStart or activeOffsetXEnd");if(e.minDeltaY&&e.activeOffsetY)throw new Error("It's not supported use minDeltaX with activeOffsetYStart or activeOffsetYEnd");if(e.maxDeltaY&&e.failOffsetY)throw new Error("It's not supported use minDeltaX with activeOffsetYStart or activeOffsetYEnd");if(Array.isArray(e.activeOffsetX)&&(e.activeOffsetX[0]>0||e.activeOffsetX[1]<0))throw new Error("First element of activeOffsetX should be negative, a the second one should be positive");if(Array.isArray(e.activeOffsetY)&&(e.activeOffsetY[0]>0||e.activeOffsetY[1]<0))throw new Error("First element of activeOffsetY should be negative, a the second one should be positive");if(Array.isArray(e.failOffsetX)&&(e.failOffsetX[0]>0||e.failOffsetX[1]<0))throw new Error("First element of failOffsetX should be negative, a the second one should be positive");if(Array.isArray(e.failOffsetY)&&(e.failOffsetY[0]>0||e.failOffsetY[1]<0))throw new Error("First element of failOffsetY should be negative, a the second one should be positive")}(e),function(e){var t=i({},e);return void 0!==e.minDeltaX&&(delete t.minDeltaX,t.activeOffsetXStart=-e.minDeltaX,t.activeOffsetXEnd=e.minDeltaX),void 0!==e.maxDeltaX&&(delete t.maxDeltaX,t.failOffsetXStart=-e.maxDeltaX,t.failOffsetXEnd=e.maxDeltaX),void 0!==e.minOffsetX&&(delete t.minOffsetX,e.minOffsetX<0?t.activeOffsetXStart=e.minOffsetX:t.activeOffsetXEnd=e.minOffsetX),void 0!==e.minDeltaY&&(delete t.minDeltaY,t.activeOffsetYStart=-e.minDeltaY,t.activeOffsetYEnd=e.minDeltaY),void 0!==e.maxDeltaY&&(delete t.maxDeltaY,t.failOffsetYStart=-e.maxDeltaY,t.failOffsetYEnd=e.maxDeltaY),void 0!==e.minOffsetY&&(delete t.minOffsetY,e.minOffsetY<0?t.activeOffsetYStart=e.minOffsetY:t.activeOffsetYEnd=e.minOffsetY),void 0!==e.activeOffsetX&&(delete t.activeOffsetX,Array.isArray(e.activeOffsetX)?(t.activeOffsetXStart=e.activeOffsetX[0],t.activeOffsetXEnd=e.activeOffsetX[1]):e.activeOffsetX<0?t.activeOffsetXStart=e.activeOffsetX:t.activeOffsetXEnd=e.activeOffsetX),void 0!==e.activeOffsetY&&(delete t.activeOffsetY,Array.isArray(e.activeOffsetY)?(t.activeOffsetYStart=e.activeOffsetY[0],t.activeOffsetYEnd=e.activeOffsetY[1]):e.activeOffsetY<0?t.activeOffsetYStart=e.activeOffsetY:t.activeOffsetYEnd=e.activeOffsetY),void 0!==e.failOffsetX&&(delete t.failOffsetX,Array.isArray(e.failOffsetX)?(t.failOffsetXStart=e.failOffsetX[0],t.failOffsetXEnd=e.failOffsetX[1]):e.failOffsetX<0?t.failOffsetXStart=e.failOffsetX:t.failOffsetXEnd=e.failOffsetX),void 0!==e.failOffsetY&&(delete t.failOffsetY,Array.isArray(e.failOffsetY)?(t.failOffsetYStart=e.failOffsetY[0],t.failOffsetYEnd=e.failOffsetY[1]):e.failOffsetY<0?t.failOffsetYStart=e.failOffsetY:t.failOffsetYEnd=e.failOffsetY),t}(e)}),{activeOffsetYStart:!0,activeOffsetYEnd:!0,activeOffsetXStart:!0,activeOffsetXEnd:!0,failOffsetYStart:!0,failOffsetYEnd:!0,failOffsetXStart:!0,failOffsetXEnd:!0}),t.PinchGestureHandler=(0,s.default)("PinchGestureHandler",l.default,{}),t.RotationGestureHandler=(0,s.default)("RotationGestureHandler",l.default,{})},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default={get forceTouchAvailable(){return!1}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/react-native-gesture-handler/DrawerLayout.js",o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),s=m(a),l=m(n(274)),u=m(n(28)),c=m(n(4)),f=m(n(3)),d=m(n(118)),p=m(n(144)),h=m(n(21)),v=n(78);function m(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));g.call(r);var i=new u.default.Value(0),o=new u.default.Value(0),a=new u.default.Value(0);return r.state={dragX:i,touchX:o,drawerTranslation:a,containerWidth:0},r._updateAnimatedEvent(e,r.state),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"UNSAFE_componentWillUpdate",value:function(e,t){this.props.drawerPosition===e.drawerPosition&&this.props.drawerWidth===e.drawerWidth&&this.props.drawerType===e.drawerType&&this.state.containerWidth===t.containerWidth||this._updateAnimatedEvent(e,t)}},{key:"render",value:function(){var e=this.props,t=e.drawerPosition,n=e.drawerLockMode,r=e.edgeWidth,o=e.minSwipeDistance,a="left"===t,l=(a?1:-1)*(this._drawerShown?-1:1),u=a?{left:0,width:this._drawerShown?void 0:r}:{right:0,width:this._drawerShown?void 0:r};return s.default.createElement(v.PanGestureHandler,{ref:this._setPanGestureRef,hitSlop:u,activeOffsetX:l*o,failOffsetY:[-15,15],onGestureEvent:this._onGestureEvent,onHandlerStateChange:this._openingHandlerStateChange,enabled:"locked-closed"!==n&&"locked-open"!==n,__source:{fileName:i,lineNumber:504}},this._renderDrawer())}}]),t}(a.Component);y.defaultProps={drawerWidth:200,drawerPosition:"left",useNativeAnimations:!0,drawerType:"front",edgeWidth:20,minSwipeDistance:3,overlayColor:"rgba(0, 0, 0, 0.7)",drawerLockMode:"unlocked"},y.positions={Left:"left",Right:"right"};var g=function(){var e=this;this._accessibilityIsModalView=s.default.createRef(),this._pointerEventsView=s.default.createRef(),this._panGestureHandler=s.default.createRef(),this._drawerShown=!1,this._updateAnimatedEvent=function(t,n){var r=t.drawerPosition,i=t.drawerWidth,o=t.drawerType,a=n.dragX,s=n.touchX,l=n.drawerTranslation,c=n.containerWidth,f=a,d=s;"left"!==r?(f=u.default.multiply(new u.default.Value(-1),a),d=u.default.add(new u.default.Value(c),u.default.multiply(new u.default.Value(-1),s)),s.setValue(c)):s.setValue(0);var p=f;if("front"===o){var h=u.default.add(d,u.default.multiply(new u.default.Value(-1),f)).interpolate({inputRange:[i-1,i,i+1],outputRange:[0,0,1]});p=u.default.add(f,h)}e._openValue=u.default.add(p,l).interpolate({inputRange:[0,i],outputRange:[0,1],extrapolate:"clamp"}),e._onGestureEvent=u.default.event([{nativeEvent:{translationX:a,x:s}}],{useNativeDriver:t.useNativeAnimations})},this._handleContainerLayout=function(t){var n=t.nativeEvent;e.setState({containerWidth:n.layout.width})},this._emitStateChanged=function(t,n){e.props.onDrawerStateChanged&&e.props.onDrawerStateChanged(t,n)},this._openingHandlerStateChange=function(t){var n=t.nativeEvent;n.oldState===v.State.ACTIVE?e._handleRelease(n):n.state===v.State.ACTIVE&&(e._emitStateChanged("Dragging",!1),"on-drag"===e.props.keyboardDismissMode&&d.default.dismiss(),e.props.hideStatusBar&&p.default.setHidden(!0,e.props.statusBarAnimation||"slide"))},this._onTapHandlerStateChange=function(t){var n=t.nativeEvent;e._drawerShown&&n.oldState===v.State.ACTIVE&&"locked-open"!==e.props.drawerLockMode&&e.closeDrawer()},this._handleRelease=function(t){var n=e.props,r=n.drawerWidth,i=n.drawerPosition,o=n.drawerType,a=e.state.containerWidth,s=t.translationX,l=t.velocityX,u=t.x;"left"!==i&&(s=-s,u=a-u,l=-l);var c=u-s,f=0;"front"===o&&(f=c>r?c-r:0);var d=s+f+(e._drawerShown?r:0);d+.05*l>r/2?e._animateDrawer(d,r,l):e._animateDrawer(d,0,l)},this._updateShowing=function(t){e._drawerShown=t,e._accessibilityIsModalView.current&&e._accessibilityIsModalView.current.setNativeProps({accessibilityViewIsModal:t}),e._pointerEventsView.current&&e._pointerEventsView.current.setNativeProps({pointerEvents:t?"auto":"none"});var n=e.props,r=n.drawerPosition,i=n.minSwipeDistance,o=n.edgeWidth,a="left"===r,s=(a?1:-1)*(e._drawerShown?-1:1),l=a?{left:0,width:t?void 0:o}:{right:0,width:t?void 0:o};e._panGestureHandler.current&&e._panGestureHandler.current.setNativeProps({hitSlop:l,activeOffsetX:s*i})},this._animateDrawer=function(t,n,r){if(e.state.dragX.setValue(0),e.state.touchX.setValue("left"===e.props.drawerPosition?0:e.state.containerWidth),null!=t){var i=t;e.props.useNativeAnimations&&(t<n&&r>0?i=Math.min(t+r/60,n):t>n&&r<0&&(i=Math.max(t+r/60,n))),e.state.drawerTranslation.setValue(i)}var o=0!==n;e._updateShowing(o),e._emitStateChanged("Settling",o),e.props.hideStatusBar&&p.default.setHidden(o,e.props.statusBarAnimation||"slide"),u.default.spring(e.state.drawerTranslation,{velocity:r,bounciness:0,toValue:n,useNativeDriver:e.props.useNativeAnimations}).start((function(t){t.finished&&(e._emitStateChanged("Idle",o),o?e.props.onDrawerOpen&&e.props.onDrawerOpen():e.props.onDrawerClose&&e.props.onDrawerClose())}))},this.openDrawer=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e._animateDrawer(void 0,e.props.drawerWidth,t.velocity?t.velocity:0),e.forceUpdate()},this.closeDrawer=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e._animateDrawer(void 0,0,t.velocity?t.velocity:0),e.forceUpdate()},this._renderOverlay=function(){(0,l.default)(e._openValue,"should be set");var t={opacity:e._openValue.interpolate({inputRange:[0,1],outputRange:[0,1],extrapolate:"clamp"}),backgroundColor:e.props.overlayColor};return s.default.createElement(v.TapGestureHandler,{onHandlerStateChange:e._onTapHandlerStateChange,__source:{fileName:i,lineNumber:381}},s.default.createElement(u.default.View,{pointerEvents:e._drawerShown?"auto":"none",ref:e._pointerEventsView,style:[b.overlay,t],__source:{fileName:i,lineNumber:382}}))},this._renderDrawer=function(){var t=e.props,n=t.drawerBackgroundColor,r=t.drawerWidth,o=t.drawerPosition,a=t.drawerType,c=t.drawerContainerStyle,d=t.contentContainerStyle,p="left"===o,v="back"!==a,m="front"!==a,y=h.default.isRTL?p:!p,g={backgroundColor:n,width:r},_=e._openValue;(0,l.default)(_,"should be set");var w=void 0;m&&(w={transform:[{translateX:_.interpolate({inputRange:[0,1],outputRange:p?[0,r]:[0,-r],extrapolate:"clamp"})}]});var S=0;if(v){var O=p?-r:r;S=_.interpolate({inputRange:[0,1],outputRange:[O,0],extrapolate:"clamp"})}var E={transform:[{translateX:S}],flexDirection:y?"row-reverse":"row"};return s.default.createElement(u.default.View,{style:b.main,onLayout:e._handleContainerLayout,__source:{fileName:i,lineNumber:445}},s.default.createElement(u.default.View,{style:["front"===a?b.containerOnBack:b.containerInFront,w,d],importantForAccessibility:e._drawerShown?"no-hide-descendants":"yes",__source:{fileName:i,lineNumber:446}},"function"==typeof e.props.children?e.props.children(e._openValue):e.props.children,e._renderOverlay()),s.default.createElement(u.default.View,{pointerEvents:"box-none",ref:e._accessibilityIsModalView,accessibilityViewIsModal:e._drawerShown,style:[b.drawerContainer,E,c],__source:{fileName:i,lineNumber:462}},s.default.createElement(f.default,{style:g,__source:{fileName:i,lineNumber:467}},e.props.renderNavigationView(e._openValue))))},this._setPanGestureRef=function(t){e._panGestureHandler.current=t,e.props.onGestureRef&&e.props.onGestureRef(t)}};t.default=y;var b=c.default.create({drawerContainer:r({},c.default.absoluteFillObject,{zIndex:1001,flexDirection:"row"}),containerInFront:r({},c.default.absoluteFillObject,{zIndex:1002}),containerOnBack:r({},c.default.absoluteFillObject),main:{flex:1,zIndex:0,overflow:"hidden"},overlay:r({},c.default.absoluteFillObject,{zIndex:1e3})})},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i,o,a,s){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,i,o,a,s],c=0;(l=new Error(t.replace(/%s/g,(function(){return u[c++]})))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(276);Object.defineProperty(t,"TouchableNativeFeedback",{enumerable:!0,get:function(){return s(r).default}});var i=n(277);Object.defineProperty(t,"TouchableWithoutFeedback",{enumerable:!0,get:function(){return s(i).default}});var o=n(278);Object.defineProperty(t,"TouchableOpacity",{enumerable:!0,get:function(){return s(o).default}});var a=n(279);function s(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"TouchableHighlight",{enumerable:!0,get:function(){return s(a).default}})},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(145),o=(r=i)&&r.__esModule?r:{default:r};t.default=o.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=a(n(1)),o=a(n(146));function a(e){return e&&e.__esModule?e:{default:e}}var s=i.default.forwardRef((function(e,t){return i.default.createElement(o.default,r({ref:t},e,{__source:{fileName:"/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/react-native-gesture-handler/touchables/TouchableWithoutFeedback.js",lineNumber:5}}))}));s.defaultProps=o.default.defaultProps,s.propTypes=o.default.publicPropTypes,t.default=s},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(40),o=(r=i)&&r.__esModule?r:{default:r};t.default=o.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/react-native-gesture-handler/touchables/TouchableHighlight.js",o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),s=p(a),l=n(146),u=p(l),c=p(n(4)),f=p(n(3)),d=p(n(0));function p(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.showUnderlay=function(){n.hasPressHandler()&&(n.setState({extraChildStyle:{opacity:n.props.activeOpacity},extraUnderlayStyle:{backgroundColor:n.props.underlayColor}}),n.props.onShowUnderlay&&n.props.onShowUnderlay())},n.hasPressHandler=function(){return n.props.onPress||n.props.onPressIn||n.props.onPressOut||n.props.onLongPress},n.hideUnderlay=function(){n.setState({extraChildStyle:null,extraUnderlayStyle:null}),n.props.onHideUnderlay&&n.props.onHideUnderlay()},n.onStateChange=function(e,t){t===l.TOUCHABLE_STATE.BEGAN?n.showUnderlay():t!==l.TOUCHABLE_STATE.UNDETERMINED&&t!==l.TOUCHABLE_STATE.MOVED_OUTSIDE||n.hideUnderlay()},n.state={extraChildStyle:null,extraUnderlayStyle:null},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"renderChildren",value:function(){if(!this.props.children)return s.default.createElement(f.default,{__source:{fileName:i,lineNumber:66}});var e=s.default.Children.only(this.props.children);return s.default.cloneElement(e,{style:c.default.compose(e.props.style,this.state.extraChildStyle)})}},{key:"render",value:function(){var e=this.props,t=e.style,n=void 0===t?{}:t,o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["style"]),a=this.state.extraUnderlayStyle;return s.default.createElement(u.default,r({},o,{style:[n,a],onStateChange:this.onStateChange,__source:{fileName:i,lineNumber:93}}),this.renderChildren())}}]),t}(a.Component);h.defaultProps=r({},u.default.defaultProps,{activeOpacity:.85,delayPressOut:100,underlayColor:"black"}),h.propTypes=r({},u.default.publicPropTypes,{activeOpacity:d.default.number,underlayColor:d.default.string,style:d.default.any,onShowUnderlay:d.default.func,onHideUnderlay:d.default.func}),t.default=h},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="/Users/srxboys/srxboys/github/RX_React_Native/react-native-rxsegment/node_modules/@react-navigation/native/dist/Themed.js",o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),s=f(n(144)),l=f(n(23)),u=f(n(95)),c=n(49);function f(e){return e&&e.__esModule?e:{default:e}}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var v=function(e){function t(){return d(this,t),p(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return h(t,e),o(t,[{key:"render",value:function(){return a.createElement(l.default,r({},this.props,{style:[{color:c.ThemeColors[this.context].label},this.props.style],__source:{fileName:i,lineNumber:9}}))}}]),t}(a.Component);v.contextType=c.ThemeContext;var m=function(e){function t(){return d(this,t),p(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return h(t,e),o(t,[{key:"render",value:function(){return a.createElement(u.default,r({},this.props,{placeholderTextColor:"dark"===this.context?"#ebebf54c":"#3c3c434c",style:[{color:c.ThemeColors[this.context].label},this.props.style],__source:{fileName:i,lineNumber:17}}))}}]),t}(a.Component);m.contextType=c.ThemeContext;var y=function(e){function t(){return d(this,t),p(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return h(t,e),o(t,[{key:"render",value:function(){var e=this.props,t=e.barStyle,n=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["barStyle"]);return a.createElement(s.default,r({barStyle:t||("dark"===this.context?"light-content":"default")},n,{__source:{fileName:i,lineNumber:27}}))}}]),t}(a.Component);y.contextType=c.ThemeContext,t.default={Text:v,StatusBar:y,TextInput:m}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.HeaderBackButtonProps=t.HeaderProps=t.NavigationStackScreenProps=t.NavigationStackScreenComponent=t.NavigationStackConfig=t.NavigationStackOptions=t.NavigationStackProp=t.NavigationStackState=t.StackGestureContext=t.ScenesReducer=t.Transitioner=t.createPointerEventsContainer=t.StackViewTransitionConfigs=t.StackViewStyleInterpolator=t.StackViewLayout=t.StackViewCard=t.StackView=t.HeaderStyleInterpolator=t.HeaderTitle=t.HeaderBackButton=t.Header=t.Assets=t.createStackNavigator=void 0;var r=n(282);Object.defineProperty(t,"createStackNavigator",{enumerable:!0,get:function(){return b(r).default}});var i=n(152);Object.defineProperty(t,"Header",{enumerable:!0,get:function(){return b(i).default}});var o=n(154);Object.defineProperty(t,"HeaderBackButton",{enumerable:!0,get:function(){return b(o).default}});var a=n(153);Object.defineProperty(t,"HeaderTitle",{enumerable:!0,get:function(){return b(a).default}});var s=n(103);Object.defineProperty(t,"HeaderStyleInterpolator",{enumerable:!0,get:function(){return b(s).default}});var l=n(147);Object.defineProperty(t,"StackView",{enumerable:!0,get:function(){return b(l).default}});var u=n(150);Object.defineProperty(t,"StackViewCard",{enumerable:!0,get:function(){return b(u).default}});var c=n(148);Object.defineProperty(t,"StackViewLayout",{enumerable:!0,get:function(){return b(c).default}});var f=n(159);Object.defineProperty(t,"StackViewStyleInterpolator",{enumerable:!0,get:function(){return b(f).default}});var d=n(104);Object.defineProperty(t,"StackViewTransitionConfigs",{enumerable:!0,get:function(){return b(d).default}});var p=n(151);Object.defineProperty(t,"createPointerEventsContainer",{enumerable:!0,get:function(){return b(p).default}});var h=n(162);Object.defineProperty(t,"Transitioner",{enumerable:!0,get:function(){return b(h).default}});var v=n(163);Object.defineProperty(t,"ScenesReducer",{enumerable:!0,get:function(){return b(v).default}});var m=n(161);Object.defineProperty(t,"StackGestureContext",{enumerable:!0,get:function(){return b(m).default}});var y=n(292);Object.defineProperty(t,"NavigationStackState",{enumerable:!0,get:function(){return y.NavigationStackState}}),Object.defineProperty(t,"NavigationStackProp",{enumerable:!0,get:function(){return y.NavigationStackProp}}),Object.defineProperty(t,"NavigationStackOptions",{enumerable:!0,get:function(){return y.NavigationStackOptions}}),Object.defineProperty(t,"NavigationStackConfig",{enumerable:!0,get:function(){return y.NavigationStackConfig}}),Object.defineProperty(t,"NavigationStackScreenComponent",{enumerable:!0,get:function(){return y.NavigationStackScreenComponent}}),Object.defineProperty(t,"NavigationStackScreenProps",{enumerable:!0,get:function(){return y.NavigationStackScreenProps}}),Object.defineProperty(t,"HeaderProps",{enumerable:!0,get:function(){return y.HeaderProps}}),Object.defineProperty(t,"HeaderBackButtonProps",{enumerable:!0,get:function(){return y.HeaderBackButtonProps}});var g=b(n(8));function b(e){return e&&e.__esModule?e:{default:e}}t.Assets=g.default.select({ios:[n(79),n(158)],default:[n(79)]})},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(39),i=a(n(8)),o=a(n(147));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=(0,r.StackRouter)(e,t),a=(0,r.createNavigator)(o.default,n,t);return t.disableKeyboardHandling||"web"===i.default.OS||(a=(0,r.createKeyboardAwareNavigator)(a,t)),a}},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}},function(e,t,n){"use strict";n.r(t);var r=n(29);t.default=r.a},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=h(n(31)),i=h(n(51)),o=h(n(15)),a=h(n(16)),s=h(n(17)),l=h(n(18)),u=h(n(19)),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),f=h(n(28)),d=h(n(8)),p=n(97);function h(e){return e&&e.__esModule?e:{default:e}}var v=f.default.createAnimatedComponent(p.BaseButton),m="android"===d.default.OS||"ios"===d.default.OS,y=function(e){function t(){var e,n;(0,o.default)(this,t);for(var r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];return(n=(0,s.default)(this,(e=(0,l.default)(t)).call.apply(e,[this].concat(i)))).opacity=new f.default.Value(1),n.handleActiveStateChange=function(e){"android"!==d.default.OS&&f.default.spring(n.opacity,{stiffness:1e3,damping:500,mass:3,overshootClamping:!0,restDisplacementThreshold:.01,restSpeedThreshold:.01,toValue:e?n.props.activeOpacity:1,useNativeDriver:m}).start(),n.props.onActiveStateChange&&n.props.onActiveStateChange(e)},n}return(0,u.default)(t,e),(0,a.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.style,o=e.enabled,a=(0,i.default)(e,["children","style","enabled"]);return c.createElement(v,(0,r.default)({},a,{onActiveStateChange:this.handleActiveStateChange,style:[n,"ios"===d.default.OS&&o&&{opacity:this.opacity}],__source:{fileName:"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/BorderlessButton.tsx",lineNumber:42}}),t)}}]),t}(c.Component);y.defaultProps={activeOpacity:.3,borderless:!0},t.default=y},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.tintColor;return r.createElement("svg",{width:"24px",height:"24px",viewBox:"0 0 24 24",__source:{fileName:i,lineNumber:9}},r.createElement("path",{fill:t,d:"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z",__source:{fileName:i,lineNumber:10}}))};var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1));var i="/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/Header/BackButtonWeb.tsx"},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=m(n(15)),i=m(n(16)),o=m(n(17)),a=m(n(18)),s=m(n(19)),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),u=m(n(21)),c=m(n(64)),f=m(n(23)),d=m(n(3)),p=m(n(4)),h=m(n(155)),v=m(n(79));function m(e){return e&&e.__esModule?e:{default:e}}var y="/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/Header/ModularHeaderBackButton.tsx",g=function(e){function t(){var e,n;(0,r.default)(this,t);for(var i=arguments.length,s=new Array(i),l=0;l<i;l++)s[l]=arguments[l];return(n=(0,o.default)(this,(e=(0,a.default)(t)).call.apply(e,[this].concat(s)))).state={},n.onTextLayout=function(e){n.state.initialTextWidth||n.setState({initialTextWidth:e.nativeEvent.layout.x+e.nativeEvent.layout.width})},n.getTitleText=function(){var e=n.props,t=e.width,r=e.title,i=e.truncatedTitle,o=n.state.initialTextWidth;return null===r?null:r?o&&t&&o>t?i:r.length>8?i:r:i},n}return(0,s.default)(t,e),(0,i.default)(t,[{key:"renderBackImage",value:function(){var e=this.props,t=e.backImage,n=e.backTitleVisible,r=e.tintColor;return l.isValidElement(t)?t:t?t({tintColor:r}):l.createElement(c.default,{style:[b.icon,!!n&&b.iconWithTitle,!!r&&{tintColor:r}],source:v.default,__source:{fileName:y,lineNumber:51}})}},{key:"maybeRenderTitle",value:function(){var e=this.props,t=e.backTitleVisible,n=e.titleStyle,r=e.tintColor,i=this.getTitleText();if(!t||null===i)return null;var o=this.props.LabelContainerComponent;return l.createElement(o,{__source:{fileName:y,lineNumber:90}},l.createElement(f.default,{accessible:!1,onLayout:this.onTextLayout,style:[b.title,!!r&&{color:r},n],numberOfLines:1,__source:{fileName:y,lineNumber:91}},this.getTitleText()))}},{key:"render",value:function(){var e=this.props,t=e.onPress,n=e.title,r=this.props.ButtonContainerComponent;return l.createElement(h.default,{accessibilityComponentType:"button",accessibilityLabel:n?n+", back":"Go back",accessibilityTraits:"button",testID:"header-back",delayPressIn:0,onPress:t,style:b.container,borderless:!0,__source:{fileName:y,lineNumber:112}},l.createElement(d.default,{style:b.container,__source:{fileName:y,lineNumber:122}},l.createElement(r,{__source:{fileName:y,lineNumber:123}},this.renderBackImage()),this.maybeRenderTitle()))}}]),t}(l.PureComponent);g.defaultProps={tintColor:"#037aff",truncatedTitle:"Back"};var b=p.default.create({container:{alignItems:"center",flexDirection:"row",backgroundColor:"transparent",marginBottom:1,overflow:"visible"},title:{fontSize:17,paddingRight:10},icon:{height:21,width:12,marginLeft:9,marginRight:22,marginVertical:12,resizeMode:"contain",transform:[{scaleX:u.default.isRTL?-1:1}]},iconWithTitle:{marginRight:3}});t.default=g},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(t<e)return e;if(t>n)return n;return t}},function(e,t,n){e.exports=n(290)},function(e,t,n){var r=function(e){"use strict";var t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},i=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function s(e,t,n,r){var i=t&&t.prototype instanceof c?t:c,o=Object.create(i.prototype),a=new S(r||[]);return o._invoke=function(e,t,n){var r="suspendedStart";return function(i,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw o;return E()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=b(a,n);if(s){if(s===u)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var c=l(e,t,n);if("normal"===c.type){if(r=n.done?"completed":"suspendedYield",c.arg===u)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r="completed",n.method="throw",n.arg=c.arg)}}}(e,n,a),o}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var u={};function c(){}function f(){}function d(){}var p={};p[i]=function(){return this};var h=Object.getPrototypeOf,v=h&&h(h(O([])));v&&v!==t&&n.call(v,i)&&(p=v);var m=d.prototype=c.prototype=Object.create(p);function y(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function g(e){var t;this._invoke=function(r,i){function o(){return new Promise((function(t,o){!function t(r,i,o,a){var s=l(e[r],e,i);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==typeof c&&n.call(c,"__await")?Promise.resolve(c.__await).then((function(e){t("next",e,o,a)}),(function(e){t("throw",e,o,a)})):Promise.resolve(c).then((function(e){u.value=e,o(u)}),(function(e){return t("throw",e,o,a)}))}a(s.arg)}(r,i,t,o)}))}return t=t?t.then(o,o):o()}}function b(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,b(e,t),"throw"===t.method))return u;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var r=l(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,u;var i=r.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,u):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,u)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function w(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function O(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:E}}function E(){return{value:void 0,done:!0}}return f.prototype=m.constructor=d,d.constructor=f,d[a]=f.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,d):(e.__proto__=d,a in e||(e[a]="GeneratorFunction")),e.prototype=Object.create(m),e},e.awrap=function(e){return{__await:e}},y(g.prototype),g.prototype[o]=function(){return this},e.AsyncIterator=g,e.async=function(t,n,r,i){var o=new g(s(t,n,r,i));return e.isGeneratorFunction(n)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},y(m),m[a]="Generator",m[i]=function(){return this},m.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=O,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],a=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var s=n.call(o,"catchLoc"),l=n.call(o,"finallyLoc");if(s&&l){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,u):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),u},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),w(n),u}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;w(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:O(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),u}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=Object.prototype.hasOwnProperty;function r(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}t.default=function(e,t){if(r(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var i=Object.keys(e),o=Object.keys(t);if(i.length!==o.length)return!1;for(var a=0;a<i.length;a++)if(!n.call(t,i[a])||!r(e[i[a]],t[i[a]]))return!1;return!0}},function(e,t){},function(e,t,n){"use strict";n.r(t);var r=n(29),i=n(8),o=n(1),a=n.n(o),s=n(3),l=n(57),u=n(2),c=n.n(u);function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){p(e,t,n[t])}))}return e}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function h(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var m=function(e){h(n,e);var t=n.prototype;function n(t,n){var r;return(r=e.call(this,t,n)||this)._keyExtractor=function(e,t){var n=r._subExtractor(t);return n&&n.key||String(t)},r._convertViewable=function(e){c()(null!=e.index,"Received a broken ViewToken");var t=r._subExtractor(e.index);if(!t)return null;var n=t.section.keyExtractor||r.props.keyExtractor;return d({},e,{index:t.index,key:n(e.item,t.index),section:t.section})},r._onViewableItemsChanged=function(e){var t=e.viewableItems,n=e.changed;r.props.onViewableItemsChanged&&r.props.onViewableItemsChanged({viewableItems:t.map(r._convertViewable,v(v(r))).filter(Boolean),changed:n.map(r._convertViewable,v(v(r))).filter(Boolean)})},r._renderItem=function(e){var t=e.item,n=e.index,i=r._subExtractor(n);if(!i)return null;var o=i.index;if(null==o){var s=i.section;if(!0===i.header){var l=r.props.renderSectionHeader;return l?l({section:s}):null}var u=r.props.renderSectionFooter;return u?u({section:s}):null}var f=i.section.renderItem||r.props.renderItem,d=r._getSeparatorComponent(n,i);return c()(f,"no renderItem!"),a.a.createElement(y,{SeparatorComponent:d,LeadingSeparatorComponent:0===o?r.props.SectionSeparatorComponent:void 0,cellKey:i.key,index:o,item:t,leadingItem:i.leadingItem,leadingSection:i.leadingSection,onUpdateSeparator:r._onUpdateSeparator,prevCellKey:(r._subExtractor(n-1)||{}).key,ref:function(e){r._cellRefs[i.key]=e},renderItem:f,section:i.section,trailingItem:i.trailingItem,trailingSection:i.trailingSection})},r._onUpdateSeparator=function(e,t){var n=r._cellRefs[e];n&&n.updateSeparatorProps(t)},r._cellRefs={},r._captureRef=function(e){r._listRef=e},r.state=r._computeState(t),r}return t.scrollToLocation=function(e){for(var t=e.itemIndex+1,n=0;n<e.sectionIndex;n++)t+=this.props.sections[n].data.length+2;var r=d({},e,{index:t});this._listRef.scrollToIndex(r)},t.getListRef=function(){return this._listRef},t._subExtractor=function(e){for(var t=e,n=this.props.keyExtractor,r=0;r<this.props.sections.length;r++){var i=this.props.sections[r],o=i.key||String(r);if(!((t-=1)>=i.data.length+1))return-1===t?{section:i,key:o+":header",index:null,header:!0,trailingSection:this.props.sections[r+1]}:t===i.data.length?{section:i,key:o+":footer",index:null,header:!1,trailingSection:this.props.sections[r+1]}:{section:i,key:o+":"+(i.keyExtractor||n)(i.data[t],t),index:t,leadingItem:i.data[t-1],leadingSection:this.props.sections[r-1],trailingItem:i.data[t+1],trailingSection:this.props.sections[r+1]};t-=i.data.length+1}},t._getSeparatorComponent=function(e,t){if(!(t=t||this._subExtractor(e)))return null;var n=t.section.ItemSeparatorComponent||this.props.ItemSeparatorComponent,r=this.props.SectionSeparatorComponent,i=e===this.state.childProps.getItemCount()-1,o=t.index===t.section.data.length-1;return r&&o?r:!n||o||i?null:n},t._computeState=function(e){var t=e.ListHeaderComponent?1:0,n=[],r=e.sections.reduce((function(e,r){return n.push(e+t),e+r.data.length+2}),0);return{childProps:d({},e,{renderItem:this._renderItem,ItemSeparatorComponent:void 0,data:e.sections,getItemCount:function(){return r},getItem:g,keyExtractor:this._keyExtractor,onViewableItemsChanged:e.onViewableItemsChanged?this._onViewableItemsChanged:void 0,stickyHeaderIndices:e.stickySectionHeadersEnabled?n:void 0})}},t.UNSAFE_componentWillReceiveProps=function(e){this.setState(this._computeState(e))},t.render=function(){return a.a.createElement(l.a,f({},this.state.childProps,{ref:this._captureRef}))},n}(a.a.PureComponent);m.defaultProps=d({},l.a.defaultProps,{data:[]});var y=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).state={separatorProps:{highlighted:!1,leadingItem:t.props.item,leadingSection:t.props.leadingSection,section:t.props.section,trailingItem:t.props.trailingItem,trailingSection:t.props.trailingSection},leadingSeparatorProps:{highlighted:!1,leadingItem:t.props.leadingItem,leadingSection:t.props.leadingSection,section:t.props.section,trailingItem:t.props.item,trailingSection:t.props.trailingSection}},t._separators={highlight:function(){["leading","trailing"].forEach((function(e){return t._separators.updateProps(e,{highlighted:!0})}))},unhighlight:function(){["leading","trailing"].forEach((function(e){return t._separators.updateProps(e,{highlighted:!1})}))},updateProps:function(e,n){var r=t.props,i=r.LeadingSeparatorComponent,o=r.cellKey,a=r.prevCellKey;"leading"===e&&i?t.setState((function(e){return{leadingSeparatorProps:d({},e.leadingSeparatorProps,n)}})):t.props.onUpdateSeparator("leading"===e&&a||o,n)}},t}h(t,e);var n=t.prototype;return n.UNSAFE_componentWillReceiveProps=function(e){var t=this;this.setState((function(n){return{separatorProps:d({},t.state.separatorProps,{leadingItem:e.item,leadingSection:e.leadingSection,section:e.section,trailingItem:e.trailingItem,trailingSection:e.trailingSection}),leadingSeparatorProps:d({},t.state.leadingSeparatorProps,{leadingItem:e.leadingItem,leadingSection:e.leadingSection,section:e.section,trailingItem:e.item,trailingSection:e.trailingSection})}}))},n.updateSeparatorProps=function(e){this.setState((function(t){return{separatorProps:d({},t.separatorProps,e)}}))},n.render=function(){var e=this.props,t=e.LeadingSeparatorComponent,n=e.SeparatorComponent,r=e.item,i=e.index,o=e.section,l=this.props.renderItem({item:r,index:i,section:o,separators:this._separators}),u=t&&a.a.createElement(t,this.state.leadingSeparatorProps),c=n&&a.a.createElement(n,this.state.separatorProps);return u||c?a.a.createElement(s.default,null,u,l,c):l},t}(a.a.Component);function g(e,t){if(!e)return null;for(var n=t-1,r=0;r<e.length;r++){if(-1===n||n===e[r].data.length)return e[r];if(n<e[r].data.length)return e[r].data[n];n-=e[r].data.length+2}return null}var b=m;function _(){return(_=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var S=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){w(e,t,n[t])}))}return e}({},b.defaultProps,{stickySectionHeadersEnabled:"ios"===i.default.OS}),O=function(e){var t,n;function i(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this)._captureRef=function(e){t._wrapperListRef=e},t}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=i.prototype;return o.scrollToLocation=function(e){this._wrapperListRef.scrollToLocation(e)},o.recordInteraction=function(){var e=this._wrapperListRef&&this._wrapperListRef.getListRef();e&&e.recordInteraction()},o.flashScrollIndicators=function(){var e=this._wrapperListRef&&this._wrapperListRef.getListRef();e&&e.flashScrollIndicators()},o.getScrollResponder=function(){var e=this._wrapperListRef&&this._wrapperListRef.getListRef();if(e)return e.getScrollResponder()},o.getScrollableNode=function(){var e=this._wrapperListRef&&this._wrapperListRef.getListRef();if(e)return e.getScrollableNode()},o.setNativeProps=function(e){var t=this._wrapperListRef&&this._wrapperListRef.getListRef();t&&t.setNativeProps(e)},o.render=function(){var e=this.props.legacyImplementation?r.a:b;return a.a.createElement(e,_({},this.props,{ref:this._captureRef}))},i}(a.a.PureComponent);O.defaultProps=S;var E=O;t.default=E}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,